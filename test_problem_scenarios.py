#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å user_exists
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

try:
    from src.auth import get_service
    from src.api.users_api import create_user, user_exists
    
    print("üîç –¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = get_service()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    problem_scenarios = [
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞
        "invalid.email@",
        "test@nonexistent-domain-12345.com",
        "@sputnik8.com",
        "test..user@sputnik8.com",
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        "test+user@sputnik8.com",
        "test.user+tag@sputnik8.com",
        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π email
        "very.long.email.address.that.might.cause.issues.in.api@sputnik8.com",
        # –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        "",
        " ",
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤–æ–∑–º–æ–∂–Ω–æ)
        "andrei.shushkov@sputnik8.com"
    ]
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(problem_scenarios)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    for i, test_email in enumerate(problem_scenarios, 1):
        print(f"\n{i}. –¢–µ—Å—Ç: '{test_email}'")
        
        if not test_email or not test_email.strip():
            print("   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π email, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
            
        try:
            result = user_exists(service, test_email)
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} (—Ç–∏–ø: {type(result)})")
            
            if result is None:
                print("   ‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê! user_exists –≤–µ—Ä–Ω—É–ª None")
                print(f"   üîß –ü—Ä–æ–±–ª–µ–º–Ω—ã–π email: {test_email}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å, –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞
                print("   üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...")
                try:
                    direct_result = service.users().get(userKey=test_email).execute()
                    print(f"   üìä –ü—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω: {direct_result.get('primaryEmail')}")
                except Exception as direct_error:
                    print(f"   üìä –ü—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –¥–∞–ª –æ—à–∏–±–∫—É: {direct_error}")
                    print(f"   üìä –¢–∏–ø –æ—à–∏–±–∫–∏: {type(direct_error)}")
                    
            elif result is True:
                print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    
except Exception as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
