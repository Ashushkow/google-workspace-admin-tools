#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö Google Workspace
"""

import time
import logging
from typing import Optional, List, Dict, Any
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class OperationTiming:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    operation: str
    start_time: float
    end_time: float
    success: bool
    group_email: str
    user_email: Optional[str] = None
    
    @property
    def duration(self) -> float:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return self.end_time - self.start_time


class GroupChangeVerifier:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö Google"""
    
    def __init__(self, google_client):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        
        Args:
            google_client: –≠–∫–∑–µ–º–ø–ª—è—Ä GoogleAPIClient
        """
        self.google_client = google_client
        self.logger = logging.getLogger(__name__)
    
    def verify_member_removal(self, group_email: str, user_email: str, 
                            max_retries: int = 3, retry_delay: int = 5) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã
        
        Args:
            group_email: Email –≥—Ä—É–ø–ø—ã
            user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
            retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –≤ –≥—Ä—É–ø–ø–µ
        """
        for attempt in range(max_retries):
            try:
                self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} –∏–∑ –≥—Ä—É–ø–ø—ã {group_email}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                
                members = self.google_client.get_group_members(group_email)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                user_found = any(
                    member.get('email', '').lower() == user_email.lower() 
                    for member in members
                )
                
                if not user_found:
                    self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_email}")
                    return True
                    
                if attempt < max_retries - 1:
                    self.logger.warning(f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –≤—Å–µ –µ—â–µ –≤ –≥—Ä—É–ø–ø–µ {group_email}, –æ–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫...")
                    time.sleep(retry_delay)
                else:
                    self.logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_email} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã {group_email}: {e}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
                    
        return False
    
    def verify_member_addition(self, group_email: str, user_email: str,
                             max_retries: int = 3, retry_delay: int = 5) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
        
        Args:
            group_email: Email –≥—Ä—É–ø–ø—ã
            user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
            retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω, False –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        """
        for attempt in range(max_retries):
            try:
                self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} –≤ –≥—Ä—É–ø–ø—É {group_email}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                
                members = self.google_client.get_group_members(group_email)
                
                user_found = any(
                    member.get('email', '').lower() == user_email.lower() 
                    for member in members
                )
                
                if user_found:
                    self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_email}")
                    return True
                    
                if attempt < max_retries - 1:
                    self.logger.warning(f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ –≥—Ä—É–ø–ø–µ {group_email}, –æ–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫...")
                    time.sleep(retry_delay)
                else:
                    self.logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_email} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã {group_email}: {e}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
                    
        return False
    
    def get_propagation_status(self, group_email: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã
        
        Args:
            group_email: Email –≥—Ä—É–ø–ø—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –≥—Ä—É–ø–ø—ã
        """
        try:
            if not self.google_client.service:
                return {'error': 'Google API —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
            group_info = self.google_client.service.groups().get(groupKey=group_email).execute()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            members = self.google_client.get_group_members(group_email)
            
            return {
                'group_email': group_email,
                'group_name': group_info.get('name', ''),
                'member_count': len(members),
                'last_updated': group_info.get('adminCreated', ''),
                'status': 'active' if members else 'empty',
                'direct_members_count': group_info.get('directMembersCount', 0)
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã {group_email}: {e}")
            return {'error': str(e)}


class GroupOperationMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≥—Ä—É–ø–ø–∞–º–∏"""
    
    def __init__(self):
        self.timings: List[OperationTiming] = []
        self.logger = logging.getLogger(__name__)
    
    def time_operation(self, operation: str, group_email: str, user_email: str = None):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        
        Args:
            operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            group_email: Email –≥—Ä—É–ø–ø—ã
            user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        """
        class TimingContext:
            def __init__(self, monitor, operation, group_email, user_email):
                self.monitor = monitor
                self.operation = operation
                self.group_email = group_email
                self.user_email = user_email
                self.start_time = None
                self.success = False
            
            def __enter__(self):
                self.start_time = time.time()
                self.monitor.logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {self.operation}")
                return self
            
            def __exit__(self, exc_type, exc_val, exc_tb):
                end_time = time.time()
                self.success = exc_type is None
                
                timing = OperationTiming(
                    operation=self.operation,
                    start_time=self.start_time,
                    end_time=end_time,
                    success=self.success,
                    group_email=self.group_email,
                    user_email=self.user_email
                )
                
                self.monitor.timings.append(timing)
                
                status = "‚úÖ —É—Å–ø–µ—à–Ω–æ" if self.success else "‚ùå —Å –æ—à–∏–±–∫–æ–π"
                self.monitor.logger.info(f"‚è±Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è {self.operation} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {status} –∑–∞ {timing.duration:.2f} —Å–µ–∫")
        
        return TimingContext(self, operation, group_email, user_email)
    
    def get_average_times(self) -> Dict[str, Dict[str, float]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        """
        if not self.timings:
            return {}
        
        by_operation = {}
        for timing in self.timings:
            if timing.operation not in by_operation:
                by_operation[timing.operation] = []
            by_operation[timing.operation].append(timing.duration)
        
        result = {}
        for operation, times in by_operation.items():
            result[operation] = {
                'average': sum(times) / len(times),
                'min': min(times),
                'max': max(times),
                'count': len(times),
                'total_time': sum(times)
            }
        
        return result
    
    def get_recent_operations(self, limit: int = 10) -> List[OperationTiming]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        return sorted(self.timings, key=lambda x: x.start_time, reverse=True)[:limit]
    
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.timings.clear()
        self.logger.info("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω–∞")
