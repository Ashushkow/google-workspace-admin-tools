#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from pathlib import Path
from datetime import datetime

from ..config.enhanced_config import config
from ..utils.exceptions import HealthCheckError


@dataclass
class HealthIssue:
    """–ü—Ä–æ–±–ª–µ–º–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    component: str
    severity: str  # 'critical', 'warning', 'info'
    message: str
    details: Optional[Dict[str, Any]] = None


@dataclass
class HealthStatus:
    """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    is_healthy: bool
    issues: List[HealthIssue]
    last_check: datetime
    check_duration: float
    
    @property
    def has_critical_issues(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        return any(issue.severity == 'critical' for issue in self.issues)
    
    @property
    def has_warnings(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        return any(issue.severity == 'warning' for issue in self.issues)


class HealthChecker:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.checks = [
            self._check_configuration,
            self._check_credentials,
            self._check_directories,
            self._check_permissions,
            self._check_google_api,
            self._check_cache,
            self._check_database,
            self._check_disk_space,
            self._check_memory,
        ]
    
    async def check_all(self) -> HealthStatus:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        
        Returns:
            –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        """
        start_time = datetime.now()
        issues = []
        
        self.logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        for check in self.checks:
            try:
                check_issues = await check()
                if check_issues:
                    issues.extend(check_issues)
            except Exception as e:
                issues.append(HealthIssue(
                    component=check.__name__,
                    severity='critical',
                    message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}",
                    details={'exception': str(e)}
                ))
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        is_healthy = not any(issue.severity == 'critical' for issue in issues)
        
        status = HealthStatus(
            is_healthy=is_healthy,
            issues=issues,
            last_check=end_time,
            check_duration=duration
        )
        
        self._log_health_status(status)
        return status
    
    async def _check_configuration(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        issues = []
        
        try:
            settings = config.settings
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if settings.google_workspace_domain == "yourdomain.com":
                issues.append(HealthIssue(
                    component="configuration",
                    severity="critical",
                    message="–î–æ–º–µ–Ω Google Workspace –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    details={"setting": "google_workspace_domain"}
                ))
            
            if settings.google_workspace_admin == "admin@yourdomain.com":
                issues.append(HealthIssue(
                    component="configuration",
                    severity="critical",
                    message="Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    details={"setting": "google_workspace_admin"}
                ))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if settings.secret_key == "your-secret-key-here":
                issues.append(HealthIssue(
                    component="configuration",
                    severity="warning",
                    message="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á",
                    details={"setting": "secret_key"}
                ))
            
        except Exception as e:
            issues.append(HealthIssue(
                component="configuration",
                severity="critical",
                message=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}"
            ))
        
        return issues
    
    async def _check_credentials(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ credentials"""
        issues = []
        
        try:
            creds_path = Path(config.settings.google_application_credentials)
            
            if not creds_path.exists():
                issues.append(HealthIssue(
                    component="credentials",
                    severity="critical",
                    message=f"–§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {creds_path}",
                    details={"path": str(creds_path)}
                ))
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                if creds_path.stat().st_size == 0:
                    issues.append(HealthIssue(
                        component="credentials",
                        severity="critical",
                        message="–§–∞–π–ª credentials –ø—É—Å—Ç"
                    ))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                if not creds_path.is_file():
                    issues.append(HealthIssue(
                        component="credentials",
                        severity="warning",
                        message="–§–∞–π–ª credentials –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ñ–∞–π–ª–æ–º"
                    ))
        
        except Exception as e:
            issues.append(HealthIssue(
                component="credentials",
                severity="critical",
                message=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ credentials: {e}"
            ))
        
        return issues
    
    async def _check_directories(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        issues = []
        
        required_dirs = ["logs", "data", "cache", "temp"]
        
        for dir_name in required_dirs:
            dir_path = Path(dir_name)
            
            if not dir_path.exists():
                try:
                    dir_path.mkdir(parents=True, exist_ok=True)
                    issues.append(HealthIssue(
                        component="directories",
                        severity="info",
                        message=f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}"
                    ))
                except Exception as e:
                    issues.append(HealthIssue(
                        component="directories",
                        severity="critical",
                        message=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {dir_name}: {e}"
                    ))
            
            elif not dir_path.is_dir():
                issues.append(HealthIssue(
                    component="directories",
                    severity="critical",
                    message=f"{dir_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"
                ))
        
        return issues
    
    async def _check_permissions(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        write_dirs = ["logs", "data", "cache", "temp"]
        
        for dir_name in write_dirs:
            dir_path = Path(dir_name)
            
            if dir_path.exists():
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    test_file = dir_path / ".health_check_test"
                    test_file.touch()
                    test_file.unlink()
                except Exception as e:
                    issues.append(HealthIssue(
                        component="permissions",
                        severity="critical",
                        message=f"–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {dir_name}: {e}"
                    ))
        
        return issues
    
    async def _check_google_api(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google API"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials —Ñ–∞–π–ª–∞
            creds_path = Path(config.settings.google_application_credentials)
            if not creds_path.exists():
                issues.append(HealthIssue(
                    component="google_api",
                    severity="critical",
                    message=f"–§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {creds_path}"
                ))
                return issues
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π API (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
            try:
                from ..auth import get_service, detect_credentials_type
                
                creds_type = detect_credentials_type()
                if creds_type == 'oauth2':
                    # –î–ª—è OAuth 2.0 –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –º—è–≥–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                    service = get_service()
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    test_result = service.users().list(customer='my_customer', maxResults=1).execute()
                    users = test_result.get('users', [])
                    
                    if users:
                        # API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã - –≤—Å–µ —Ö–æ—Ä–æ—à–æ
                        pass
                    else:
                        issues.append(HealthIssue(
                            component="google_api",
                            severity="warning",
                            message="Google API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                        ))
                        
                else:
                    # –î–ª—è Service Account –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API
                    from ..api.google_api_client import GoogleAPIClient
                    
                    client = GoogleAPIClient(config.settings.google_application_credentials)
                    
                    if not client.initialize():
                        issues.append(HealthIssue(
                            component="google_api",
                            severity="critical",
                            message="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google API –∫–ª–∏–µ–Ω—Ç"
                        ))
                        return issues
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if not await client.test_connection():
                        issues.append(HealthIssue(
                            component="google_api",
                            severity="critical",
                            message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google API"
                        ))
                        return issues
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    try:
                        quota_status = await client.get_quota_status()
                        if quota_status and quota_status.usage_percentage > 90:
                            issues.append(HealthIssue(
                                component="google_api",
                                severity="warning",
                                message=f"–ö–≤–æ—Ç–∞ Google API –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∞: {quota_status.usage_percentage:.1f}%"
                            ))
                    except Exception:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–æ—Ç
                        pass
                        
            except Exception as api_error:
                # –ï—Å–ª–∏ OAuth 2.0 —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                if "consent" in str(api_error).lower() or "authorization" in str(api_error).lower():
                    issues.append(HealthIssue(
                        component="google_api",
                        severity="info",
                        message="Google API —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"
                    ))
                elif "insufficient" in str(api_error).lower():
                    issues.append(HealthIssue(
                        component="google_api",
                        severity="warning",
                        message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ Google API"
                    ))
                else:
                    issues.append(HealthIssue(
                        component="google_api",
                        severity="warning",  # –°–Ω–∏–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
                        message=f"–ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å Google API: {api_error}"
                    ))
        
        except Exception as e:
            # –û–±—â–∏–µ –æ—à–∏–±–∫–∏ - —Ç–æ–∂–µ —Å–Ω–∏–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
            issues.append(HealthIssue(
                component="google_api",
                severity="warning",
                message=f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Google API: {e}"
            ))
        
        return issues
    
    async def _check_cache(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        issues = []
        
        try:
            from ..repositories.cache_repository import CacheRepository
            
            cache_repo = CacheRepository()
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_key = "health_check_test"
            test_value = "test_value"
            
            await cache_repo.set(test_key, test_value)
            retrieved_value = await cache_repo.get(test_key)
            
            if retrieved_value != test_value:
                issues.append(HealthIssue(
                    component="cache",
                    severity="warning",
                    message="–ö—ç—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                ))
            
            await cache_repo.delete(test_key)
        
        except Exception as e:
            issues.append(HealthIssue(
                component="cache",
                severity="warning",
                message=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {e}"
            ))
        
        return issues
    
    async def _check_database(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        issues = []
        
        try:
            db_path = config.get_database_path()
            
            if not db_path.parent.exists():
                issues.append(HealthIssue(
                    component="database",
                    severity="critical",
                    message=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_path.parent}"
                ))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î
            if db_path.exists():
                if not db_path.is_file():
                    issues.append(HealthIssue(
                        component="database",
                        severity="critical",
                        message="–§–∞–π–ª –ë–î –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ñ–∞–π–ª–æ–º"
                    ))
        
        except Exception as e:
            issues.append(HealthIssue(
                component="database",
                severity="critical",
                message=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}"
            ))
        
        return issues
    
    async def _check_disk_space(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
        issues = []
        
        try:
            import shutil
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
            free_bytes = shutil.disk_usage(".").free
            free_mb = free_bytes / (1024 * 1024)
            
            if free_mb < 100:  # –ú–µ–Ω–µ–µ 100 –ú–ë
                issues.append(HealthIssue(
                    component="disk_space",
                    severity="critical",
                    message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_mb:.1f} –ú–ë"
                ))
            elif free_mb < 500:  # –ú–µ–Ω–µ–µ 500 –ú–ë
                issues.append(HealthIssue(
                    component="disk_space",
                    severity="warning",
                    message=f"–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_mb:.1f} –ú–ë"
                ))
        
        except Exception as e:
            issues.append(HealthIssue(
                component="disk_space",
                severity="warning",
                message=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {e}"
            ))
        
        return issues
    
    async def _check_memory(self) -> List[HealthIssue]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        issues = []
        
        try:
            import psutil
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            
            if memory.percent > 90:
                issues.append(HealthIssue(
                    component="memory",
                    severity="warning",
                    message=f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent:.1f}%"
                ))
        
        except ImportError:
            # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            pass
        except Exception as e:
            issues.append(HealthIssue(
                component="memory",
                severity="info",
                message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–º—è—Ç—å: {e}"
            ))
        
        return issues
    
    def _log_health_status(self, status: HealthStatus):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if status.is_healthy:
            self.logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ {status.check_duration:.2f}—Å)")
        else:
            self.logger.error(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ {status.check_duration:.2f}—Å)")
        
        for issue in status.issues:
            level = {
                'critical': logging.ERROR,
                'warning': logging.WARNING,
                'info': logging.INFO
            }.get(issue.severity, logging.INFO)
            
            self.logger.log(level, f"[{issue.component}] {issue.message}")


def is_healthy() -> bool:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è health check
    
    Returns:
        True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not Path("credentials.json").exists():
            return False
        
        if not Path("logs").exists():
            return False
        
        return True
    
    except Exception:
        return False
