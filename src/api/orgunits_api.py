# -*- coding: utf-8 -*-
"""
API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏ (OU) Google Workspace.
"""

import logging
from typing import Any, List, Dict, Optional
from googleapiclient.errors import HttpError

logger = logging.getLogger(__name__)


def list_orgunits(service: Any) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –≤ –¥–æ–º–µ–Ω–µ.
    
    Args:
        service: –°–µ—Ä–≤–∏—Å Google Directory API
        
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
    """
    try:
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ service –æ–±—ä–µ–∫—Ç–æ–º ServiceAdapter
        if hasattr(service, '_users') and hasattr(service, '_groups'):
            # –≠—Ç–æ ServiceAdapter, –ø–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Google API
            try:
                from ..auth import get_service
                google_service = get_service()
                result = google_service.orgunits().list(
                    customerId='my_customer',
                    type='all'  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ OU –≤–∫–ª—é—á–∞—è –¥–æ—á–µ—Ä–Ω–∏–µ
                ).execute()
            except ImportError:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Google API")
                return []
        else:
            # –ü—Ä—è–º–æ–π Google API service
            result = service.orgunits().list(
                customerId='my_customer',
                type='all'  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ OU –≤–∫–ª—é—á–∞—è –¥–æ—á–µ—Ä–Ω–∏–µ
            ).execute()
        
        orgunits = result.get('organizationUnits', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        root_orgunit = {
            'name': 'Root Organization',
            'orgUnitPath': '/',
            'description': '–ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–æ—Ä–Ω–µ–≤—ã–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –≤ –Ω–∞—á–∞–ª–µ
        all_orgunits = [root_orgunit] + orgunits
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_orgunits)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π")
        
        return all_orgunits
        
    except HttpError as e:
        if e.resp.status == 403:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ OU")
            logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É Service Account –µ—Å—Ç—å –ø—Ä–∞–≤–∞ Admin SDK API")
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ OU: {e}")
        return []
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ OU: {e}")
        return []


def get_orgunit(service: Any, org_unit_path: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏.
    
    Args:
        service: –°–µ—Ä–≤–∏—Å Google Directory API
        org_unit_path: –ü—É—Ç—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–º—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
        
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∏–ª–∏ None
    """
    try:
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± OU: {org_unit_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ service –æ–±—ä–µ–∫—Ç–æ–º ServiceAdapter
        if hasattr(service, '_users') and hasattr(service, '_groups'):
            try:
                from ..auth import get_service
                google_service = get_service()
                result = google_service.orgunits().get(
                    customerId='my_customer', 
                    orgUnitPath=org_unit_path
                ).execute()
            except ImportError:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Google API")
                return None
        else:
            result = service.orgunits().get(
                customerId='my_customer', 
                orgUnitPath=org_unit_path
            ).execute()
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± OU: {result.get('name', 'Unknown')}")
        return result
        
    except HttpError as e:
        if e.resp.status == 404:
            logger.warning(f"‚ö†Ô∏è OU –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {org_unit_path}")
        elif e.resp.status == 403:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± OU")
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ OU: {e}")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± OU: {e}")
        return None


def create_orgunit(service: Any, name: str, parent_path: str = "/", 
                  description: str = "") -> Optional[Dict[str, Any]]:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.
    
    Args:
        service: –°–µ—Ä–≤–∏—Å Google Directory API
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        parent_path: –ü—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ä–µ–Ω—å)
        description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∏–ª–∏ None
    """
    try:
        logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ OU: {name} –≤ {parent_path}")
        
        orgunit_body = {
            'name': name,
            'parentOrgUnitPath': parent_path,
            'description': description
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ service –æ–±—ä–µ–∫—Ç–æ–º ServiceAdapter
        if hasattr(service, '_users') and hasattr(service, '_groups'):
            try:
                from ..auth import get_service
                google_service = get_service()
                result = google_service.orgunits().insert(
                    customerId='my_customer',
                    body=orgunit_body
                ).execute()
            except ImportError:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Google API")
                return None
        else:
            result = service.orgunits().insert(
                customerId='my_customer',
                body=orgunit_body
            ).execute()
        
        logger.info(f"‚úÖ OU —Å–æ–∑–¥–∞–Ω–æ: {result.get('name', 'Unknown')}")
        return result
        
    except HttpError as e:
        if e.resp.status == 403:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è OU")
        elif e.resp.status == 409:
            logger.error(f"‚ùå OU —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}")
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ OU: {e}")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OU: {e}")
        return None


def get_orgunit_display_name(org_unit_path: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—É—Ç—å OU –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        org_unit_path: –ü—É—Ç—å –∫ OU (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/IT/Developers")
        
    Returns:
        –ß–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ OU
    """
    if org_unit_path == "/":
        return "üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
    
    # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª—ç—à –∏ –∑–∞–º–µ–Ω—è–µ–º —Å–ª—ç—à–∏ –Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏
    clean_path = org_unit_path.lstrip("/")
    if "/" in clean_path:
        return f"üè¢ {clean_path.replace('/', ' ‚Üí ')}"
    else:
        return f"üè¢ {clean_path}"


def format_orgunits_for_combobox(orgunits: List[Dict[str, Any]]) -> List[str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ OU –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Combobox.
    
    Args:
        orgunits: –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
        
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π OU
    """
    formatted = []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º OU –ø–æ –ø—É—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    sorted_orgunits = sorted(orgunits, key=lambda ou: ou.get('orgUnitPath', '/'))
    
    for ou in sorted_orgunits:
        path = ou.get('orgUnitPath', '/')
        name = ou.get('name', 'Unknown')
        
        if path == "/":
            formatted.append("üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
            level = path.count('/') - 1
            indent = "  " * level
            formatted.append(f"{indent}üè¢ {name}")
    
    return formatted


def get_orgunit_path_from_display_name(display_name: str, orgunits: List[Dict[str, Any]]) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å OU –ø–æ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é.
    
    Args:
        display_name: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ OU
        orgunits: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö OU
        
    Returns:
        –ü—É—Ç—å –∫ OU
    """
    if "–ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" in display_name:
        return "/"
    
    # –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ—Ç—Å—Ç—É–ø—ã, —ç–º–æ–¥–∑–∏) –∏ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç–æ–µ –∏–º—è
    clean_name = display_name.replace("üè¢", "").replace("üè†", "").strip()
    
    # –ò—â–µ–º OU —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
    for ou in orgunits:
        ou_name = ou.get('name', '').strip()
        if ou_name == clean_name:
            return ou.get('orgUnitPath', '/')
    
    return "/"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–µ–Ω—å


def get_user_orgunit(service: Any, user_email: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å OU –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        service: –°–µ—Ä–≤–∏—Å Google Directory API
        user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü—É—Ç—å –∫ OU –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ OU –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_email}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ service –æ–±—ä–µ–∫—Ç–æ–º ServiceAdapter
        if hasattr(service, '_users') and hasattr(service, '_groups'):
            try:
                from ..auth import get_service
                google_service = get_service()
                user = google_service.users().get(userKey=user_email).execute()
            except ImportError:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Google API")
                return "/"
        else:
            # –ü—Ä—è–º–æ–π Google API service
            user = service.users().get(userKey=user_email).execute()
        
        org_unit_path = user.get('orgUnitPath', '/')
        logger.info(f"‚úÖ OU –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email}: {org_unit_path}")
        
        return org_unit_path
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OU –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email}: {e}")
        return "/"


def get_display_name_for_orgunit_path(org_unit_path: str, orgunits: List[Dict[str, Any]]) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ OU –ø–æ –µ–≥–æ –ø—É—Ç–∏.
    
    Args:
        org_unit_path: –ü—É—Ç—å –∫ OU
        orgunits: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö OU
        
    Returns:
        –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ OU
    """
    if org_unit_path == "/":
        return "üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
    
    # –ò—â–µ–º OU —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º
    for ou in orgunits:
        if ou.get('orgUnitPath', '') == org_unit_path:
            name = ou.get('name', 'Unknown')
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
            level = org_unit_path.count('/') - 1
            indent = "  " * level
            return f"{indent}üè¢ {name}"
    
    return "üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–µ–Ω—å


def move_user_to_orgunit(service: Any, user_email: str, org_unit_path: str) -> Dict[str, Any]:
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.
    
    Args:
        service: –°–µ—Ä–≤–∏—Å Google Directory API
        user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        org_unit_path: –ü—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É OU
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
    """
    try:
        logger.info(f"üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} –≤ OU: {org_unit_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ service –æ–±—ä–µ–∫—Ç–æ–º ServiceAdapter
        if hasattr(service, '_users') and hasattr(service, '_groups'):
            try:
                from ..auth import get_service
                google_service = get_service()
                result = google_service.users().update(
                    userKey=user_email,
                    body={'orgUnitPath': org_unit_path}
                ).execute()
            except ImportError:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Google API")
                return {
                    'success': False,
                    'message': '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google API'
                }
        else:
            # –ü—Ä—è–º–æ–π Google API service
            result = service.users().update(
                userKey=user_email,
                body={'orgUnitPath': org_unit_path}
            ).execute()
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ OU: {org_unit_path}")
        
        return {
            'success': True,
            'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {org_unit_path}',
            'user': result
        }
        
    except HttpError as e:
        if e.resp.status == 403:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            error_msg = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OU"
        elif e.resp.status == 404:
            logger.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ OU –Ω–µ –Ω–∞–π–¥–µ–Ω")
            error_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            error_msg = f"HTTP –æ—à–∏–±–∫–∞: {e}"
            
        return {
            'success': False,
            'message': error_msg
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} –≤ OU {org_unit_path}: {e}")
        return {
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}'
        }


def create_orgunit(service: Any, name: str, parent_ou_path: str = "/", description: str = "") -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.
    
    Args:
        service: –°–µ—Ä–≤–∏—Å Google Directory API
        name: –ù–∞–∑–≤–∞–Ω–∏–µ OU
        parent_ou_path: –ü—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É OU (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ä–Ω–µ–≤–æ–µ)
        description: –û–ø–∏—Å–∞–Ω–∏–µ OU
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
    """
    try:
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ OU: {name} –≤ {parent_ou_path}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É OU
        if parent_ou_path == "/":
            new_ou_path = f"/{name}"
        else:
            new_ou_path = f"{parent_ou_path}/{name}"
        
        ou_body = {
            'name': name,
            'orgUnitPath': new_ou_path,
            'parentOrgUnitPath': parent_ou_path
        }
        
        if description:
            ou_body['description'] = description
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ service –æ–±—ä–µ–∫—Ç–æ–º ServiceAdapter
        if hasattr(service, '_users') and hasattr(service, '_groups'):
            try:
                from ..auth import get_service
                google_service = get_service()
                result = google_service.orgunits().insert(
                    customerId='my_customer',
                    body=ou_body
                ).execute()
            except ImportError:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Google API")
                return {
                    'success': False,
                    'message': '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google API'
                }
        else:
            # –ü—Ä—è–º–æ–π Google API service
            result = service.orgunits().insert(
                customerId='my_customer',
                body=ou_body
            ).execute()
        
        logger.info(f"‚úÖ OU {name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ –ø—É—Ç–∏: {new_ou_path}")
        
        return {
            'success': True,
            'message': f'–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ "{name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
            'orgunit': result,
            'path': new_ou_path
        }
        
    except HttpError as e:
        if e.resp.status == 403:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è OU")
            error_msg = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"
        elif e.resp.status == 409:
            logger.error("‚ùå OU —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            error_msg = "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ OU: {e}")
            error_msg = f"HTTP –æ—à–∏–±–∫–∞: {e}"
            
        return {
            'success': False,
            'message': error_msg
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OU {name}: {e}")
        return {
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}'
        }
