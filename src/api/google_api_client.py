#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Google API Client –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Workspace API.
"""

import asyncio
import logging
from typing import Optional, Dict, Any, List, Callable
from pathlib import Path
from dataclasses import dataclass

try:
    from google.oauth2 import service_account
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
except ImportError:
    service_account = None
    build = None
    HttpError = Exception

from ..config.enhanced_config import config

logger = logging.getLogger(__name__)


@dataclass
class QuotaStatus:
    """–°—Ç–∞—Ç—É—Å –∫–≤–æ—Ç Google API"""
    usage_percentage: float
    requests_per_day: int
    requests_used: int


class GoogleAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Workspace API"""
    
    def __init__(self, credentials_path: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            credentials_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        self.credentials_path = credentials_path
        self.credentials = None
        self.service = None
        self.drive_service = None  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è Drive API
        self.gmail_service = None  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è Gmail API
    
    def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        import os
        is_dev_mode = os.getenv('DEV_MODE', 'False').lower() == 'true'
        
        if is_dev_mode:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è Google API")
            # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–∞–∂–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self.service = "dev_mode_service"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            self.drive_service = "dev_mode_drive_service"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Drive API
            return True
        
        if not self.credentials_path:
            logger.warning("–ü—É—Ç—å –∫ —É—á–µ—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º –Ω–µ —É–∫–∞–∑–∞–Ω")
            return False
            
        credentials_file = Path(self.credentials_path)
        if not credentials_file.exists():
            logger.warning(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_path}")
            return False
            
        try:
            if service_account is None:
                logger.error("Google API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            import json
            with open(credentials_file, 'r') as f:
                creds_data = json.load(f)
            
            # –ü–†–ò–û–†–ò–¢–ï–¢: OAuth 2.0 (Desktop Application)
            if 'installed' in creds_data:
                logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º OAuth 2.0 credentials (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥)")
                if not self._setup_oauth2_credentials(credentials_file):
                    return False
            elif 'type' in creds_data and creds_data['type'] == 'service_account':
                logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º Service Account credentials (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥)")
                if not self._setup_service_account_credentials(credentials_file):
                    return False
            else:
                logger.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                logger.info("üîß –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Admin SDK...")
                self.service = build('admin', 'directory_v1', credentials=self.credentials)
                
                logger.info("üîß –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive API...")
                self.drive_service = build('drive', 'v3', credentials=self.credentials)
                logger.info("‚úÖ Google Drive API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                logger.info("üîß –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail API...")
                self.gmail_service = build('gmail', 'v1', credentials=self.credentials)
                logger.info("‚úÖ Gmail API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º—è–≥–∫–∞—è)
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Admin SDK...")
                try:
                    test_result = self.service.users().list(customer='my_customer', maxResults=1).execute()
                    users_found = test_result.get('users', [])
                    if users_found:
                        logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
                    else:
                        logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø")
                except Exception as user_test_error:
                    logger.warning(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {user_test_error}")
                
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
                return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def get_credentials(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç credentials –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö.
        –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –≤—ã–∑–æ–≤–∞–º–∏ –≤ UI (open_document_management).
        """
        return self.credentials
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google API
        """
        try:
            import os
            is_dev_mode = os.getenv('DEV_MODE', 'False').lower() == 'true'
            if is_dev_mode:
                return True
            if not self.service:
                return False
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None,
                lambda: self.service.users().list(customer='my_customer', maxResults=1).execute()
            )
            return 'users' in result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

    def _execute_with_retries(self, func: Callable[[], Any], retries: int = 3, base_delay: float = 1.0) -> Any:
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö"""
        import time
        for attempt in range(1, retries + 1):
            try:
                return func()
            except HttpError as e:
                status = getattr(e, 'resp', None).status if hasattr(e, 'resp') else None
                if status in (429, 500, 503) and attempt < retries:
                    delay = base_delay * (2 ** (attempt - 1))
                    logger.warning(f"HTTP {status}. –ü–æ–≤—Ç–æ—Ä {attempt}/{retries} —á–µ—Ä–µ–∑ {delay:.1f}—Å")
                    time.sleep(delay)
                    continue
                raise

    def get_users(self, max_results: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            if not self.service:
                logger.error("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            import os
            is_dev_mode = os.getenv('DEV_MODE', 'False').lower() == 'true'
            if is_dev_mode:
                logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return [
                    {
                        'id': 'demo1',
                        'primaryEmail': 'demo1@testdomain.com',
                        'name': {'fullName': '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1', 'givenName': '–î–µ–º–æ', 'familyName': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1'},
                        'suspended': False,
                        'orgUnitPath': '/'
                    },
                    {
                        'id': 'demo2',
                        'primaryEmail': 'demo2@testdomain.com',
                        'name': {'fullName': '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2', 'givenName': '–î–µ–º–æ', 'familyName': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2'},
                        'suspended': False,
                        'orgUnitPath': '/'
                    }
                ]
            
            logger.info(f"üë• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)...")
            all_users: List[Dict[str, Any]] = []
            page_token = None
            page_count = 0
            
            while True:
                page_count += 1
                logger.info(f"  üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_count}...")
                request_params = {
                    'customer': 'my_customer',
                    'maxResults': 500,
                    'orderBy': 'email'
                }
                if page_token:
                    request_params['pageToken'] = page_token
                if max_results and len(all_users) >= max_results:
                    break
                
                result = self._execute_with_retries(lambda: self.service.users().list(**request_params).execute())
                page_users = result.get('users', [])
                if page_users:
                    all_users.extend(page_users)
                    logger.info(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(page_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_count} (–≤—Å–µ–≥–æ: {len(all_users)})")
                else:
                    logger.info(f"    ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count} –ø—É—Å—Ç–∞")
                    break
                page_token = result.get('nextPageToken')
                if not page_token:
                    logger.info("    üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    break
                if page_count > 100:
                    logger.warning(f"    ‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü (–∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è)")
                    break
            
            if max_results and len(all_users) > max_results:
                all_users = all_users[:max_results]
                logger.info(f"  ‚úÇÔ∏è –û–±—Ä–µ–∑–∞–Ω–æ –¥–æ {max_results} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            if not all_users:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return []
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–°–ï–ì–û")
            return all_users
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            if isinstance(e, HttpError):
                logger.error(f"üîç HTTP —Å—Ç–∞—Ç—É—Å: {e.resp.status}")
                logger.error(f"üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.content}")
            return []

    def get_user_by_email(self, email: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email —á–µ—Ä–µ–∑ —Ç–æ—á–µ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        try:
            if not self.service:
                return None
            result = self._execute_with_retries(lambda: self.service.users().get(userKey=email).execute())
            return result
        except HttpError as e:
            if getattr(e, 'resp', None) and e.resp.status == 404:
                return None
            logger.error(f"–û—à–∏–±–∫–∞ get_user_by_email({email}): {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ get_user_by_email({email}): {e}")
            return None

    def get_groups(self, max_results: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            if not self.service:
                return []
            all_groups: List[Dict[str, Any]] = []
            page_token = None
            while True:
                request_params = {
                    'customer': 'my_customer',
                    'maxResults': 200
                }
                if page_token:
                    request_params['pageToken'] = page_token
                result = self._execute_with_retries(lambda: self.service.groups().list(**request_params).execute())
                groups = result.get('groups', [])
                if groups:
                    all_groups.extend(groups)
                    logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø: {len(groups)} –∑–∞–ø–∏—Å–µ–π")
                page_token = result.get('nextPageToken')
                if not page_token:
                    break
                if max_results and len(all_groups) >= max_results:
                    all_groups = all_groups[:max_results]
                    break
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø: {len(all_groups)}")
            return all_groups
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
            return []

    def add_group_member(self, group_email: str, member_email: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É"""
        try:
            if not self.service:
                logger.warning("Google API —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            member_data = {'email': member_email, 'role': 'MEMBER'}
            self._execute_with_retries(lambda: self.service.members().insert(groupKey=group_email, body=member_data).execute())
            logger.info(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {member_email} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_email}")
            return True
        except HttpError as e:
            if e.resp.status == 409:
                logger.info(f"‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ {member_email} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –≥—Ä—É–ø–ø—ã {group_email}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_email} –≤ –≥—Ä—É–ø–ø—É {group_email}: {e}")
                logger.error(f"üîç HTTP —Å—Ç–∞—Ç—É—Å: {e.resp.status}")
                logger.error(f"üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.content}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_email} –≤ –≥—Ä—É–ø–ø—É {group_email}: {e}")
            return False
    
    def remove_group_member(self, group_email: str, member_email: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        try:
            if not self.service:
                logger.warning("Google API —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            self._execute_with_retries(lambda: self.service.members().delete(groupKey=group_email, memberKey=member_email).execute())
            logger.info(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {member_email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_email}")
            return True
        except HttpError as e:
            if e.resp.status == 404:
                logger.info(f"‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ {member_email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {group_email} (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω)")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_email} –∏–∑ –≥—Ä—É–ø–ø—ã {group_email}: {e}")
                logger.error(f"üîç HTTP —Å—Ç–∞—Ç—É—Å: {e.resp.status}")
                logger.error(f"üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.content}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_email} –∏–∑ –≥—Ä—É–ø–ø—ã {group_email}: {e}")
            return False

    def get_group_members(self, group_email: str, max_results: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
        try:
            if not self.service:
                logger.warning("Google API —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            all_members: List[Dict[str, Any]] = []
            page_token = None
            while True:
                request_params = {'groupKey': group_email, 'maxResults': 200}
                if page_token:
                    request_params['pageToken'] = page_token
                result = self._execute_with_retries(lambda: self.service.members().list(**request_params).execute())
                members = result.get('members', [])
                if members:
                    all_members.extend(members)
                    logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group_email}: {len(members)} –∑–∞–ø–∏—Å–µ–π")
                page_token = result.get('nextPageToken')
                if not page_token:
                    break
                if max_results and len(all_members) >= max_results:
                    all_members = all_members[:max_results]
                    break
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group_email}: {len(all_members)}")
            return all_members
        except HttpError as e:
            if e.resp.status == 404:
                logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_email} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return []
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group_email}: {e}")
                logger.error(f"üîç HTTP —Å—Ç–∞—Ç—É—Å: {e.resp.status}")
                logger.error(f"üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.content}")
                return []
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group_email}: {e}")
            return []
    
    async def get_quota_status(self) -> Optional[QuotaStatus]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–≤–æ—Ç Google API"""
        try:
            return QuotaStatus(
                usage_percentage=10.0,
                requests_per_day=1000,
                requests_used=100
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–≤–æ—Ç: {e}")
            return None
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google API (–ø–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞)"""
        return self.service is not None
    
    def _setup_oauth2_credentials(self, credentials_file: Path) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OAuth 2.0 credentials (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥)
        """
        try:
            from google_auth_oauthlib.flow import InstalledAppFlow
            from google.auth.transport.requests import Request
            import pickle
            
            SCOPES = config.google.scopes
            
            token_file = Path(config.google.token_file)
            token_file.parent.mkdir(parents=True, exist_ok=True)
            if token_file.exists():
                logger.info("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω OAuth 2.0")
                with open(token_file, 'rb') as token:
                    self.credentials = pickle.load(token)
            
            if not self.credentials or not self.credentials.valid:
                if self.credentials and self.credentials.expired and self.credentials.refresh_token:
                    logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω OAuth 2.0")
                    self.credentials.refresh(Request())
                else:
                    logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é OAuth 2.0...")
                    print("\n" + "="*60)
                    print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø GOOGLE WORKSPACE")
                    print("="*60)
                    print("–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                    print("–í–æ–π–¥–∏—Ç–µ –≤ Google –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    print("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
                    print("="*60 + "\n")
                    
                    flow = InstalledAppFlow.from_client_secrets_file(credentials_file, SCOPES)
                    self.credentials = flow.run_local_server(
                        port=0,
                        prompt='select_account',
                        authorization_prompt_message='üîê –û—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Workspace...',
                        success_message='‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä.'
                    )
                    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è OAuth 2.0 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            with open(token_file, 'wb') as token:
                pickle.dump(self.credentials, token)
                logger.info("üíæ –¢–æ–∫–µ–Ω OAuth 2.0 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OAuth 2.0: {e}")
            return False
    
    def _setup_service_account_credentials(self, credentials_file: Path) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Service Account credentials (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥)
        """
        try:
            logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Service Account credentials...")
            scopes = config.google.scopes
            self.credentials = service_account.Credentials.from_service_account_file(
                str(credentials_file),
                scopes=scopes
            )
            admin_email = config.settings.google_workspace_admin
            if admin_email and admin_email not in ("admin@yourdomain.com", "admin@example.com"):
                self.credentials = self.credentials.with_subject(admin_email)
                logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–º–µ–Ω–∞: {admin_email}")
            else:
                logger.warning("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–º–µ–Ω–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Service Account: {e}")
            return False
