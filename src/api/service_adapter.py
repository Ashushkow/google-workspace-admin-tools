#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ GUI —Å –Ω–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.
"""

import asyncio
import logging
import os
from typing import Any, List, Dict, Optional
from ..services.user_service import UserService
from ..services.group_service import GroupService

logger = logging.getLogger(__name__)


class ServiceAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º GUI"""
    
    def __init__(self, user_service: UserService, group_service: GroupService = None):
        self.user_service = user_service
        self.group_service = group_service

        # –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self._users = []
        self._groups = []
        self._demo_fallback_mode: bool = False
        self._demo_reason: Optional[str] = None  # –ü—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤–∫–ª—é—á—ë–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º

        # –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        self._data_loaded = False
    
    def _initialize_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞
            print("üìä ServiceAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏)")
            self._data_loaded = False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
            self._demo_fallback_mode = True
            self._initialize_demo_data()
    
    async def _load_data_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            users = await self.user_service.get_all_users()
            self._users = [
                {
                    'primaryEmail': user.email,
                    'name': {'fullName': user.full_name},
                    'id': user.id,
                    'suspended': getattr(user, 'is_suspended', False),
                    'orgUnitPath': getattr(user, 'org_unit_path', '/')
                }
                for user in users
            ]
            
            # –ï—Å–ª–∏ –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤–µ—Ä–Ω—É–ª–∏ –º–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π API
            if len(self._users) < 10:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ
                print(f"–ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤–µ—Ä–Ω—É–ª–∏ —Ç–æ–ª—å–∫–æ {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–•...")
                try:
                    from ..auth import get_service
                    service = get_service()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                    all_users = []
                    page_token = None
                    page_count = 0
                    
                    while True:
                        page_count += 1
                        print(f"  –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_count}...")
                        
                        # –ó–∞–ø—Ä–æ—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        request_params = {
                            'customer': 'my_customer',
                            'maxResults': 500,  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                            'orderBy': 'email'
                        }
                        
                        if page_token:
                            request_params['pageToken'] = page_token
                        
                        result = service.users().list(**request_params).execute()
                        page_users = result.get('users', [])
                        
                        if page_users:
                            all_users.extend(page_users)
                            print(f"    –ü–æ–ª—É—á–µ–Ω–æ {len(page_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_count}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                        page_token = result.get('nextPageToken')
                        if not page_token:
                            break
                        
                        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                        if page_count > 50:
                            print(f"    –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
                            break
                    
                    if all_users:
                        self._users = [
                            {
                                'primaryEmail': user.get('primaryEmail', ''),
                                'name': {'fullName': user.get('name', {}).get('fullName', '')},
                                'id': user.get('id', ''),
                                'suspended': user.get('suspended', False),
                                'orgUnitPath': user.get('orgUnitPath', '/')
                            }
                            for user in all_users
                        ]
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                        self._users.sort(key=lambda user: user.get('primaryEmail', '').lower())
                        print(f"‚úÖ –°—Ç–∞—Ä—ã–π API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∏–ª {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                        
                except Exception as old_api_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: {old_api_error}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.group_service:
                groups = await self.group_service.get_all_groups()
                self._groups = [
                    {
                        'name': group.name,
                        'email': group.email,
                        'id': group.id,
                        'description': getattr(group, 'description', ''),
                        'directMembersCount': getattr(group, 'members_count', 0)
                    }
                    for group in groups
                ]
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π API
            if not self._groups:
                print("–ì—Ä—É–ø–ø—ã –ø—É—Å—Ç—ã, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π API...")
                try:
                    from ..auth import get_service
                    service = get_service()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                    all_groups = []
                    page_token = None
                    page_count = 0
                    
                    while True:
                        page_count += 1
                        print(f"  –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø {page_count}...")
                        
                        request_params = {
                            'customer': 'my_customer',
                            'maxResults': 200
                        }
                        
                        if page_token:
                            request_params['pageToken'] = page_token
                        
                        result = service.groups().list(**request_params).execute()
                        groups = result.get('groups', [])
                        
                        if groups:
                            all_groups.extend(groups)
                            print(f"    ‚Ü≥ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(groups)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        page_token = result.get('nextPageToken')
                        if not page_token:
                            break
                    
                    self._groups = all_groups
                    print(f"‚úÖ –ü—Ä—è–º–æ–π API –∑–∞–≥—Ä—É–∑–∏–ª {len(self._groups)} –≥—Ä—É–ø–ø!")
                    
                except Exception as groups_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API: {groups_error}")
                
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(self._groups)} –≥—Ä—É–ø–ø")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ API —Å –ø–æ–ª–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            try:
                from ..auth import get_service
                service = get_service()
                
                print("–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º: –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
                all_users = []
                page_token = None
                page_count = 0
                
                while True:
                    page_count += 1
                    print(f"  –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count}...")
                    
                    request_params = {
                        'customer': 'my_customer',
                        'maxResults': 500,
                        'orderBy': 'email'
                    }
                    
                    if page_token:
                        request_params['pageToken'] = page_token
                    
                    result = service.users().list(**request_params).execute()
                    page_users = result.get('users', [])
                    
                    if page_users:
                        all_users.extend(page_users)
                        print(f"    –†–µ–∑–µ—Ä–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(page_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    
                    page_token = result.get('nextPageToken')
                    if not page_token:
                        break
                        
                    if page_count > 50:
                        break
                
                if all_users:
                    self._users = [
                        {
                            'primaryEmail': user.get('primaryEmail', ''),
                            'name': {'fullName': user.get('name', {}).get('fullName', '')},
                            'id': user.get('id', ''),
                            'suspended': user.get('suspended', False),
                            'orgUnitPath': user.get('orgUnitPath', '/')
                        }
                        for user in all_users
                    ]
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                    self._users.sort(key=lambda user: user.get('primaryEmail', '').lower())
                    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π API –∑–∞–≥—Ä—É–∑–∏–ª {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                else:
                    self._demo_fallback_mode = True
                    self._initialize_demo_data()
                    
            except Exception as fallback_error:
                print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–π API —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {fallback_error}")
                self._demo_fallback_mode = True
                self._initialize_demo_data()
    
    def _activate_demo_fallback(self, reason: str, exc: Exception = None):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã.

        –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DISABLE_DEMO_FALLBACK=true, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        –≤–º–µ—Å—Ç–æ —Ç–∏—Ö–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É —É–≤–∏–¥–µ–ª –ø—Ä–æ–±–ª–µ–º—É.
        """
        self._demo_reason = reason
        disable = os.getenv('DISABLE_DEMO_FALLBACK', 'false').lower() == 'true'
        if disable:
            # –≠—Å–∫–∞–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–µ –º–∞—Å–∫–∏—Ä—É—è –µ—ë –¥–µ–º–æ-—Ä–µ–∂–∏–º–æ–º
            raise RuntimeError(f"Demo fallback disabled. Reason: {reason}. Original error: {exc}") from exc
        self._demo_fallback_mode = True
        if exc:
            print(f"‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ: {reason} (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc})")
        else:
            print(f"‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ: {reason}")
        self._initialize_demo_data()

    def _initialize_demo_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤"""
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        if self._demo_reason:
            print(f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: {self._demo_reason}")
        print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Google API –≤ config/settings.json")
        
        self._users = [
            {
                'primaryEmail': f'demo1@{self._get_configured_domain()}',
                'name': {'fullName': '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 (–¢–ï–°–¢)'},
                'id': 'demo1',
                'suspended': False,
                'orgUnitPath': '/'
            },
            {
                'primaryEmail': f'demo2@{self._get_configured_domain()}',
                'name': {'fullName': '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 (–¢–ï–°–¢)'},
                'id': 'demo2',
                'suspended': False,
                'orgUnitPath': '/'
            }
        ]
        
        self._groups = [
            {
                'name': '–î–µ–º–æ –ì—Ä—É–ø–ø–∞ 1',
                'email': 'demo-group1@example.com',
                'id': 'demo-group1',
                'description': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ 1',
                'directMembersCount': 1
            },
            {
                'name': '–î–µ–º–æ –ì—Ä—É–ø–ø–∞ 2',
                'email': 'demo-group2@example.com',
                'id': 'demo-group2',
                'description': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ 2',
                'directMembersCount': 1
            }
        ]
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ fallback'–∞ –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        if self._demo_fallback_mode:
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ: {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(self._groups)} –≥—Ä—É–ø–ø")
    
    @property
    def users(self) -> List[Dict[str, Any]]:
        """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        self._ensure_data_loaded()
        return self._users
    
    @property
    def groups(self) -> List[Dict[str, Any]]:
        """–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        self._ensure_data_loaded()
        return self._groups
    
    def _ensure_data_loaded(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
        if not hasattr(self, '_data_loaded') or not self._data_loaded:
            try:
                import time
                import os
                start_time = time.time()
                timeout_seconds = 120  # 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                fast_mode = os.getenv('FAST_LOAD_MODE', 'False').lower() == 'true'
                if fast_mode:
                    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    self._activate_demo_fallback("FAST_LOAD_MODE=true (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)")
                    self._data_loaded = True
                    return
                
                print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Workspace...")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    from ..auth import get_service
                    service = get_service()
                    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                except (TimeoutError, Exception) as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                    try:
                        self._activate_demo_fallback("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞", e)
                    except Exception as escalated:
                        # –ü—Ä–∏ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —ç—Å–∫–∞–ª–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ
                        raise
                    self._data_loaded = True
                    return
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                all_users = []
                page_token = None
                page_count = 0
                max_user_pages = 30  # –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                
                while page_count < max_user_pages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º-–∞—É—Ç
                    if time.time() - start_time > timeout_seconds:
                        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        try:
                            self._activate_demo_fallback("–¢–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π > 120—Å")
                        except Exception:
                            raise
                        self._data_loaded = True
                        return
                    
                    page_count += 1
                    print(f"  üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {page_count}...")
                    
                    try:
                        # –ó–∞–ø—Ä–æ—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        request_params = {
                            'customer': 'my_customer',
                            'maxResults': 500,  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                            'orderBy': 'email'
                        }
                        
                        if page_token:
                            request_params['pageToken'] = page_token
                        
                        result = service.users().list(**request_params).execute()
                        page_users = result.get('users', [])
                        
                        if page_users:
                            all_users.extend(page_users)
                            print(f"    ‚Ü≥ –ü–æ–ª—É—á–µ–Ω–æ {len(page_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_count} (–≤—Å–µ–≥–æ: {len(all_users)})")
                        else:
                            print(f"    ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count} –ø—É—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                            break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                        page_token = result.get('nextPageToken')
                        if not page_token:
                            print(f"    üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                            break
                            
                    except Exception as user_page_error:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {page_count}: {user_page_error}")
                        break
                    
                    # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    if page_count > 50:
                        print(f"    ‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
                        break
                
                if all_users:
                    self._users = [
                        {
                            'primaryEmail': user.get('primaryEmail', ''),
                            'name': {'fullName': user.get('name', {}).get('fullName', '')},
                            'id': user.get('id', ''),
                            'suspended': user.get('suspended', False),
                            'orgUnitPath': user.get('orgUnitPath', '/')
                        }
                        for user in all_users
                    ]
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                    self._users.sort(key=lambda user: user.get('primaryEmail', '').lower())
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    try:
                        self._activate_demo_fallback("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API")
                    except Exception:
                        raise

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –≥—Ä—É–ø–ø—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                elapsed_time = time.time() - start_time
                if elapsed_time > timeout_seconds * 0.7:  # –ï—Å–ª–∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –±–æ–ª—å—à–µ 70% –≤—Ä–µ–º–µ–Ω–∏
                    print(f"‚è∞ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–Ω—è–ª–∞ {elapsed_time:.1f}—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã")
                    self._groups = []
                    self._data_loaded = True
                    print(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 0 –≥—Ä—É–ø–ø (—Ç–∞–π–º-–∞—É—Ç)")
                    return
                
                print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ Google Workspace...")
                all_groups = []
                page_token = None
                page_count = 0
                max_pages = 50  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                
                while page_count < max_pages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º-–∞—É—Ç
                    if time.time() - start_time > timeout_seconds:
                        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é")
                        break
                    
                    page_count += 1
                    print(f"  üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø {page_count}...")
                    
                    try:
                        request_params = {
                            'customer': 'my_customer',
                            'maxResults': 200
                        }
                        
                        if page_token:
                            request_params['pageToken'] = page_token
                        
                        result = service.groups().list(**request_params).execute()
                        groups = result.get('groups', [])
                        
                        if groups:
                            all_groups.extend(groups)
                            print(f"    ‚Ü≥ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(groups)}")
                        else:
                            print(f"    ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count} –ø—É—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
                            break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        page_token = result.get('nextPageToken')
                        if not page_token:
                            print(f"    üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                            break
                            
                    except Exception as page_error:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_count}: {page_error}")
                        break
                
                if page_count >= max_pages:
                    print(f"    ‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü (–∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è)")
                
                if all_groups:
                    self._groups = all_groups
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._groups)} –≥—Ä—É–ø–ø!")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
                    if not hasattr(self, '_groups') or not self._groups:
                        self._groups = []
                
                self._data_loaded = True
                end_time = time.time()
                total_time = end_time - start_time
                print(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f}—Å: {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(self._groups)} –≥—Ä—É–ø–ø")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                try:
                    self._activate_demo_fallback("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", e)
                except Exception:
                    raise
                self._data_loaded = True

    def refresh_data(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Workspace"""
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        self._data_loaded = False
        self._ensure_data_loaded()
    
    def get_users_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self._ensure_data_loaded()
        return len(self._users)
    
    def get_groups_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        self._ensure_data_loaded()
        return len(self._groups)
    
    def _get_configured_domain(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from ..config.enhanced_config import config
            domain = config.settings.google_workspace_domain
            if domain and domain != "yourdomain.com":
                return domain
            return "example.com"
        except:
            return "example.com"
    
    def get_credentials(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç credentials, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google API
        
        Returns:
            Google credentials object
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º auth —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            from ..auth import get_service
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–µ–≥–æ credentials
            service = get_service()
            
            # –£ —Å–µ—Ä–≤–∏—Å–∞ Google API –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ _http —Å credentials
            if hasattr(service, '_http') and hasattr(service._http, 'credentials'):
                return service._http.credentials
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ credentials
            from ..auth import detect_credentials_type, get_service_account_credentials, get_oauth2_credentials
            
            creds_type = detect_credentials_type()
            if creds_type == 'service_account':
                return get_service_account_credentials()
            elif creds_type == 'oauth2':
                return get_oauth2_credentials()
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø credentials: {creds_type}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è credentials: {e}")
            raise


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
def get_user_list(service: Any, force_refresh: bool = False) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    
    Args:
        service: –°–µ—Ä–≤–∏—Å (UserService –∏–ª–∏ ServiceAdapter)
        force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if hasattr(service, 'users'):
        return service.users
    return []


def list_groups(service: Any) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    
    Args:
        service: –°–µ—Ä–≤–∏—Å (GroupService –∏–ª–∏ ServiceAdapter)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    """
    if hasattr(service, 'groups'):
        return service.groups
    return []
