#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–∫—Ç–∏–≤–Ω—ã–π FreeIPA –∫–ª–∏–µ–Ω—Ç –¥–ª—è Windows (–±–µ–∑ Kerberos)
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—É —Å python-freeipa –Ω–∞ Windows –±–µ–∑ Kerberos
"""

import json
import requests
from typing import Dict, List, Optional, Any
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º SSL warnings –¥–ª—è FreeIPA (—Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class FreeIPAClientStub:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π FreeIPA –∫–ª–∏–µ–Ω—Ç –±–µ–∑ Kerberos –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self, server: str, verify_ssl: bool = True, timeout: int = 30):
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ö–µ–º—É
        if not server.startswith(('http://', 'https://')):
            server = f"https://{server}"
        self.host = server.rstrip('/')
        self.verify_ssl = verify_ssl
        self.timeout = timeout
        self.session = requests.Session()
        self.session.verify = verify_ssl
        self.session.timeout = timeout
        self._logged_in = False
        
    def login(self, user: str, password: str) -> bool:
        """–õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å (–±–µ–∑ Kerberos)"""
        login_url = f"{self.host}/ipa/session/login_password"
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usernames_to_try = [
            user,
            f"{user}@infra.int.sputnik8.com",
            user.lower(),
            f"{user.lower()}@infra.int.sputnik8.com"
        ]
        
        for username in usernames_to_try:
            print(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞: URL={login_url}, User={username}")
            
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º CSRF —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                response = self.session.get(f"{self.host}/ipa/ui/")
                
                response = self.session.post(
                    login_url,
                    data={'user': username, 'password': password},
                    headers={
                        'Referer': f"{self.host}/ipa/ui/",
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                    }
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {username}: status={response.status_code}")
                
                if response.text:
                    print(f"üìÑ Response text (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {response.text[:300]}...")
                
                if response.status_code == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                    if ('Set-Cookie' in response.headers or 
                        'ipa_session' in response.text or
                        'user-menu' in response.text or
                        'logout' in response.text.lower()):
                        print(f"‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
                        self._logged_in = True
                        return True
                    else:
                        print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω 200, –Ω–æ –Ω–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –¥–ª—è {username}")
                elif response.status_code == 302:
                    # –†–µ–¥–∏—Ä–µ–∫—Ç –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω
                    print(f"‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç - –≤–æ–∑–º–æ–∂–Ω–æ —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω –¥–ª—è {username}")
                    self._logged_in = True
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –¥–ª—è {username}: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ª–æ–≥–∏–Ω–∞ {username}: {e}")
                continue
        
        print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ª–æ–≥–∏–Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã")
        return False
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Å—Å–∏–∏"""
        if self._logged_in:
            try:
                logout_url = f"{self.host}/ipa/session/logout"
                self.session.get(logout_url)
            except:
                pass
            self._logged_in = False
    
    def _api_call(self, method: str, params: Optional[List] = None, options: Optional[Dict] = None) -> Dict:
        """–ë–∞–∑–æ–≤—ã–π API –≤—ã–∑–æ–≤"""
        if not self._logged_in:
            raise Exception("Not logged in")
        
        api_url = f"{self.host}/ipa/json"
        
        payload = {
            "method": method,
            "params": [params or [], options or {}]
        }
        
        response = self.session.post(
            api_url,
            json=payload,
            headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Referer': f"{self.host}/ipa/ui/"
            }
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"API call failed: {response.status_code}")
    
    def ping(self) -> Dict:
        """Ping —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            return self._api_call("ping")
        except:
            # –ü—Ä–æ—Å—Ç–æ–π ping –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            api_url = f"{self.host}/ipa/json"
            response = self.session.post(
                api_url,
                json={"method": "ping", "params": [[], {}]},
                headers={'Content-Type': 'application/json'}
            )
            return response.json() if response.status_code == 200 else {}
    
    def group_find(self, criteria: str = "", **options) -> Dict:
        """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø"""
        return self._api_call("group_find", [criteria], options)
    
    def group_add(self, group_name: str, **options) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
        return self._api_call("group_add", [group_name], options)
    
    def group_show(self, group_name: str, **options) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
        return self._api_call("group_show", [group_name], options)
    
    def group_add_member(self, group_name: str, user: str = None, **options) -> Dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É"""
        params = [group_name]
        if user:
            options.setdefault('user', []).append(user)
        return self._api_call("group_add_member", params, options)
    
    def group_remove_member(self, group_name: str, user: str = None, **options) -> Dict:
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        params = [group_name]
        if user:
            options.setdefault('user', []).append(user)
        return self._api_call("group_remove_member", params, options)
    
    def user_find(self, criteria: str = "", **options) -> Dict:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self._api_call("user_find", [criteria], options)
    
    def user_show(self, user_name: str, **options) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return self._api_call("user_show", [user_name], options)
    
    def user_add(self, user_name: str, **options) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self._api_call("user_add", [user_name], options)
    
    def user_mod(self, user_name: str, **options) -> Dict:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self._api_call("user_mod", [user_name], options)
    
    def user_del(self, user_name: str, **options) -> Dict:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self._api_call("user_del", [user_name], options)
    
    def group_del(self, group_name: str, **options) -> Dict:
        """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
        return self._api_call("group_del", [group_name], options)
    
    def login_kerberos(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Kerberos –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("‚ö†Ô∏è Kerberos –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ stub —Ä–µ–∂–∏–º–µ")
        return False


class FreeIPAErrorStub(Exception):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è FreeIPAError"""
    pass


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ç–µ–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏, —á—Ç–æ –∏ python-freeipa
Client = FreeIPAClientStub
FreeIPAError = FreeIPAErrorStub


def test_connection(host: str, user: str = None, password: str = None) -> bool:
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FreeIPA —Å–µ—Ä–≤–µ—Ä—É"""
    try:
        client = FreeIPAClientStub(host, verify_ssl=False)
        
        if user and password:
            return client.login(user, password)
        else:
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            client.ping()
            return True
            
    except Exception:
        return False
