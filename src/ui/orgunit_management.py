# -*- coding: utf-8 -*-
"""
–û–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import tkinter as tk
from tkinter import messagebox, scrolledtext, ttk
from typing import Any, Optional, List, Dict

from .ui_components import ModernColors, center_window
from ..api.users_api import get_user_list
from ..api.orgunits_api import (
    list_orgunits, 
    format_orgunits_for_combobox, 
    get_orgunit_path_from_display_name,
    get_user_orgunit,
    get_display_name_for_orgunit_path,
    move_user_to_orgunit,
    create_orgunit
)


class OrgUnitManagementWindow(tk.Toplevel):
    """
    –û–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    
    def __init__(self, master, service: Any):
        super().__init__(master)
        self.title('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏')
        self.geometry('1000x700')
        self.resizable(True, True)
        self.service = service
        self.configure(bg='SystemButtonFace')
        self.transient(master)
        if master:
            center_window(self, master)

        # –î–∞–Ω–Ω—ã–µ
        self.orgunits = []
        self.orgunit_display_names = []
        self.users = []
        self.filtered_users = []
        
        self._load_data()
        self._create_widgets()

    def _load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ OU –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º OU
            self.orgunits = list_orgunits(self.service)
            self.orgunit_display_names = format_orgunits_for_combobox(self.orgunits)
            if not self.orgunit_display_names:
                self.orgunit_display_names = ["üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.users = get_user_list(self.service)
            self.filtered_users = self.users.copy()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –æ–∫–Ω–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
        main_frame = tk.Frame(self, bg='SystemButtonFace')
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∏–ª—å—Ç—Ä –ø–æ OU
        self._create_filter_panel(main_frame)
        
        # –°—Ä–µ–¥–Ω—è—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._create_users_panel(main_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ–ø–µ—Ä–∞—Ü–∏–∏
        self._create_operations_panel(main_frame)

    def _create_filter_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ OU"""
        filter_frame = tk.Frame(parent, bg='SystemButtonFace', relief='ridge', bd=1)
        filter_frame.pack(side='left', fill='y', padx=(0, 5))

        tk.Label(filter_frame, text='üìÅ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é', 
                bg='SystemButtonFace', font=('Arial', 11, 'bold')).pack(pady=(10, 5))
        
        # –í—ã–±–æ—Ä OU –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        tk.Label(filter_frame, text='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:', bg='SystemButtonFace', 
                font=('Arial', 10)).pack(anchor='w', padx=10)
        
        self.filter_combo = ttk.Combobox(filter_frame, width=25, font=('Arial', 10), state='readonly')
        filter_values = ["–í—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"] + self.orgunit_display_names
        self.filter_combo['values'] = filter_values
        self.filter_combo.current(0)
        self.filter_combo.pack(padx=10, pady=5)
        self.filter_combo.bind('<<ComboboxSelected>>', self._filter_users)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        tk.Button(filter_frame, text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', command=self._refresh_data,
                 font=('Arial', 10), width=20).pack(padx=10, pady=10)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = tk.Label(filter_frame, text='', bg='SystemButtonFace', 
                                   font=('Arial', 9), justify='left')
        self.stats_label.pack(padx=10, pady=10, anchor='w')
        
        self._update_stats()

    def _create_users_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_frame = tk.Frame(parent, bg='SystemButtonFace', relief='ridge', bd=1)
        users_frame.pack(side='left', fill='both', expand=True, padx=5)

        tk.Label(users_frame, text='üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 
                bg='SystemButtonFace', font=('Arial', 11, 'bold')).pack(pady=(10, 5))

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Treeview –¥–ª—è –ø–æ–∫–∞–∑–∞ OU
        self.users_tree = ttk.Treeview(users_frame, columns=('email', 'name', 'ou'), show='headings', height=25)
        self.users_tree.heading('email', text='Email')
        self.users_tree.heading('name', text='–ò–º—è')
        self.users_tree.heading('ou', text='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
        
        self.users_tree.column('email', width=200, minwidth=150)
        self.users_tree.column('name', width=150, minwidth=100)
        self.users_tree.column('ou', width=200, minwidth=150)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_scroll_y = tk.Scrollbar(users_frame, orient=tk.VERTICAL, command=self.users_tree.yview)
        users_scroll_x = tk.Scrollbar(users_frame, orient=tk.HORIZONTAL, command=self.users_tree.xview)
        self.users_tree.config(yscrollcommand=users_scroll_y.set, xscrollcommand=users_scroll_x.set)
        
        self.users_tree.pack(side='left', fill='both', expand=True)
        users_scroll_y.pack(side='right', fill='y')
        users_scroll_x.pack(side='bottom', fill='x')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._populate_users_list()

    def _create_operations_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ü–∏–π"""
        ops_frame = tk.Frame(parent, bg='SystemButtonFace', relief='ridge', bd=1)
        ops_frame.pack(side='right', fill='y', padx=(5, 0))

        tk.Label(ops_frame, text='‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏–∏', 
                bg='SystemButtonFace', font=('Arial', 11, 'bold')).pack(pady=(10, 15))

        # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ OU
        tk.Label(ops_frame, text='–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤:', bg='SystemButtonFace', 
                font=('Arial', 10)).pack(anchor='w', padx=10)
        
        self.target_combo = ttk.Combobox(ops_frame, width=25, font=('Arial', 10), state='readonly')
        self.target_combo['values'] = self.orgunit_display_names
        if self.orgunit_display_names:
            self.target_combo.current(0)
        self.target_combo.pack(padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        tk.Button(ops_frame, text='üìÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ', 
                 command=self._move_selected_user, font=('Arial', 10), 
                 width=22).pack(padx=10, pady=5)

        tk.Button(ops_frame, text='üìÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö', 
                 command=self._move_all_visible_users, font=('Arial', 10), 
                 width=22).pack(padx=10, pady=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        tk.Frame(ops_frame, height=2, bg='gray50').pack(fill='x', padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ OU
        tk.Button(ops_frame, text='‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', 
                 command=self._create_new_orgunit, font=('Arial', 10, 'bold'), 
                 width=22).pack(padx=10, pady=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        tk.Frame(ops_frame, height=2, bg='gray50').pack(fill='x', padx=10, pady=15)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        tk.Label(ops_frame, text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', bg='SystemButtonFace', 
                font=('Arial', 10, 'bold')).pack(anchor='w', padx=10)
        
        self.info_label = tk.Label(ops_frame, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', bg='SystemButtonFace', 
                                  font=('Arial', 9), justify='left', wraplength=200)
        self.info_label.pack(anchor='w', padx=10, pady=5)

        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        tk.Label(ops_frame, text='üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', bg='SystemButtonFace', 
                font=('Arial', 10, 'bold')).pack(anchor='w', padx=10, pady=(15, 5))
        
        self.result_text = scrolledtext.ScrolledText(ops_frame, width=30, height=10, 
                                                    wrap=tk.WORD, font=('Arial', 9))
        self.result_text.pack(padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        tk.Button(ops_frame, text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', command=self.destroy, 
                 font=('Arial', 10), width=22).pack(padx=10, pady=(10, 20))

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.users_tree.bind('<<TreeviewSelect>>', self._on_user_select)

    def _populate_users_list(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.users_tree.get_children():
            self.users_tree.delete(item)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        for user in self.filtered_users:
            email = user.get('primaryEmail', '')
            name = f"{user.get('name', {}).get('givenName', '')} {user.get('name', {}).get('familyName', '')}"
            
            # –ü–æ–ª—É—á–∞–µ–º OU –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_ou_path = get_user_orgunit(self.service, email)
                user_ou_display = get_display_name_for_orgunit_path(user_ou_path, self.orgunits)
            except:
                user_ou_display = "üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
            
            self.users_tree.insert('', 'end', values=(email, name, user_ou_display))

    def _filter_users(self, event=None):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É OU"""
        selected_filter = self.filter_combo.get()
        
        if selected_filter == "–í—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è":
            self.filtered_users = self.users.copy()
        else:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É OU
            filter_ou_path = get_orgunit_path_from_display_name(selected_filter, self.orgunits)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.filtered_users = []
            for user in self.users:
                try:
                    user_ou_path = get_user_orgunit(self.service, user.get('primaryEmail', ''))
                    if user_ou_path == filter_ou_path:
                        self.filtered_users.append(user)
                except:
                    continue
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        self._populate_users_list()
        self._update_stats()

    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_users = len(self.users)
        filtered_users = len(self.filtered_users)
        
        stats_text = f"üë• –í—Å–µ–≥–æ: {total_users}\nüìã –ü–æ–∫–∞–∑–∞–Ω–æ: {filtered_users}"
        self.stats_label.config(text=stats_text)

    def _on_user_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.users_tree.selection()
        if not selection:
            self.info_label.config(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            return
        
        item = self.users_tree.item(selection[0])
        values = item['values']
        
        if values:
            email, name, ou = values
            info_text = f"üìß {email}\nüë§ {name}\nüìÅ {ou}"
            self.info_label.config(text=info_text)

    def _move_selected_user(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.users_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
            return
        
        item = self.users_tree.item(selection[0])
        values = item['values']
        
        if not values:
            return
        
        email = values[0]
        target_ou_display = self.target_combo.get()
        target_ou_path = get_orgunit_path_from_display_name(target_ou_display, self.orgunits)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–º OU
        current_ou_path = get_user_orgunit(self.service, email)
        if current_ou_path == target_ou_path:
            self._add_result(f"‚ùå {email} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {target_ou_display}")
            return
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = move_user_to_orgunit(self.service, email, target_ou_path)
        
        if result['success']:
            self._add_result(f"‚úÖ {email} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {target_ou_display}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self._refresh_data()
        else:
            self._add_result(f"‚ùå {email}: {result['message']}")

    def _move_all_visible_users(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.filtered_users:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
            return
        
        target_ou_display = self.target_combo.get()
        target_ou_path = get_orgunit_path_from_display_name(target_ou_display, self.orgunits)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        count = len(self.filtered_users)
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                  f"–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ {target_ou_display}?"):
            return
        
        success_count = 0
        error_count = 0
        
        for user in self.filtered_users:
            email = user.get('primaryEmail', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–º OU
            current_ou_path = get_user_orgunit(self.service, email)
            if current_ou_path == target_ou_path:
                self._add_result(f"‚è≠Ô∏è {email} —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–º OU")
                continue
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = move_user_to_orgunit(self.service, email, target_ou_path)
            
            if result['success']:
                success_count += 1
                self._add_result(f"‚úÖ {email}")
            else:
                error_count += 1
                self._add_result(f"‚ùå {email}: {result['message']}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._add_result(f"\nüìä –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        self._refresh_data()

    def _add_result(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.result_text.insert(tk.END, message + "\n")
        self.result_text.see(tk.END)

    def _refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        self._add_result("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        self._load_data()
        self._filter_users()
        self._add_result("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def _create_new_orgunit(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"""
        CreateOrgUnitDialog(self, self.service, self._on_orgunit_created)

    def _on_orgunit_created(self):
        """Callback –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ OU"""
        self._refresh_data()
        self._add_result("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")


class CreateOrgUnitDialog(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
    
    def __init__(self, parent, service, on_created_callback=None):
        super().__init__(parent)
        self.title('–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
        self.geometry('500x400')
        self.resizable(False, False)
        self.service = service
        self.on_created_callback = on_created_callback
        self.configure(bg='SystemButtonFace')
        self.transient(parent)
        self.grab_set()  # –î–µ–ª–∞–µ–º –¥–∏–∞–ª–æ–≥ –º–æ–¥–∞–ª—å–Ω—ã–º
        
        if parent:
            center_window(self, parent)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ OU –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ
        self.orgunits = []
        self.orgunit_display_names = []
        self._load_orgunits()
        
        self._create_widgets()

    def _load_orgunits(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
        try:
            self.orgunits = list_orgunits(self.service)
            self.orgunit_display_names = format_orgunits_for_combobox(self.orgunits)
            if not self.orgunit_display_names:
                self.orgunit_display_names = ["üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OU: {e}")
            self.orgunit_display_names = ["üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –¥–∏–∞–ª–æ–≥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self, text='‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è', 
                              bg='SystemButtonFace', font=('Arial', 14, 'bold'))
        title_label.pack(pady=20)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
        form_frame = tk.Frame(self, bg='SystemButtonFace')
        form_frame.pack(fill='both', expand=True, padx=30, pady=10)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        tk.Label(form_frame, text='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:', bg='SystemButtonFace', 
                font=('Arial', 11)).grid(row=0, column=0, sticky='e', padx=10, pady=10)
        self.name_entry = tk.Entry(form_frame, width=30, font=('Arial', 11))
        self.name_entry.grid(row=0, column=1, padx=10, pady=10)
        self.name_entry.focus()

        # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        tk.Label(form_frame, text='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:', bg='SystemButtonFace', 
                font=('Arial', 11)).grid(row=1, column=0, sticky='e', padx=10, pady=10)
        self.parent_combo = ttk.Combobox(form_frame, width=27, font=('Arial', 11), state='readonly')
        self.parent_combo['values'] = self.orgunit_display_names
        if self.orgunit_display_names:
            self.parent_combo.current(0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ä–Ω–µ–≤–æ–µ
        self.parent_combo.grid(row=1, column=1, padx=10, pady=10)

        # –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        tk.Label(form_frame, text='–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):', bg='SystemButtonFace', 
                font=('Arial', 11)).grid(row=2, column=0, sticky='ne', padx=10, pady=10)
        self.description_text = scrolledtext.ScrolledText(form_frame, width=25, height=4, 
                                                         wrap=tk.WORD, font=('Arial', 10))
        self.description_text.grid(row=2, column=1, padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(self, bg='SystemButtonFace')
        buttons_frame.pack(fill='x', padx=30, pady=20)

        tk.Button(buttons_frame, text='‚úÖ –°–æ–∑–¥–∞—Ç—å', command=self._create_orgunit,
                 font=('Arial', 11, 'bold'), width=15).pack(side='left', padx=10)
        
        tk.Button(buttons_frame, text='‚ùå –û—Ç–º–µ–Ω–∞', command=self.destroy,
                 font=('Arial', 11), width=15).pack(side='right', padx=10)

        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_label = tk.Label(self, text='', bg='SystemButtonFace', 
                                    font=('Arial', 10), wraplength=400, justify='center')
        self.result_label.pack(pady=10)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ —Å–æ–∑–¥–∞–Ω–∏—é
        self.bind('<Return>', lambda e: self._create_orgunit())

    def _create_orgunit(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"""
        name = self.name_entry.get().strip()
        description = self.description_text.get(1.0, tk.END).strip()
        parent_display = self.parent_combo.get()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not name:
            self.result_label.config(text='‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è', fg='red')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invalid_chars = ['/', '\\', '<', '>', ':', '"', '|', '?', '*']
        if any(char in name for char in invalid_chars):
            self.result_label.config(text='‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã', fg='red')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É OU
        parent_ou_path = get_orgunit_path_from_display_name(parent_display, self.orgunits)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        self.result_label.config(text='‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è...', fg='blue')
        self.update()
        
        result = create_orgunit(self.service, name, parent_ou_path, description)
        
        if result['success']:
            self.result_label.config(text=f'‚úÖ {result["message"]}', fg='green')
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.on_created_callback:
                self.after(1000, self.on_created_callback)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            self.after(2000, self.destroy)
        else:
            self.result_label.config(text=f'‚ùå {result["message"]}', fg='red')
