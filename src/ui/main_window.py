# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Admin Team Tools.
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
"""

import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog
import csv
from datetime import datetime
from typing import Any, Optional

from .ui_components import ModernColors, ModernButton, StatusIndicator, center_window
from .components import StatisticsPanel, ActivityLog, MainToolbar
from .user_windows import CreateUserWindow, EditUserWindow
from .employee_list_window import EmployeeListWindow
from .additional_windows import AsanaInviteWindow, ErrorLogWindow
from .group_management import GroupManagementWindow
from ..api.users_api import get_user_list
from ..api.groups_api import list_groups
from ..utils.data_cache import data_cache
from ..utils.simple_utils import async_manager, error_handler, SimpleProgressDialog, show_api_error
from ..utils.ui_decorators import handle_service_errors, handle_ui_errors, log_operation, validate_email, measure_performance


class AdminToolsMainWindow(tk.Tk):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Admin Team Tools.
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
    """
    
    def __init__(self, service=None):
        super().__init__()
        self.service = service
        self._ui_initialized = False
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
        self.statistics_panel = None
        self.activity_log = None
        self.toolbar = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.title('Admin Team Tools v2.0 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Google Workspace')
        self.geometry('750x500')
        self.configure(bg=ModernColors.BACKGROUND)
        self.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self.after(1000, self._delayed_init)
        
        # –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.check_service_status()

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.create_main_area()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.create_status_bar()

    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = tk.Frame(self, bg=ModernColors.PRIMARY, height=60)
        header_frame.pack(fill='x', padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            header_frame, 
            text='Admin Team Tools',
            font=('Arial', 16, 'bold'),
            bg=ModernColors.PRIMARY,
            fg='white'
        )
        title_label.pack(side='left', padx=15, pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        refresh_btn = ModernButton(
            header_frame, 
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            command=self.refresh_data,
            style='secondary',
            font=('Arial', 9)
        )
        refresh_btn.pack(side='right', padx=15, pady=15)

    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar_callbacks = {
            'employee_list': self.open_employee_list,
            'create_user': self.open_create_user,
            'edit_user': self.open_edit_user,
            'groups': self.open_group_management,
            'asana': self.open_asana_invite
        }
        
        self.toolbar = MainToolbar(self, toolbar_callbacks)

    def create_main_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏"""
        main_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        main_frame.pack(fill='both', expand=True, padx=15, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        quick_actions_callbacks = {
            'export': self.export_users,
            'error_log': self.open_error_log
        }
        
        self.statistics_panel = StatisticsPanel(
            main_frame, 
            self.service, 
            quick_actions_callbacks
        )
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_log = ActivityLog(main_frame)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        self.after(2000, self.load_statistics_async)

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_frame = tk.Frame(self, bg=ModernColors.SECONDARY, height=25)
        self.status_frame.pack(side='bottom', fill='x')
        self.status_frame.pack_propagate(False)
        
        self.status_indicator = StatusIndicator(self.status_frame)
        self.status_indicator.pack(side='left', padx=8, pady=3)
        
        self.status_label = tk.Label(
            self.status_frame,
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            font=('Arial', 8),
            bg=ModernColors.SECONDARY,
            fg=ModernColors.TEXT_PRIMARY
        )
        self.status_label.pack(side='left', pady=3)

    def check_service_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API"""
        if self.service:
            self.status_indicator.set_status('online')
            self.status_label.config(text='–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Google Workspace API')
            self.log_activity('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Workspace API')
        else:
            self.status_indicator.set_status('offline')
            self.status_label.config(text='–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            self.log_activity('–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API', 'ERROR')

    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø"""
        if not self.service or not self.statistics_panel:
            return
            
        try:
            users_count, groups_count = self.statistics_panel.load_statistics()
            self.log_activity(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {groups_count} –≥—Ä—É–ø–ø')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}', 'ERROR')

    def log_activity(self, message: str, level: str = 'INFO'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if self.activity_log:
            self.activity_log.add_entry(message, level)

    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if self.activity_log:
            self.activity_log.clear_log()

    @handle_ui_errors("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", show_success=True)
    def refresh_data(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        self.status_label.config(text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
        data_cache.clear_cache()
        
        if self.statistics_panel:
            self.statistics_panel.refresh()
            
        self.status_label.config(text='–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        return "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    @handle_service_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    def open_employee_list(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        window = EmployeeListWindow(self, self.service)

    @handle_service_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    def open_create_user(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        window = CreateUserWindow(self, self.service)

    @handle_service_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @validate_email
    def open_edit_user(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_email = simpledialog.askstring(
            '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            '–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'
        )
        
        if user_email:
            window = EditUserWindow(self, self.service, user_email)
            return f"–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_email}"

    @handle_service_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏")
    def open_group_management(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
        window = GroupManagementWindow(self, self.service)

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ Asana")
    def open_asana_invite(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ Asana"""
        window = AsanaInviteWindow(self)

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫")
    def open_error_log(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫"""
        window = ErrorLogWindow(self)

    @handle_service_errors("—ç–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", True)
    @measure_performance
    def export_users(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = filedialog.asksaveasfilename(
            defaultextension='.csv',
            filetypes=[('CSV files', '*.csv'), ('All files', '*.*')],
            title='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        )
        
        if filename:
            users = get_user_list(self.service)
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['Email', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–°—Ç–∞—Ç—É—Å'])
                
                for user in users:
                    name = user.get('name', {})
                    org_info = user.get('organizations', [{}])[0] if user.get('organizations') else {}
                    
                    writer.writerow([
                        user.get('primaryEmail', ''),
                        name.get('givenName', ''),
                        name.get('familyName', ''),
                        org_info.get('title', ''),
                        '–ê–∫—Ç–∏–≤–µ–Ω' if not user.get('suspended', False) else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                    ])
            
            messagebox.showinfo('–£—Å–ø–µ—Ö', f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}')
            return f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}"

    def load_statistics_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self._ui_initialized or not self.statistics_panel:
            # –ï—Å–ª–∏ UI –Ω–µ –≥–æ—Ç–æ–≤, –æ—Ç–ª–æ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫—É
            self.after(500, self.load_statistics_async)
            return
            
        def load_data():
            if not self.service:
                return None, None
            
            users = get_user_list(self.service)
            groups = list_groups(self.service)
            return users, groups
        
        def on_success(result):
            if not self.statistics_panel:
                return
                
            users, groups = result
            if users is not None and groups is not None:
                users_count = len(users)
                groups_count = len(groups)
                self.statistics_panel.update_statistics(users_count, groups_count)
                self.log_activity(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {groups_count} –≥—Ä—É–ø–ø')
        
        def on_error(error):
            if hasattr(self, 'log_activity'):
                self.log_activity(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(error)}', 'ERROR')
            show_api_error(self, error, "–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        if hasattr(self, 'status_label'):
            self.status_label.config(text='–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
        
        async_manager.run_async(load_data, on_success, on_error)

    @log_operation("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ", "SUCCESS")
    def _delayed_init(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI"""
        self._ui_initialized = True
