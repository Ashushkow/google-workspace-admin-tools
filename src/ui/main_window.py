# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Admin Team Tools.
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
"""

import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog
import csv
import logging
from datetime import datetime
from typing import Any, Optional, List, Dict

from .ui_components import ModernColors, ModernButton, StatusIndicator, center_window
from .components import StatisticsPanel, ActivityLog, MainToolbar, ThemeSwitcher
from .user_windows import CreateUserWindow, EditUserWindow
from .employee_list_window import EmployeeListWindow
from .additional_windows import AsanaInviteWindow, ErrorLogWindow
from .group_management import GroupManagementWindow
from .calendar_management import open_calendar_management
from .sputnik_calendar_ui import open_sputnik_calendar_window
from ..api.users_api import get_user_list
from ..api.service_adapter import ServiceAdapter
from ..api.groups_api import list_groups
from ..utils.data_cache import data_cache
from ..utils.simple_utils import async_manager, error_handler, SimpleProgressDialog, show_api_error
from ..utils.ui_decorators import handle_service_errors, handle_ui_errors, log_operation, validate_email, measure_performance
from ..themes.theme_manager import theme_manager
from ..hotkeys.hotkey_manager import HotkeyManager


class AdminToolsMainWindow(tk.Tk):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Admin Team Tools.
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
    """
    
    def __init__(self, service=None):
        super().__init__()
        self.service = service
        self._ui_initialized = False
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
        self.statistics_panel = None
        self.activity_log = None
        self.toolbar = None
        self.theme_switcher = None
        self.status_indicator = None
        self.status_label = None
        self.header_frame = None
        self.title_label = None
        self.status_frame = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.hotkey_manager = HotkeyManager(self)
        self._setup_hotkeys()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.title('Admin Team Tools v2.0.5 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Google Workspace')
        self.geometry('750x500')
        self.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –°–æ–∑–¥–∞–µ–º UI
        self.setup_ui()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.apply_theme()
        self._load_theme_preferences()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        theme_manager.add_theme_change_callback(self.on_theme_changed)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.protocol("WM_DELETE_WINDOW", self.quit_application)
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.after(1000, self._delayed_init)

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.create_menu()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.create_header()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.create_main_area()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.create_status_bar()

    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.header_frame = tk.Frame(self, height=60)
        self.header_frame.pack(fill='x', padx=0, pady=0)
        self.header_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = tk.Label(
            self.header_frame, 
            text='Admin Team Tools',
            font=('Arial', 16, 'bold'),
            fg='white'
        )
        self.title_label.pack(side='left', padx=15, pady=15)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º
        self.theme_switcher = ThemeSwitcher(self.header_frame)
        self.theme_switcher.pack(side='right', padx=(10, 5), pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.refresh_btn = ModernButton(
            self.header_frame, 
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            command=self.refresh_data,
            style='secondary',
            font=('Arial', 9)
        )
        self.refresh_btn.pack(side='right', padx=(5, 10), pady=15)

    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        menubar = tk.Menu(self)
        self.config(menu=menubar)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(
            label="–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            command=self.export_users,
            accelerator="Ctrl+E"
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="–í—ã—Ö–æ–¥",
            command=self.quit_application,
            accelerator="Ctrl+Q"
        )
        
        # –ú–µ–Ω—é "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        users_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", menu=users_menu)
        users_menu.add_command(
            label="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            command=self.open_employee_list,
            accelerator="Ctrl+U"
        )
        users_menu.add_command(
            label="–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            command=self.open_create_user,
            accelerator="Ctrl+N"
        )
        users_menu.add_command(
            label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            command=self.open_edit_user,
            accelerator="Ctrl+Enter"
        )
        
        # –ú–µ–Ω—é "–ì—Ä—É–ø–ø—ã"
        groups_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ì—Ä—É–ø–ø—ã", menu=groups_menu)
        groups_menu.add_command(
            label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏",
            command=self.open_group_management,
            accelerator="Ctrl+G"
        )
        
        # –ú–µ–Ω—é "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏"
        calendars_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ö–∞–ª–µ–Ω–¥–∞—Ä–∏", menu=calendars_menu)
        calendars_menu.add_command(
            label="üéØ –ö–∞–ª–µ–Ω–¥–∞—Ä—å SPUTNIK (–æ–±—â–∏–π)",
            command=self.open_sputnik_calendar,
            accelerator="Ctrl+Shift+S"
        )
        calendars_menu.add_separator()
        calendars_menu.add_command(
            label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏",
            command=self.open_calendar_management,
            accelerator="Ctrl+Shift+C"
        )
        
        # –ú–µ–Ω—é "–î–æ–∫—É–º–µ–Ω—Ç—ã"
        documents_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–î–æ–∫—É–º–µ–Ω—Ç—ã", menu=documents_menu)
        documents_menu.add_command(
            label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
            command=self.open_document_management,
            accelerator="Ctrl+D"
        )
        
        # –ú–µ–Ω—é "–í–∏–¥"
        view_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–í–∏–¥", menu=view_menu)
        
        # –ü–æ–¥–º–µ–Ω—é —Ç–µ–º
        theme_menu = tk.Menu(view_menu, tearoff=0)
        view_menu.add_cascade(label="–¢–µ–º–∞", menu=theme_menu)
        theme_menu.add_command(
            label="–°–≤–µ—Ç–ª–∞—è",
            command=lambda: theme_manager.set_theme('light'),
            accelerator="Ctrl+1"
        )
        theme_menu.add_command(
            label="–¢—ë–º–Ω–∞—è",
            command=lambda: theme_manager.set_theme('dark'),
            accelerator="Ctrl+2"
        )
        theme_menu.add_command(
            label="–°–∏–Ω—è—è",
            command=lambda: theme_manager.set_theme('blue'),
            accelerator="Ctrl+3"
        )
        
        view_menu.add_separator()
        view_menu.add_command(
            label="–û–±–Ω–æ–≤–∏—Ç—å",
            command=self.refresh_data,
            accelerator="Ctrl+R"
        )
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(
            label="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏",
            command=self.hotkey_manager.show_help_dialog,
            accelerator="F1"
        )
        help_menu.add_command(
            label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            command=self.show_about,
            accelerator="Ctrl+F1"
        )

    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar_callbacks = {
            'employee_list': self.open_employee_list,
            'create_user': self.open_create_user,
            'edit_user': self.open_edit_user,
            'groups': self.open_group_management,
            'sputnik_calendar': self.open_sputnik_calendar,
            'calendars': self.open_calendar_management,
            'documents': self.open_document_management,
            'asana': self.open_asana_invite
        }
        
        self.toolbar = MainToolbar(self, toolbar_callbacks)

    def create_main_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏"""
        main_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        main_frame.pack(fill='both', expand=True, padx=15, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        quick_actions_callbacks = {
            'export': self.export_users,
            'error_log': self.open_error_log
        }
        
        self.statistics_panel = StatisticsPanel(
            main_frame, 
            self.service, 
            quick_actions_callbacks
        )
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_log = ActivityLog(main_frame)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        self.after(2000, self.load_statistics_async)

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_frame = tk.Frame(self, bg=ModernColors.SECONDARY, height=25)
        self.status_frame.pack(side='bottom', fill='x')
        self.status_frame.pack_propagate(False)
        
        self.status_indicator = StatusIndicator(self.status_frame)
        self.status_indicator.pack(side='left', padx=8, pady=3)
        
        self.status_label = tk.Label(
            self.status_frame,
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            font=('Arial', 8),
            bg=ModernColors.SECONDARY,
            fg=ModernColors.TEXT_PRIMARY
        )
        self.status_label.pack(side='left', pady=3)

    def check_service_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not self._ui_initialized or not hasattr(self, 'status_indicator') or not self.status_indicator:
            return
            
        if self.service:
            self.status_indicator.set_status('online')
            self.status_label.config(text='–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Google Workspace API')
            self.log_activity('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Workspace API')
        else:
            self.status_indicator.set_status('offline')
            self.status_label.config(text='–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            self.log_activity('–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API', 'ERROR')

    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø"""
        if not self._ui_initialized or not self.service or not self.statistics_panel:
            return
            
        try:
            users_count, groups_count = self.statistics_panel.load_statistics()
            self.log_activity(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {groups_count} –≥—Ä—É–ø–ø')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}', 'ERROR')

    def log_activity(self, message: str, level: str = 'INFO'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if self._ui_initialized and self.activity_log:
            self.activity_log.add_entry(message, level)

    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if self.activity_log:
            self.activity_log.clear_log()

    @handle_ui_errors("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", show_success=True)
    def refresh_data(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        self.status_label.config(text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
        data_cache.clear_cache()
        
        if self.statistics_panel:
            self.statistics_panel.refresh()
            
        self.status_label.config(text='–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        return "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

    def _setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.hotkey_manager.register_callback('refresh', self.refresh_data)
        self.hotkey_manager.register_callback('export', self.export_users)
        self.hotkey_manager.register_callback('settings', self.show_settings)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.hotkey_manager.register_callback('new_user', self.open_create_user)
        self.hotkey_manager.register_callback('user_list', self.open_employee_list)
        self.hotkey_manager.register_callback('edit_user', self.open_edit_user)
        
        # –ì—Ä—É–ø–ø—ã
        self.hotkey_manager.register_callback('groups', self.open_group_management)
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä–∏
        self.hotkey_manager.register_callback('sputnik_calendar', self.open_sputnik_calendar)
        self.hotkey_manager.register_callback('calendars', self.open_calendar_management)
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        self.hotkey_manager.register_callback('documents', self.open_document_management)
        
        # –¢–µ–º—ã
        self.hotkey_manager.register_callback('theme_light', lambda: theme_manager.set_theme('light'))
        self.hotkey_manager.register_callback('theme_dark', lambda: theme_manager.set_theme('dark'))
        self.hotkey_manager.register_callback('theme_blue', lambda: theme_manager.set_theme('blue'))
        
        # –°–ª—É–∂–µ–±–Ω—ã–µ
        self.hotkey_manager.register_callback('help', self.show_help)
        self.hotkey_manager.register_callback('about', self.show_about)
        self.hotkey_manager.register_callback('quit', self.quit_application)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    @handle_service_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    def open_employee_list(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        window = EmployeeListWindow(self, self.service)

    @handle_service_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    def open_create_user(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        window = CreateUserWindow(self, self.service)

    @handle_service_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @validate_email
    def open_edit_user(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_email = simpledialog.askstring(
            '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            '–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'
        )
        
        if user_email:
            window = EditUserWindow(self, self.service, user_email)
            return f"–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_email}"

    @handle_service_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏")
    def open_group_management(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
        window = GroupManagementWindow(self, self.service)

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏")
    def open_calendar_management(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏"""
        window = open_calendar_management(self, self.service)

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è SPUT–ùIK")
    def open_sputnik_calendar(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º SPUT–ùIK (–æ–±—â–∏–π)"""
        window = open_sputnik_calendar_window(self)
        if window:
            self.activity_log.add_entry("üéØ –û—Ç–∫—Ä—ã—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å SPUT–ùIK (–æ–±—â–∏–π)")
        return window

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
    def open_document_management(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not self.service:
                messagebox.showerror("–û—à–∏–±–∫–∞", "Google API —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
            google_client = None
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ user_service
            if hasattr(self.service, 'user_service') and self.service.user_service:
                user_repo = self.service.user_service.user_repo
                if hasattr(user_repo, 'client'):
                    google_client = user_repo.client
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ service adapter
            if not google_client and hasattr(self.service, 'user_repository'):
                if hasattr(self.service.user_repository, 'client'):
                    google_client = self.service.user_repository.client
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            if not google_client:
                from src.api.google_api_client import GoogleAPIClient
                from src.config.enhanced_config import config
                google_client = GoogleAPIClient(config.settings.google_application_credentials)
                if not google_client.initialize():
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google API –∫–ª–∏–µ–Ω—Ç")
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º credentials
            credentials = google_client.get_credentials()
            if not credentials:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google API")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π DocumentService)
            from src.services.document_service import DocumentService
            
            document_service = DocumentService(credentials)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º URL
            default_url = "https://docs.google.com/document/d/1iXos0bTHv3nwXcYvAjPSIYzQOflcygwjj4LKD5Rftdk/edit#heading=h.mfzrrwzcspx2"
            window = open_document_management(self, document_service, default_url)
            if window:
                self.activity_log.add_entry("üìÑ –û—Ç–∫—Ä—ã—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
            return window
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏: {e}")

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ Asana")
    def open_asana_invite(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ Asana"""
        window = AsanaInviteWindow(self)

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫")
    def open_error_log(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫"""
        window = ErrorLogWindow(self)

    @handle_service_errors("—ç–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", True)
    @measure_performance
    def export_users(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = filedialog.asksaveasfilename(
            defaultextension='.csv',
            filetypes=[('CSV files', '*.csv'), ('All files', '*.*')],
            title='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        )
        
        if filename:
            users = get_user_list(self.service)
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['Email', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–°—Ç–∞—Ç—É—Å'])
                
                for user in users:
                    name = user.get('name', {})
                    org_info = user.get('organizations', [{}])[0] if user.get('organizations') else {}
                    
                    writer.writerow([
                        user.get('primaryEmail', ''),
                        name.get('givenName', ''),
                        name.get('familyName', ''),
                        org_info.get('title', ''),
                        '–ê–∫—Ç–∏–≤–µ–Ω' if not user.get('suspended', False) else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                    ])
            
            messagebox.showinfo('–£—Å–ø–µ—Ö', f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}')
            return f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}"

    def load_statistics_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self._ui_initialized or not self.statistics_panel:
            # –ï—Å–ª–∏ UI –Ω–µ –≥–æ—Ç–æ–≤, –æ—Ç–ª–æ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫—É
            self.after(500, self.load_statistics_async)
            return
            
        def load_data():
            if not self.service:
                return None, None
            
            users = get_user_list(self.service)
            groups = list_groups(self.service)
            return users, groups
        
        def on_success(result):
            if not self.statistics_panel:
                return
                
            users, groups = result
            if users is not None and groups is not None:
                users_count = len(users)
                groups_count = len(groups)
                self.statistics_panel.update_statistics(users_count, groups_count)
                self.log_activity(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {groups_count} –≥—Ä—É–ø–ø')
        
        def on_error(error):
            if hasattr(self, 'log_activity'):
                self.log_activity(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(error)}', 'ERROR')
            show_api_error(self, error, "–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        if hasattr(self, 'status_label'):
            self.status_label.config(text='–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
        
        async_manager.run_async(load_data, on_success, on_error)

    @log_operation("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ", "SUCCESS")
    def _delayed_init(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI"""
        self._ui_initialized = True
        
        # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ UI —Å–æ–∑–¥–∞–Ω, –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        self.check_service_status()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.load_statistics()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        if not theme_manager.current_theme:
            return
            
        theme = theme_manager.current_theme
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–∫–Ω—É
        self.config(bg=theme.get_color('background'))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º (–µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã)
        if hasattr(self, 'header_frame'):
            self.header_frame.config(bg=theme.get_color('accent'))
            
        if hasattr(self, 'title_label'):
            self.title_label.config(
                bg=theme.get_color('accent'),
                fg=theme.get_color('text_accent')
            )
            
        if hasattr(self, 'status_frame'):
            self.status_frame.config(bg=theme.get_color('secondary'))
            
        if hasattr(self, 'status_label'):
            self.status_label.config(
                bg=theme.get_color('secondary'),
                fg=theme.get_color('text_primary')
            )
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if hasattr(self, 'statistics_panel') and self.statistics_panel:
            self.statistics_panel.apply_theme()
            
        if hasattr(self, 'activity_log') and self.activity_log:
            self.activity_log.apply_theme()
            
        if hasattr(self, 'toolbar') and self.toolbar:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ apply_theme —É toolbar
            if hasattr(self.toolbar, 'apply_theme'):
                self.toolbar.apply_theme()

    def on_theme_changed(self, theme):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã"""
        self.apply_theme()
        self.log_activity(f'–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {theme.name}', 'INFO')

    def _load_theme_preferences(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã"""
        import os
        config_path = os.path.join(os.path.expanduser('~'), '.admin_tools_config.json')
        theme_manager.load_theme_preference(config_path)

    def _save_theme_preferences(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã"""
        import os
        config_path = os.path.join(os.path.expanduser('~'), '.admin_tools_config.json')
        theme_manager.save_theme_preference(config_path)

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.load_statistics()
        self.log_activity('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'INFO')

    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        messagebox.showinfo('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ –ú–µ–Ω—é "–í–∏–¥" ‚Üí "–¢–µ–º–∞" –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã\n‚Ä¢ F1 –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º')

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        self.hotkey_manager.show_help_dialog()

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """Admin Team Tools v2.0.5

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Google Workspace.

üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–º (—Å–≤–µ—Ç–ª–∞—è, —Ç—ë–º–Ω–∞—è, —Å–∏–Ω—è—è)
‚Ä¢ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
‚Ä¢ F1 - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª–∞–≤–∏—à–∞–º
‚Ä¢ Ctrl+U - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ Ctrl+G - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
‚Ä¢ Ctrl+E - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Ctrl+1/2/3 - —Å–º–µ–Ω–∞ —Ç–µ–º—ã

¬© 2024 Admin Team Tools"""
        messagebox.showinfo('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', about_text)

    def quit_application(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self._save_theme_preferences()
        self.destroy()

def open_document_management(parent, document_service, default_url=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)"""
    from src.ui.document_management import DocumentManagementWindow
    return DocumentManagementWindow(parent, document_service, default_url)
