# -*- coding: utf-8 -*-
"""
–û–∫–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
"""

import tkinter as tk
from tkinter import messagebox, scrolledtext, ttk
import string
import random
from typing import Any, Optional

from .ui_components import ModernColors, center_window
from ..api.users_api import create_user, update_user as api_update_user, delete_user, get_user_list
from ..api.orgunits_api import (
    list_orgunits, 
    format_orgunits_for_combobox, 
    get_orgunit_path_from_display_name,
    get_user_orgunit,
    get_display_name_for_orgunit_path,
    move_user_to_orgunit
)


class CreateUserWindow(tk.Toplevel):
    """
    –û–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Google Workspace.
    """
    
    def __init__(self, master, service: Any, on_created: Optional[callable] = None):
        super().__init__(master)
        self.title('–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        self.geometry('700x600')  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.resizable(False, False)
        self.service = service
        self.on_created = on_created
        self.transient(master)
        if master:
            center_window(self, master)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ OU
        self.orgunits = []
        self.orgunit_display_names = []
        self._load_orgunits()

        self._create_widgets()
        self._bind_events()

    def _load_orgunits(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
        try:
            self.orgunits = list_orgunits(self.service)
            self.orgunit_display_names = format_orgunits_for_combobox(self.orgunits)
            if not self.orgunit_display_names:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å OU, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–µ
                self.orgunit_display_names = ["/ (Root Organization)"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OU: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            self.orgunit_display_names = ["/ (Root Organization)"]

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –æ–∫–Ω–∞"""
        # First Name
        tk.Label(self, text='First Name:', font=('Arial', 11)).grid(
            row=0, column=0, sticky='e', padx=16, pady=12)
        self.entry_first = tk.Entry(self, width=50, font=('Arial', 11))
        self.entry_first.grid(row=0, column=1, padx=8)
        self._add_validation(self.entry_first, 32)

        # Last Name
        tk.Label(self, text='Last Name:', font=('Arial', 11)).grid(
            row=1, column=0, sticky='e', padx=16, pady=8)
        self.entry_last = tk.Entry(self, width=50, font=('Arial', 11))
        self.entry_last.grid(row=1, column=1, padx=8)
        self._add_validation(self.entry_last, 32)

        # Email (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        email_frame = tk.Frame(self)
        email_frame.grid(row=2, column=0, columnspan=2, sticky='w', padx=16, pady=8)
        
        tk.Label(email_frame, text='Email (–±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω):', font=('Arial', 11)).grid(
            row=0, column=0, sticky='e')
        self.entry_email = tk.Entry(email_frame, width=50, font=('Arial', 11), state='readonly')
        self.entry_email.grid(row=0, column=1, padx=8)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è primary email
        tk.Label(email_frame, text='üìß –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–æ–º–µ–Ω–µ @sputnik8.com', 
                 font=('Arial', 9), fg='#666666').grid(row=1, column=1, sticky='w', padx=8)

        # Secondary Email
        secondary_frame = tk.Frame(self)
        secondary_frame.grid(row=3, column=0, columnspan=2, sticky='w', padx=16, pady=8)
        
        tk.Label(secondary_frame, text='Secondary Email:', font=('Arial', 11)).grid(
            row=0, column=0, sticky='e')
        self.entry_secondary = tk.Entry(secondary_frame, width=50, font=('Arial', 11))
        self.entry_secondary.grid(row=0, column=1, padx=8)
        self._add_validation(self.entry_secondary, 64)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è secondary email
        tk.Label(secondary_frame, text='üí° –ú–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π –¥–æ–º–µ–Ω (Gmail, Yahoo –∏ —Ç.–¥.) –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', 
                 font=('Arial', 9), fg='#666666').grid(row=1, column=1, sticky='w', padx=8)

        # Phone Number
        tk.Label(self, text='Phone Number:', font=('Arial', 11)).grid(
            row=6, column=0, sticky='e', padx=16, pady=8)
        self.entry_phone = tk.Entry(self, width=50, font=('Arial', 11))
        self.entry_phone.grid(row=6, column=1, padx=8)
        self._add_validation(self.entry_phone, 20)

        # Organizational Unit
        tk.Label(self, text='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (OU):', font=('Arial', 11)).grid(
            row=7, column=0, sticky='e', padx=16, pady=8)
        self.combo_orgunit = ttk.Combobox(self, width=47, font=('Arial', 11), state='readonly')
        self.combo_orgunit['values'] = self.orgunit_display_names
        if self.orgunit_display_names:
            self.combo_orgunit.current(0)  # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∫–æ—Ä–Ω–µ–≤–æ–µ OU) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.combo_orgunit.grid(row=7, column=1, padx=8, sticky='w')

        # Password
        tk.Label(self, text='Password:', font=('Arial', 11)).grid(
            row=8, column=0, sticky='e', padx=16, pady=8)
        self.entry_pass = tk.Entry(self, width=36, font=('Arial', 11), show='*')
        self.entry_pass.grid(row=8, column=1, padx=8, sticky='w')
        self._add_validation(self.entry_pass, 32)

        # Generate Password Button
        self.btn_gen_pass = tk.Button(self, text='üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', 
                                     command=self.generate_password, 
                                     font=('Arial', 9), width=16)
        self.btn_gen_pass.grid(row=8, column=1, padx=8, sticky='e')

        # Create Button
        self.btn_create = tk.Button(self, text='‚ûï –°–æ–∑–¥–∞—Ç—å', command=self.create_user, 
                                   font=('Arial', 11, 'bold'), width=18)
        self.btn_create.grid(row=9, column=0, columnspan=2, pady=18)

        # Result Text Area
        self.txt_result = scrolledtext.ScrolledText(self, width=80, height=5, 
                                                   wrap=tk.WORD, font=('Arial', 10))
        self.txt_result.grid(row=10, column=0, columnspan=2, padx=16, pady=8)
        self.txt_result.config(state=tk.DISABLED)

        # Close Button
        self.btn_close = tk.Button(self, text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', command=self.destroy, 
                                  font=('Arial', 10), width=18)
        self.btn_close.grid(row=11, column=0, columnspan=2, pady=(2, 12))

    def _add_validation(self, entry: tk.Entry, maxlen: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª–∏–Ω—ã –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        vcmd = self.register(lambda P: len(P) <= maxlen)
        entry.config(validate="key", validatecommand=(vcmd, '%P'))

    def _bind_events(self):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
        self.entry_first.bind('<KeyRelease>', self.update_email)
        self.entry_last.bind('<KeyRelease>', self.update_email)

    def update_email(self, event=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç email –ø–æ —à–∞–±–ª–æ–Ω—É –∏–º—è.—Ñ–∞–º–∏–ª–∏—è@sputnik8.com"""
        first = self.entry_first.get().strip().lower().replace(' ', '')
        last = self.entry_last.get().strip().lower().replace(' ', '')
        
        if first and last:
            email = f"{first}.{last}@sputnik8.com"
        else:
            email = ""
        
        self.entry_email.config(state='normal')
        self.entry_email.delete(0, tk.END)
        self.entry_email.insert(0, email)
        self.entry_email.config(state='readonly')

    def generate_password(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π 8 —Å–∏–º–≤–æ–ª–æ–≤"""
        length = 8
        chars = string.ascii_letters + string.digits + "!@#$%^&*"
        password = ''.join(random.SystemRandom().choice(chars) for _ in range(length))
        
        self.entry_pass.delete(0, tk.END)
        self.entry_pass.insert(0, password)

    def create_user(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Google Directory API"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π
        first_name = self.entry_first.get().strip()
        last_name = self.entry_last.get().strip()
        email = self.entry_email.get().strip()
        secondary_email = self.entry_secondary.get().strip()
        phone = self.entry_phone.get().strip()
        password = self.entry_pass.get().strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ OU
        selected_ou_display = self.combo_orgunit.get()
        org_unit_path = get_orgunit_path_from_display_name(selected_ou_display, self.orgunits)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ
        for field, value in [
            ('First Name', first_name), 
            ('Last Name', last_name), 
            ('Email', email),
            ('Secondary Email', secondary_email),
            ('Phone Number', phone), 
            ('Password', password)
        ]:
            if value != value.strip():
                messagebox.showwarning('Warning', 
                    f"{field} should not start or end with a space!")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not all([first_name, last_name, email, password]):
            messagebox.showwarning('Warning', 
                '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (First Name, Last Name, Email, Password)!')
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞ primary email
        if '@' in email:
            email_domain = email.split('@')[-1].lower()
            if email_domain not in ['sputnik8.com']:
                result = messagebox.askyesno(
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–æ–º–µ–Ω',
                    f'Primary Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–æ–º–µ–Ω–µ @sputnik8.com\n\n'
                    f'–í—ã —É–∫–∞–∑–∞–ª–∏: {email}\n'
                    f'–î–æ–º–µ–Ω: {email_domain}\n\n'
                    f'–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –∫–∞–∫ Secondary Email?\n\n'
                    f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?'
                )
                if not result:
                    return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º OU
        result = create_user(
            self.service, email, first_name, last_name, password,
            secondary_email=secondary_email, phone=phone, org_unit_path=org_unit_path
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.txt_result.config(state=tk.NORMAL)
        self.txt_result.delete(1.0, tk.END)
        self.txt_result.insert(tk.END, result)
        self.txt_result.config(state=tk.DISABLED)
        
        # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        if self.on_created and "—Å–æ–∑–¥–∞–Ω" in result:
            self.on_created()


class EditUserWindow(tk.Toplevel):
    """–û–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Google Workspace"""
    
    def __init__(self, master, service: Any):
        super().__init__(master)
        self.title('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        self.geometry('800x550')  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è OU
        self.resizable(False, False)
        self.service = service
        self.configure(bg='SystemButtonFace')
        self.transient(master)
        if master:
            center_window(self, master)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ OU
        self.orgunits = []
        self.orgunit_display_names = []
        self._load_orgunits()
        
        self._load_users()
        self._create_widgets()

    def _load_orgunits(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
        try:
            self.orgunits = list_orgunits(self.service)
            self.orgunit_display_names = format_orgunits_for_combobox(self.orgunits)
            if not self.orgunit_display_names:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å OU, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–µ
                self.orgunit_display_names = ["üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OU: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            self.orgunit_display_names = ["üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]

    def _load_users(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = get_user_list(self.service)
        self.user_map = {
            f"{u['primaryEmail']} ({u['name']['fullName']})": u 
            for u in users
        }

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –æ–∫–Ω–∞"""
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        left_frame = tk.Frame(self, bg='SystemButtonFace')
        left_frame.pack(side='left', fill='y', padx=(20, 10), pady=20)
        
        tk.Label(left_frame, text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:', bg='SystemButtonFace', 
                font=('Arial', 10, 'bold')).pack(anchor='w')
        
        self.user_listbox = tk.Listbox(left_frame, width=38, height=18, font=('Arial', 10))
        self.user_listbox.pack(side='left', fill='y')
        
        user_scroll = tk.Scrollbar(left_frame, orient=tk.VERTICAL, command=self.user_listbox.yview)
        user_scroll.pack(side='left', fill='y')
        self.user_listbox.config(yscrollcommand=user_scroll.set)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for label in self.user_map:
            self.user_listbox.insert(tk.END, label)
        
        self.user_listbox.bind('<<ListboxSelect>>', self.on_user_select)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self._create_edit_form()

    def _create_edit_form(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        right_frame = tk.Frame(self, bg='SystemButtonFace')
        right_frame.pack(side='left', fill='both', expand=True, padx=10, pady=20)

        # Email (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
        tk.Label(right_frame, text='Email:', bg='SystemButtonFace', 
                font=('Arial', 10)).grid(row=0, column=0, sticky='e', pady=4)
        self.entry_email = tk.Entry(right_frame, width=35, font=('Arial', 10), state='readonly')
        self.entry_email.grid(row=0, column=1, pady=4)

        # –ù–æ–≤–æ–µ –∏–º—è
        tk.Label(right_frame, text='–ù–æ–≤–æ–µ –∏–º—è:', bg='SystemButtonFace', 
                font=('Arial', 10)).grid(row=1, column=0, sticky='e', pady=4)
        self.entry_first = tk.Entry(right_frame, width=35, font=('Arial', 10))
        self.entry_first.grid(row=1, column=1, pady=4)

        # –ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è
        tk.Label(right_frame, text='–ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è:', bg='SystemButtonFace', 
                font=('Arial', 10)).grid(row=2, column=0, sticky='e', pady=4)
        self.entry_last = tk.Entry(right_frame, width=35, font=('Arial', 10))
        self.entry_last.grid(row=2, column=1, pady=4)

        # –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        tk.Label(right_frame, text='–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):', bg='SystemButtonFace', 
                font=('Arial', 10)).grid(row=3, column=0, sticky='e', pady=4)
        self.entry_pass = tk.Entry(right_frame, width=35, font=('Arial', 10), show='*')
        self.entry_pass.grid(row=3, column=1, pady=4)

        # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (OU)
        tk.Label(right_frame, text='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (OU):', bg='SystemButtonFace', 
                font=('Arial', 10)).grid(row=4, column=0, sticky='e', pady=4)
        self.combo_orgunit = ttk.Combobox(right_frame, width=32, font=('Arial', 10), state='readonly')
        self.combo_orgunit['values'] = self.orgunit_display_names
        if self.orgunit_display_names:
            self.combo_orgunit.current(0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        self.combo_orgunit.grid(row=4, column=1, pady=4)

        # –ö–Ω–æ–ø–∫–∏
        self.btn_update = tk.Button(right_frame, text='üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', 
                                   command=self.update_user, font=('Arial', 10, 'bold'), width=22)
        self.btn_update.grid(row=5, column=0, columnspan=2, pady=12)

        self.btn_delete = tk.Button(right_frame, text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
                                   command=self.delete_user, font=('Arial', 10, 'bold'), width=22)
        self.btn_delete.grid(row=6, column=0, columnspan=2, pady=(0, 10))

        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.txt_result = scrolledtext.ScrolledText(right_frame, width=45, height=3, 
                                                   wrap=tk.WORD, font=('Arial', 9))
        self.txt_result.grid(row=7, column=0, columnspan=2, padx=5, pady=5)
        self.txt_result.config(state=tk.DISABLED)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.btn_close = tk.Button(right_frame, text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', command=self.destroy, 
                                  font=('Arial', 10, 'bold'), width=22)
        self.btn_close.grid(row=8, column=0, columnspan=2, pady=(2, 10))

    def on_user_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.user_listbox.curselection()
        if not selection:
            return
        
        label = self.user_listbox.get(selection[0])
        user = self.user_map[label]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.entry_email.config(state='normal')
        self.entry_email.delete(0, tk.END)
        self.entry_email.insert(0, user['primaryEmail'])
        self.entry_email.config(state='readonly')
        
        self.entry_first.delete(0, tk.END)
        self.entry_first.insert(0, user['name'].get('givenName', ''))
        
        self.entry_last.delete(0, tk.END)
        self.entry_last.insert(0, user['name'].get('familyName', ''))
        
        self.entry_pass.delete(0, tk.END)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ OU –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_ou_path = get_user_orgunit(self.service, user['primaryEmail'])
            user_ou_display = get_display_name_for_orgunit_path(user_ou_path, self.orgunits)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            try:
                ou_index = self.orgunit_display_names.index(user_ou_display)
                self.combo_orgunit.current(ou_index)
            except ValueError:
                # –ï—Å–ª–∏ OU –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–µ
                self.combo_orgunit.current(0)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OU –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–µ OU
            self.combo_orgunit.current(0)
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.txt_result.config(state=tk.NORMAL)
        self.txt_result.delete(1.0, tk.END)
        self.txt_result.config(state=tk.DISABLED)

    def update_user(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        email = self.entry_email.get().strip()
        first = self.entry_first.get().strip()
        last = self.entry_last.get().strip()
        password = self.entry_pass.get().strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ OU
        selected_ou_display = self.combo_orgunit.get()
        new_org_unit_path = get_orgunit_path_from_display_name(selected_ou_display, self.orgunits)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ OU –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_org_unit_path = get_user_orgunit(self.service, email)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º OU)
        fields = {}
        if first or last:
            fields['name'] = {}
            if first:
                fields['name']['givenName'] = first
            if last:
                fields['name']['familyName'] = last
        if password:
            fields['password'] = password
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if not email and not fields and new_org_unit_path == current_org_unit_path:
            self._show_result('–£–∫–∞–∂–∏—Ç–µ email –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
            return
        
        result_messages = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        if fields:
            result = api_update_user(self.service, email, fields)
            result_messages.append(result)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–≥–æ–µ OU (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if new_org_unit_path != current_org_unit_path:
            ou_result = move_user_to_orgunit(self.service, email, new_org_unit_path)
            if ou_result['success']:
                ou_display = get_display_name_for_orgunit_path(new_org_unit_path, self.orgunits)
                result_messages.append(f"üìÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤: {ou_display}")
            else:
                result_messages.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {ou_result['message']}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_result = "\n".join(result_messages) if result_messages else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
        self._show_result(final_result)

    def delete_user(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        email = self.entry_email.get().strip()
        if not email:
            messagebox.showwarning('–í–Ω–∏–º–∞–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirm = messagebox.askyesno('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ', 
                                     f'–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}?')
        if not confirm:
            return
        
        try:
            result = delete_user(self.service, email)
            self._show_result(result)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
            if '—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' in result:
                idx = self.user_listbox.curselection()
                if idx:
                    self.user_listbox.delete(idx[0])
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
                self.entry_email.config(state='normal')
                self.entry_email.delete(0, tk.END)
                self.entry_email.config(state='readonly')
                self.entry_first.delete(0, tk.END)
                self.entry_last.delete(0, tk.END)
                self.entry_pass.delete(0, tk.END)
                
        except Exception as e:
            self._show_result(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')

    def _show_result(self, message: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.txt_result.config(state=tk.NORMAL)
        self.txt_result.delete(1.0, tk.END)
        self.txt_result.insert(tk.END, message + '\n')
        self.txt_result.config(state=tk.DISABLED)
