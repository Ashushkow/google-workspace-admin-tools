# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π FreeIPA.
"""

import tkinter as tk
from tkinter import messagebox, ttk, simpledialog
from typing import Any, Optional, List, Dict
import logging

from .ui_components import ModernColors, ModernButton, center_window

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç FreeIPA
try:
    from ..services.freeipa_client import FreeIPAService
    FREEIPA_AVAILABLE = True
except ImportError:
    FreeIPAService = None
    FREEIPA_AVAILABLE = False

logger = logging.getLogger(__name__)


class GroupMembersManagementWindow(tk.Toplevel):
    """
    –û–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π FreeIPA.
    """
    
    def __init__(self, master=None, group_id=None, group_name=None, 
                 google_service=None, freeipa_service=None):
        super().__init__(master)
        
        self.group_id = group_id
        self.group_name = group_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
        self.google_service = google_service
        self.freeipa_service = freeipa_service
        
        self.title(f'–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: {self.group_name}')
        self.geometry('900x700')
        self.configure(bg=ModernColors.BACKGROUND)
        self.transient(master)
        
        if master:
            center_window(self, master)
            
        self.google_members = []
        self.freeipa_members = []
        self.freeipa_users = []
        
        self.setup_ui()
        self.load_data()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        title_frame.pack(fill='x', padx=20, pady=(15, 10))
        
        title_label = tk.Label(
            title_frame, 
            text=f'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: {self.group_name}',
            font=('Arial', 16, 'bold'), 
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        )
        title_label.pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ModernButton(
            title_frame, 
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            command=self.load_data, 
            style='secondary'
        ).pack(side='right')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        main_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))
        
        # –°–æ–∑–¥–∞–µ–º Notebook –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ Google Workspace
        self.setup_google_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ FreeIPA (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if FREEIPA_AVAILABLE and self.freeipa_service:
            self.setup_freeipa_tab()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.setup_action_buttons(main_frame)

    def setup_google_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ Google Workspace"""
        google_frame = ttk.Frame(self.notebook)
        self.notebook.add(google_frame, text="üìä Google Workspace")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = tk.Frame(google_frame, bg=ModernColors.BACKGROUND)
        container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ Google
        current_frame = tk.LabelFrame(
            container,
            text="–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ Google Workspace",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 11, 'bold')
        )
        current_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        # Treeview –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Google
        columns = ('email', 'name', 'role', 'status')
        self.google_members_tree = ttk.Treeview(
            current_frame, 
            columns=columns, 
            show='headings',
            height=12
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.google_members_tree.heading('email', text='Email')
        self.google_members_tree.heading('name', text='–ò–º—è')
        self.google_members_tree.heading('role', text='–†–æ–ª—å')
        self.google_members_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        
        self.google_members_tree.column('email', width=250)
        self.google_members_tree.column('name', width=200)
        self.google_members_tree.column('role', width=100)
        self.google_members_tree.column('status', width=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è Google
        google_scroll = ttk.Scrollbar(
            current_frame, 
            orient='vertical', 
            command=self.google_members_tree.yview
        )
        self.google_members_tree.configure(yscrollcommand=google_scroll.set)
        
        self.google_members_tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=10)
        google_scroll.pack(side='right', fill='y', pady=10, padx=(0, 10))

    def setup_freeipa_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ FreeIPA"""
        freeipa_frame = ttk.Frame(self.notebook)
        self.notebook.add(freeipa_frame, text="üîó FreeIPA")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = tk.Frame(freeipa_frame, bg=ModernColors.BACKGROUND)
        container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏: —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        left_frame = tk.Frame(container, bg=ModernColors.BACKGROUND)
        left_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        right_frame = tk.Frame(container, bg=ModernColors.BACKGROUND)
        right_frame.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        # –¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ FreeIPA
        members_frame = tk.LabelFrame(
            left_frame,
            text="–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –≤ FreeIPA",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 11, 'bold')
        )
        members_frame.pack(fill='both', expand=True)
        
        # Listbox –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ FreeIPA
        self.freeipa_members_listbox = tk.Listbox(
            members_frame,
            font=('Arial', 10),
            bg='white',
            fg=ModernColors.TEXT_PRIMARY,
            selectbackground=ModernColors.PRIMARY,
            selectmode='extended'
        )
        
        members_scroll = tk.Scrollbar(
            members_frame,
            orient='vertical',
            command=self.freeipa_members_listbox.yview
        )
        self.freeipa_members_listbox.configure(yscrollcommand=members_scroll.set)
        
        self.freeipa_members_listbox.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=10)
        members_scroll.pack(side='right', fill='y', pady=10, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        members_buttons_frame = tk.Frame(members_frame, bg=ModernColors.BACKGROUND)
        members_buttons_frame.pack(fill='x', padx=10, pady=(0, 10))
        
        ModernButton(
            members_buttons_frame,
            text='‚ûñ –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã',
            command=self.remove_from_freeipa_group,
            style='danger'
        ).pack(side='left', padx=(0, 5))
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ FreeIPA
        users_frame = tk.LabelFrame(
            right_frame,
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ FreeIPA",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 11, 'bold')
        )
        users_frame.pack(fill='both', expand=True)
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        search_frame = tk.Frame(users_frame, bg=ModernColors.BACKGROUND)
        search_frame.pack(fill='x', padx=10, pady=(10, 5))
        
        tk.Label(
            search_frame,
            text='üîç –ü–æ–∏—Å–∫:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(side='left')
        
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(
            search_frame,
            textvariable=self.search_var,
            font=('Arial', 10)
        )
        search_entry.pack(side='left', fill='x', expand=True, padx=(5, 10))
        search_entry.bind('<KeyRelease>', self.filter_users)
        
        # Listbox –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.freeipa_users_listbox = tk.Listbox(
            users_frame,
            font=('Arial', 10),
            bg='white',
            fg=ModernColors.TEXT_PRIMARY,
            selectbackground=ModernColors.SUCCESS,
            selectmode='extended'
        )
        
        users_scroll = tk.Scrollbar(
            users_frame,
            orient='vertical',
            command=self.freeipa_users_listbox.yview
        )
        self.freeipa_users_listbox.configure(yscrollcommand=users_scroll.set)
        
        self.freeipa_users_listbox.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=5)
        users_scroll.pack(side='right', fill='y', pady=5, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        users_buttons_frame = tk.Frame(users_frame, bg=ModernColors.BACKGROUND)
        users_buttons_frame.pack(fill='x', padx=10, pady=(0, 10))
        
        ModernButton(
            users_buttons_frame,
            text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É',
            command=self.add_to_freeipa_group,
            style='success'
        ).pack(side='left', padx=(0, 5))
        
        ModernButton(
            users_buttons_frame,
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫',
            command=self.load_freeipa_users,
            style='secondary'
        ).pack(side='right')

    def setup_action_buttons(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        buttons_frame = tk.Frame(parent, bg=ModernColors.BACKGROUND)
        buttons_frame.pack(fill='x', pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω FreeIPA)
        if FREEIPA_AVAILABLE and self.freeipa_service:
            ModernButton(
                buttons_frame,
                text='üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å FreeIPA',
                command=self.sync_with_freeipa,
                style='info'
            ).pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ModernButton(
            buttons_frame,
            text='‚ùå –ó–∞–∫—Ä—ã—Ç—å',
            command=self.destroy,
            style='secondary'
        ).pack(side='right')

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö"""
        self.load_google_members()
        if FREEIPA_AVAILABLE and self.freeipa_service:
            self.load_freeipa_members()
            self.load_freeipa_users()

    def load_google_members(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Google Workspace"""
        if not self.google_service or not self.group_id:
            return
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –∫ Google API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            self.google_members = []
            
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
            for item in self.google_members_tree.get_children():
                self.google_members_tree.delete(item)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
            sample_members = [
                ('user1@company.com', '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', 'MEMBER', 'ACTIVE'),
                ('user2@company.com', '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', 'OWNER', 'ACTIVE'),
                ('user3@company.com', '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', 'MEMBER', 'SUSPENDED')
            ]
            
            for email, name, role, status in sample_members:
                self.google_members_tree.insert('', 'end', values=(email, name, role, status))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Google: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Google: {e}")

    def load_freeipa_members(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏–∑ FreeIPA"""
        if not self.freeipa_service:
            return
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∫–ª–∞—Å—Å—É
            service_class_name = self.freeipa_service.__class__.__name__
            
            if service_class_name == 'FreeIPAService':
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è FreeIPAService
                members = self.freeipa_service.get_group_members(self.group_name)
            else:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è FreeIPAIntegration
                import asyncio
                import inspect
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∫–æ—Ä—É—Ç–∏–Ω–æ–π
                if inspect.iscoroutinefunction(self.freeipa_service.get_group_members):
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        members = loop.run_until_complete(self.freeipa_service.get_group_members(self.group_name))
                    finally:
                        loop.close()
                else:
                    # –û–±—ã—á–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                    members = self.freeipa_service.get_group_members(self.group_name)
            
            self.freeipa_members = members if members else []
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            self.freeipa_members_listbox.delete(0, tk.END)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for member in self.freeipa_members:
                self.freeipa_members_listbox.insert(tk.END, member)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ FreeIPA: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ FreeIPA: {e}")

    def load_freeipa_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π FreeIPA"""
        if not self.freeipa_service:
            return
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∫–ª–∞—Å—Å—É
            service_class_name = self.freeipa_service.__class__.__name__
            
            if service_class_name == 'FreeIPAService':
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è FreeIPAService
                users_data = self.freeipa_service.list_users()
            else:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è FreeIPAIntegration
                import asyncio
                import inspect
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∫–æ—Ä—É—Ç–∏–Ω–æ–π
                if inspect.iscoroutinefunction(self.freeipa_service.list_users):
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        users_data = loop.run_until_complete(self.freeipa_service.list_users())
                    finally:
                        loop.close()
                else:
                    # –û–±—ã—á–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                    users_data = self.freeipa_service.list_users()
            
            self.freeipa_users = [user.get('uid', [''])[0] for user in users_data if user.get('uid')]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.update_users_display()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π FreeIPA: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π FreeIPA: {e}")

    def update_users_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞"""
        if not hasattr(self, 'freeipa_users_listbox'):
            return
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        self.freeipa_users_listbox.delete(0, tk.END)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
        search_term = self.search_var.get().lower()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        for user in self.freeipa_users:
            if user not in self.freeipa_members:
                if not search_term or search_term in user.lower():
                    self.freeipa_users_listbox.insert(tk.END, user)

    def filter_users(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        self.update_users_display()

    def add_to_freeipa_group(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É FreeIPA"""
        if not self.freeipa_service:
            messagebox.showerror("–û—à–∏–±–∫–∞", "FreeIPA —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        selected_indices = self.freeipa_users_listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return
        
        selected_users = [self.freeipa_users_listbox.get(i) for i in selected_indices]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–î–æ–±–∞–≤–∏—Ç—å {len(selected_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É '{self.group_name}'?"
        ):
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        success_count = 0
        errors = []
        
        for user in selected_users:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∫–ª–∞—Å—Å—É
                service_class_name = self.freeipa_service.__class__.__name__
                
                if service_class_name == 'FreeIPAService':
                    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è FreeIPAService
                    result = self.freeipa_service.add_user_to_group(user, self.group_name)
                else:
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è FreeIPAIntegration
                    import asyncio
                    import inspect
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∫–æ—Ä—É—Ç–∏–Ω–æ–π
                    if inspect.iscoroutinefunction(self.freeipa_service.add_user_to_group):
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        try:
                            result = loop.run_until_complete(self.freeipa_service.add_user_to_group(user, self.group_name))
                        finally:
                            loop.close()
                    else:
                        # –û–±—ã—á–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                        result = self.freeipa_service.add_user_to_group(user, self.group_name)
                
                if result:
                    success_count += 1
                else:
                    errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {user}")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {user}: {str(e)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if success_count > 0:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}")
            self.load_freeipa_members()
            self.update_users_display()
        
        if errors:
            messagebox.showerror("–û—à–∏–±–∫–∏", "\\n".join(errors[:5]))  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫

    def remove_from_freeipa_group(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã FreeIPA"""
        if not self.freeipa_service:
            messagebox.showerror("–û—à–∏–±–∫–∞", "FreeIPA —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        selected_indices = self.freeipa_members_listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        selected_members = [self.freeipa_members_listbox.get(i) for i in selected_indices]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å {len(selected_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã '{self.group_name}'?"
        ):
            return
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        success_count = 0
        errors = []
        
        for member in selected_members:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∫–ª–∞—Å—Å—É
                service_class_name = self.freeipa_service.__class__.__name__
                
                if service_class_name == 'FreeIPAService':
                    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è FreeIPAService
                    result = self.freeipa_service.remove_user_from_group(member, self.group_name)
                else:
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è FreeIPAIntegration
                    import asyncio
                    import inspect
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∫–æ—Ä—É—Ç–∏–Ω–æ–π
                    if inspect.iscoroutinefunction(self.freeipa_service.remove_user_from_group):
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        try:
                            result = loop.run_until_complete(self.freeipa_service.remove_user_from_group(member, self.group_name))
                        finally:
                            loop.close()
                    else:
                        # –û–±—ã—á–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                        result = self.freeipa_service.remove_user_from_group(member, self.group_name)
                
                if result:
                    success_count += 1
                else:
                    errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {member}")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {member}: {str(e)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if success_count > 0:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {success_count}")
            self.load_freeipa_members()
            self.update_users_display()
        
        if errors:
            messagebox.showerror("–û—à–∏–±–∫–∏", "\\n".join(errors[:5]))

    def sync_with_freeipa(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–∂–¥—É Google Workspace –∏ FreeIPA"""
        if not self.freeipa_service:
            messagebox.showerror("–û—à–∏–±–∫–∞", "FreeIPA —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Google –≤ FreeIPA
        
        messagebox.showinfo(
            "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
            "–§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"
        )


def show_group_members_management(master, group_id=None, group_name=None, 
                                 google_service=None, freeipa_service=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã"""
    window = GroupMembersManagementWindow(
        master=master,
        group_id=group_id,
        group_name=group_name,
        google_service=google_service,
        freeipa_service=freeipa_service
    )
    return window
