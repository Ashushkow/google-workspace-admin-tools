# -*- coding: utf-8 -*-
"""
–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏ Google.
"""

import tkinter as tk
from tkinter import messagebox, ttk
from typing import Any, Optional

from .ui_components import ModernColors, ModernButton, center_window


class CalendarManagementWindow(tk.Toplevel):
    """
    –û–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏ Google.
    """
    
    def __init__(self, master=None, service=None):
        super().__init__(master)
        self.service = service
        self.master_window = master
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏ Google')
        self.geometry('800x600')
        self.resizable(True, True)
        self.configure(bg=ModernColors.BACKGROUND)
        self.transient(master)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ
        if master:
            center_window(self, master)
            
        self.setup_ui()
        self.load_calendars()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        header_frame.pack(fill='x', padx=15, pady=(15, 10))
        
        tk.Label(
            header_frame,
            text='üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏ Google',
            font=('Arial', 16, 'bold'),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(side='left')
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        buttons_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        buttons_frame.pack(fill='x', padx=15, pady=(0, 10))
        
        ModernButton(
            buttons_frame,
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            command=self.load_calendars,
            style='primary'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            buttons_frame,
            text='üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
            command=self.manage_calendar_members,
            style='info'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            buttons_frame,
            text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞',
            command=self.add_calendar_member,
            style='success'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            buttons_frame,
            text='‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞',
            command=self.remove_calendar_member,
            style='danger'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            buttons_frame,
            text='‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
            command=self.create_calendar,
            style='secondary'
        ).pack(side='right')
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
        list_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        list_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
        columns = ('name', 'owner', 'access', 'description')
        self.calendar_tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.calendar_tree.heading('name', text='–ù–∞–∑–≤–∞–Ω–∏–µ')
        self.calendar_tree.heading('owner', text='–í–ª–∞–¥–µ–ª–µ—Ü')
        self.calendar_tree.heading('access', text='–î–æ—Å—Ç—É–ø')
        self.calendar_tree.heading('description', text='–û–ø–∏—Å–∞–Ω–∏–µ')
        
        self.calendar_tree.column('name', width=250)
        self.calendar_tree.column('owner', width=200)
        self.calendar_tree.column('access', width=150)
        self.calendar_tree.column('description', width=300)
        
        # Scrollbar –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar = ttk.Scrollbar(list_frame, orient='vertical', command=self.calendar_tree.yview)
        self.calendar_tree.configure(yscrollcommand=scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤–∫–∞
        self.calendar_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = tk.Label(
            self,
            text='–ì–æ—Ç–æ–≤',
            bg=ModernColors.SURFACE,
            fg=ModernColors.TEXT_SECONDARY,
            anchor='w',
            padx=10,
            pady=5
        )
        self.status_label.pack(fill='x', side='bottom')

    def load_calendars(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π"""
        try:
            self.status_label.config(text='–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π...')
            self.update()
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            for item in self.calendar_tree.get_children():
                self.calendar_tree.delete(item)
            
            if not self.service:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°–µ—Ä–≤–∏—Å Google API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ —á–µ—Ä–µ–∑ Calendar API
            from ..api.calendar_api import create_calendar_api
            calendar_api = create_calendar_api()
            
            if calendar_api:
                calendars = calendar_api.get_calendar_list()
                
                for calendar in calendars:
                    # –í—ã–¥–µ–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å SPUTNIK (–æ–±—â–∏–π)
                    if "sputnik" in calendar.name.lower() and "–æ–±—â–∏–π" in calendar.name.lower():
                        calendar.name = f"üéØ {calendar.name}"  # –í—ã–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫–æ–π
                    
                    self.calendar_tree.insert('', 'end', values=(
                        calendar.name,
                        calendar.owner,
                        self._translate_role(calendar.access_role),
                        calendar.description
                    ), tags=(calendar.id,))
                
                self.status_label.config(text=f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {len(calendars)}')
            else:
                # Fallback –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
                test_calendars = [
                    ("üéØ SPUTNIK (–æ–±—â–∏–π)", "admin@sputnik.com", "–í–ª–∞–¥–µ–ª–µ—Ü", "–û–±—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥—ã SPUTNIK"),
                    ("–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "admin@company.com", "–í–ª–∞–¥–µ–ª–µ—Ü", "–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"),
                    ("–ö–æ–º–∞–Ω–¥–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "team@company.com", "–†–µ–¥–∞–∫—Ç–æ—Ä", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á")
                ]
                
                for calendar_data in test_calendars:
                    self.calendar_tree.insert('', 'end', values=calendar_data)
                
                self.status_label.config(text=f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {len(test_calendars)} (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)')
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–∏:\n{str(e)}")
            self.status_label.config(text='–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')

    def create_calendar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        messagebox.showinfo("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
    
    def _translate_role(self, role: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        role_translations = {
            'owner': '–í–ª–∞–¥–µ–ª–µ—Ü',
            'reader': '–ß–∏—Ç–∞—Ç–µ–ª—å',
            'writer': '–†–µ–¥–∞–∫—Ç–æ—Ä',
            'freeBusyReader': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏',
            'editor': '–†–µ–¥–∞–∫—Ç–æ—Ä'
        }
        return role_translations.get(role, role)
    
    def _get_selected_calendar_id(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        selection = self.calendar_tree.selection()
        if not selection:
            return ""
        
        item = self.calendar_tree.item(selection[0])
        tags = item.get('tags', [])
        return tags[0] if tags else ""
    
    def _get_selected_calendar_name(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        selection = self.calendar_tree.selection()
        if not selection:
            return ""
        
        item = self.calendar_tree.item(selection[0])
        values = item.get('values', [])
        return values[0] if values else ""
    
    def manage_calendar_members(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        calendar_id = self._get_selected_calendar_id()
        calendar_name = self._get_selected_calendar_name()
        
        if not calendar_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        CalendarMembersWindow(self, calendar_id, calendar_name)
    
    def add_calendar_member(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        calendar_id = self._get_selected_calendar_id()
        calendar_name = self._get_selected_calendar_name()
        
        if not calendar_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            return
        
        # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        AddCalendarMemberDialog(self, calendar_id, calendar_name, self.refresh_calendars)
    
    def remove_calendar_member(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        calendar_id = self._get_selected_calendar_id()
        calendar_name = self._get_selected_calendar_name()
        
        if not calendar_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            return
        
        # –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        RemoveCalendarMemberDialog(self, calendar_id, calendar_name, self.refresh_calendars)
    
    def refresh_calendars(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.load_calendars()

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.destroy()


class CalendarMembersWindow(tk.Toplevel):
    """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    
    def __init__(self, parent, calendar_id: str, calendar_name: str):
        super().__init__(parent)
        self.parent = parent
        self.calendar_id = calendar_id
        self.calendar_name = calendar_name
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title(f'–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {calendar_name}')
        self.geometry('700x500')
        self.resizable(True, True)
        self.configure(bg=ModernColors.BACKGROUND)
        self.transient(parent)
        
        center_window(self, parent)
        self.setup_ui()
        self.load_members()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –æ–∫–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        header_frame.pack(fill='x', padx=15, pady=(15, 10))
        
        tk.Label(
            header_frame,
            text=f'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {self.calendar_name}',
            font=('Arial', 14, 'bold'),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        buttons_frame.pack(fill='x', padx=15, pady=(0, 10))
        
        ModernButton(
            buttons_frame,
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            command=self.load_members,
            style='primary'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            buttons_frame,
            text='‚ûï –î–æ–±–∞–≤–∏—Ç—å',
            command=self.add_member,
            style='success'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            buttons_frame,
            text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å',
            command=self.change_member_role,
            style='info'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            buttons_frame,
            text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å',
            command=self.remove_member,
            style='danger'
        ).pack(side='left', padx=(0, 8))
        
        # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        list_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        list_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        columns = ('email', 'role', 'type')
        self.members_tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=12)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.members_tree.heading('email', text='Email —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        self.members_tree.heading('role', text='–†–æ–ª—å')
        self.members_tree.heading('type', text='–¢–∏–ø')
        
        self.members_tree.column('email', width=350)
        self.members_tree.column('role', width=150)
        self.members_tree.column('type', width=100)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(list_frame, orient='vertical', command=self.members_tree.yview)
        self.members_tree.configure(yscrollcommand=scrollbar.set)
        
        self.members_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = tk.Label(
            self,
            text='–ì–æ—Ç–æ–≤',
            bg=ModernColors.SURFACE,
            fg=ModernColors.TEXT_SECONDARY,
            anchor='w',
            padx=10,
            pady=5
        )
        self.status_label.pack(fill='x', side='bottom')
    
    def load_members(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        try:
            self.status_label.config(text='–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...')
            self.update()
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            for item in self.members_tree.get_children():
                self.members_tree.delete(item)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Calendar API
            from ..api.calendar_api import create_calendar_api
            calendar_api = create_calendar_api()
            
            if calendar_api:
                permissions = calendar_api.get_calendar_permissions(self.calendar_id)
                
                for permission in permissions:
                    self.members_tree.insert('', 'end', values=(
                        permission.user_email,
                        self._translate_role(permission.role),
                        permission.scope_type
                    ))
                
                self.status_label.config(text=f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(permissions)}')
            else:
                self.status_label.config(text='–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Calendar API')
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{str(e)}")
            self.status_label.config(text='–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
    
    def _translate_role(self, role: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        role_translations = {
            'owner': '–í–ª–∞–¥–µ–ª–µ—Ü',
            'reader': '–ß–∏—Ç–∞—Ç–µ–ª—å', 
            'writer': '–†–µ–¥–∞–∫—Ç–æ—Ä',
            'freeBusyReader': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏'
        }
        return role_translations.get(role, role)
    
    def add_member(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        AddCalendarMemberDialog(self, self.calendar_id, self.calendar_name, self.load_members)
    
    def change_member_role(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        selection = self.members_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏")
            return
        
        item = self.members_tree.item(selection[0])
        values = item.get('values', [])
        if not values:
            return
        
        user_email = values[0]
        current_role = values[1]
        
        ChangeRoleDialog(self, self.calendar_id, user_email, current_role, self.load_members)
    
    def remove_member(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        selection = self.members_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        item = self.members_tree.item(selection[0])
        values = item.get('values', [])
        if not values:
            return
        
        user_email = values[0]
        
        if messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_email} –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è?"
        ):
            try:
                from ..api.calendar_api import create_calendar_api
                calendar_api = create_calendar_api()
                
                if calendar_api and calendar_api.remove_user_from_calendar(self.calendar_id, user_email):
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£—á–∞—Å—Ç–Ω–∏–∫ {user_email} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                    self.load_members()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                    
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{str(e)}")


class AddCalendarMemberDialog(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    
    def __init__(self, parent, calendar_id: str, calendar_name: str, refresh_callback):
        super().__init__(parent)
        self.parent = parent
        self.calendar_id = calendar_id
        self.calendar_name = calendar_name
        self.refresh_callback = refresh_callback
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title('–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        self.geometry('400x250')
        self.resizable(False, False)
        self.configure(bg=ModernColors.BACKGROUND)
        self.transient(parent)
        
        center_window(self, parent)
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–∏–∞–ª–æ–≥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self,
            text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é:\n{self.calendar_name}',
            font=('Arial', 12, 'bold'),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            justify='center'
        ).pack(pady=20)
        
        # –§–æ—Ä–º–∞
        form_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        form_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(
            form_frame,
            text='Email —É—á–∞—Å—Ç–Ω–∏–∫–∞:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w')
        
        self.email_entry = tk.Entry(form_frame, font=('Arial', 10), width=40)
        self.email_entry.pack(fill='x', pady=(5, 15))
        self.email_entry.focus()
        
        tk.Label(
            form_frame,
            text='–†–æ–ª—å –¥–æ—Å—Ç—É–ø–∞:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w')
        
        self.role_var = tk.StringVar(value='reader')
        role_frame = tk.Frame(form_frame, bg=ModernColors.BACKGROUND)
        role_frame.pack(fill='x', pady=(5, 15))
        
        roles = [
            ('reader', '–ß–∏—Ç–∞—Ç–µ–ª—å'),
            ('writer', '–†–µ–¥–∞–∫—Ç–æ—Ä'),
            ('owner', '–í–ª–∞–¥–µ–ª–µ—Ü')
        ]
        
        for role_value, role_text in roles:
            tk.Radiobutton(
                role_frame,
                text=role_text,
                variable=self.role_var,
                value=role_value,
                bg=ModernColors.BACKGROUND,
                fg=ModernColors.TEXT_PRIMARY,
                selectcolor=ModernColors.SURFACE
            ).pack(side='left', padx=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        buttons_frame.pack(fill='x', padx=20, pady=20)
        
        ModernButton(
            buttons_frame,
            text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å',
            command=self.add_member,
            style='success'
        ).pack(side='right', padx=(8, 0))
        
        ModernButton(
            buttons_frame,
            text='‚ùå –û—Ç–º–µ–Ω–∞',
            command=self.destroy,
            style='secondary'
        ).pack(side='right')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        self.bind('<Return>', lambda e: self.add_member())
    
    def add_member(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        email = self.email_entry.get().strip()
        role = self.role_var.get()
        
        if not email:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ email —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            return
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if '@' not in email or '.' not in email:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
            return
        
        try:
            from ..api.calendar_api import create_calendar_api
            calendar_api = create_calendar_api()
            
            if calendar_api and calendar_api.add_user_to_calendar(self.calendar_id, email, role):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£—á–∞—Å—Ç–Ω–∏–∫ {email} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é —Å —Ä–æ–ª—å—é {role}")
                if self.refresh_callback:
                    self.refresh_callback()
                self.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{str(e)}")


class RemoveCalendarMemberDialog(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    
    def __init__(self, parent, calendar_id: str, calendar_name: str, refresh_callback):
        super().__init__(parent)
        self.parent = parent
        self.calendar_id = calendar_id
        self.calendar_name = calendar_name
        self.refresh_callback = refresh_callback
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title('–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        self.geometry('400x200')
        self.resizable(False, False)
        self.configure(bg=ModernColors.BACKGROUND)
        self.transient(parent)
        
        center_window(self, parent)
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–∏–∞–ª–æ–≥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self,
            text=f'‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n{self.calendar_name}',
            font=('Arial', 12, 'bold'),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            justify='center'
        ).pack(pady=20)
        
        # –§–æ—Ä–º–∞
        form_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        form_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(
            form_frame,
            text='Email —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w')
        
        self.email_entry = tk.Entry(form_frame, font=('Arial', 10), width=40)
        self.email_entry.pack(fill='x', pady=(5, 15))
        self.email_entry.focus()
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        buttons_frame.pack(fill='x', padx=20, pady=20)
        
        ModernButton(
            buttons_frame,
            text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å',
            command=self.remove_member,
            style='danger'
        ).pack(side='right', padx=(8, 0))
        
        ModernButton(
            buttons_frame,
            text='‚ùå –û—Ç–º–µ–Ω–∞',
            command=self.destroy,
            style='secondary'
        ).pack(side='right')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        self.bind('<Return>', lambda e: self.remove_member())
    
    def remove_member(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        email = self.email_entry.get().strip()
        
        if not email:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ email —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            return
        
        if not messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {email} –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è?"
        ):
            return
        
        try:
            from ..api.calendar_api import create_calendar_api
            calendar_api = create_calendar_api()
            
            if calendar_api and calendar_api.remove_user_from_calendar(self.calendar_id, email):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£—á–∞—Å—Ç–Ω–∏–∫ {email} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                if self.refresh_callback:
                    self.refresh_callback()
                self.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{str(e)}")


class ChangeRoleDialog(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    
    def __init__(self, parent, calendar_id: str, user_email: str, current_role: str, refresh_callback):
        super().__init__(parent)
        self.parent = parent
        self.calendar_id = calendar_id
        self.user_email = user_email
        self.current_role = current_role
        self.refresh_callback = refresh_callback
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å')
        self.geometry('400x220')
        self.resizable(False, False)
        self.configure(bg=ModernColors.BACKGROUND)
        self.transient(parent)
        
        center_window(self, parent)
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–∏–∞–ª–æ–≥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self,
            text=f'‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{self.user_email}',
            font=('Arial', 12, 'bold'),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            justify='center'
        ).pack(pady=20)
        
        # –§–æ—Ä–º–∞
        form_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        form_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(
            form_frame,
            text=f'–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {self.current_role}',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_SECONDARY
        ).pack(anchor='w', pady=(0, 10))
        
        tk.Label(
            form_frame,
            text='–ù–æ–≤–∞—è —Ä–æ–ª—å:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        current_english_role = 'reader'
        for eng_role, rus_role in [('reader', '–ß–∏—Ç–∞—Ç–µ–ª—å'), ('writer', '–†–µ–¥–∞–∫—Ç–æ—Ä'), ('owner', '–í–ª–∞–¥–µ–ª–µ—Ü')]:
            if rus_role == self.current_role:
                current_english_role = eng_role
                break
        
        self.role_var = tk.StringVar(value=current_english_role)
        role_frame = tk.Frame(form_frame, bg=ModernColors.BACKGROUND)
        role_frame.pack(fill='x', pady=(5, 15))
        
        roles = [
            ('reader', '–ß–∏—Ç–∞—Ç–µ–ª—å'),
            ('writer', '–†–µ–¥–∞–∫—Ç–æ—Ä'), 
            ('owner', '–í–ª–∞–¥–µ–ª–µ—Ü')
        ]
        
        for role_value, role_text in roles:
            tk.Radiobutton(
                role_frame,
                text=role_text,
                variable=self.role_var,
                value=role_value,
                bg=ModernColors.BACKGROUND,
                fg=ModernColors.TEXT_PRIMARY,
                selectcolor=ModernColors.SURFACE
            ).pack(side='left', padx=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        buttons_frame.pack(fill='x', padx=20, pady=20)
        
        ModernButton(
            buttons_frame,
            text='‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å',
            command=self.change_role,
            style='info'
        ).pack(side='right', padx=(8, 0))
        
        ModernButton(
            buttons_frame,
            text='‚ùå –û—Ç–º–µ–Ω–∞',
            command=self.destroy,
            style='secondary'
        ).pack(side='right')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        self.bind('<Return>', lambda e: self.change_role())
    
    def change_role(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        new_role = self.role_var.get()
        
        try:
            from ..api.calendar_api import create_calendar_api
            calendar_api = create_calendar_api()
            
            if calendar_api and calendar_api.update_user_role(self.calendar_id, self.user_email, new_role):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {self.user_email} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}")
                if self.refresh_callback:
                    self.refresh_callback()
                self.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:\n{str(e)}")


def open_calendar_management(master=None, service=None):
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏.
    
    Args:
        master: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        service: –°–µ—Ä–≤–∏—Å Google API
    """
    try:
        window = CalendarManagementWindow(master, service)
        window.protocol("WM_DELETE_WINDOW", window.on_closing)
        return window
    except Exception as e:
        messagebox.showerror(
            "–û—à–∏–±–∫–∞",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏:\n{str(e)}"
        )
        return None