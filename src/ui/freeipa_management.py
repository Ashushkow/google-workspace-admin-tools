# -*- coding: utf-8 -*-
"""
–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π.
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, List, Any
from pathlib import Path

from .ui_components import ModernColors, ModernButton, center_window

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç FreeIPA –º–æ–¥—É–ª–µ–π
try:
    from ..services.freeipa_client import FreeIPAConfig, FreeIPAService, create_freeipa_config_template
    from ..integrations.freeipa_integration import FreeIPAIntegration, setup_freeipa_integration
    FREEIPA_MODULES_AVAILABLE = True
except ImportError as e:
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ FreeIPA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    FreeIPAConfig = object
    FreeIPAService = object
    FreeIPAIntegration = object
    create_freeipa_config_template = lambda: None
    setup_freeipa_integration = lambda: None
    FREEIPA_MODULES_AVAILABLE = False
    FREEIPA_IMPORT_ERROR = str(e)

from ..utils.simple_utils import async_manager, error_handler, SimpleProgressDialog
from .modern_styles import (ModernWindowConfig, CompactFrame, CompactLabel, 
                           CompactEntry, CompactButton, apply_modern_window_style, 
                           create_title_section, center_window_modern)


logger = logging.getLogger(__name__)


class FreeIPAManagementWindow(tk.Toplevel):
    """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, parent, user_service=None, group_service=None):
        super().__init__(parent)
        
        self.user_service = user_service
        self.group_service = group_service
        self.freeipa_integration: Optional[FreeIPAIntegration] = None
        self.config: Optional[FreeIPAConfig] = None
        
        self._setup_window()
        self._create_ui()
        self._load_config()
        
    def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞ —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        self.title("üîó FreeIPA –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        apply_modern_window_style(self, 'freeipa_management')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        center_window_modern(self, self.master if hasattr(self, 'master') else None)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
        self.transient(self.master)
        self.grab_set()
        
    def _create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = create_title_section(self, "üîó FreeIPA –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        title_frame.pack(fill='x', **ModernWindowConfig.PADDING['window'])
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)
        main_frame = CompactFrame(self, padding_type='section')
        main_frame.pack(fill='both', expand=True, **ModernWindowConfig.PADDING['window'])
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True, pady=(5, 0))
        
        # –í–∫–ª–∞–¥–∫–∏
        self._create_connection_tab()
        self._create_sync_tab()
        self._create_stats_tab()
        self._create_settings_tab()
        
    def _create_header(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = tk.Frame(parent, bg=ModernColors.BACKGROUND)
        header_frame.pack(fill='x', pady=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            header_frame,
            text="üîó FreeIPA –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
            font=('Arial', 16, 'bold'),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        )
        title_label.pack(side='left')
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = tk.Label(
            header_frame,
            text="‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            font=('Arial', 10),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.ERROR
        )
        self.connection_status.pack(side='right')
        
    def _create_connection_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º
        canvas = tk.Canvas(tab_frame, bg=ModernColors.BACKGROUND)
        scrollbar = ttk.Scrollbar(tab_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=ModernColors.BACKGROUND)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        config_frame = tk.LabelFrame(
            scrollable_frame,
            text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        )
        config_frame.pack(fill='x', padx=10, pady=10)
        
        # –ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        tk.Label(config_frame, text="URL —Å–µ—Ä–≤–µ—Ä–∞:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.server_url_var = tk.StringVar()
        self.server_url_entry = tk.Entry(config_frame, textvariable=self.server_url_var, width=50)
        self.server_url_entry.grid(row=0, column=1, padx=5, pady=5, sticky='ew')
        
        tk.Label(config_frame, text="–î–æ–º–µ–Ω:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.domain_var = tk.StringVar()
        self.domain_entry = tk.Entry(config_frame, textvariable=self.domain_var, width=50)
        self.domain_entry.grid(row=1, column=1, padx=5, pady=5, sticky='ew')
        
        tk.Label(config_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).grid(row=2, column=0, sticky='w', padx=5, pady=5)
        self.username_var = tk.StringVar()
        self.username_entry = tk.Entry(config_frame, textvariable=self.username_var, width=50)
        self.username_entry.grid(row=2, column=1, padx=5, pady=5, sticky='ew')
        
        tk.Label(config_frame, text="–ü–∞—Ä–æ–ª—å:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).grid(row=3, column=0, sticky='w', padx=5, pady=5)
        self.password_var = tk.StringVar()
        self.password_entry = tk.Entry(config_frame, textvariable=self.password_var, width=50, show='*')
        self.password_entry.grid(row=3, column=1, padx=5, pady=5, sticky='ew')
        
        config_frame.columnconfigure(1, weight=1)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        advanced_frame = tk.LabelFrame(
            scrollable_frame,
            text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        )
        advanced_frame.pack(fill='x', padx=10, pady=10)
        
        self.use_kerberos_var = tk.BooleanVar()
        tk.Checkbutton(
            advanced_frame,
            text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Kerberos –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
            variable=self.use_kerberos_var,
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w', padx=5, pady=5)
        
        self.verify_ssl_var = tk.BooleanVar(value=True)
        tk.Checkbutton(
            advanced_frame,
            text="–ü—Ä–æ–≤–µ—Ä—è—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
            variable=self.verify_ssl_var,
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w', padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(scrollable_frame, bg=ModernColors.BACKGROUND)
        buttons_frame.pack(fill='x', padx=10, pady=10)
        
        ModernButton(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            command=self._save_config,
            style='success'
        ).pack(side='left', padx=(0, 5))
        
        ModernButton(
            buttons_frame,
            text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            command=self._load_config_from_file,
            style='secondary'
        ).pack(side='left', padx=5)
        
        ModernButton(
            buttons_frame,
            text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            command=self._test_connection,
            style='primary'
        ).pack(side='left', padx=5)
        
        ModernButton(
            buttons_frame,
            text="üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
            command=self._connect_to_freeipa,
            style='success'
        ).pack(side='right')
        
    def _create_sync_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –≥—Ä—É–ø–ø—ã")
        
        main_sync_frame = tk.Frame(tab_frame, bg=ModernColors.BACKGROUND)
        main_sync_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_frame = tk.Frame(main_sync_frame, bg=ModernColors.INFO, relief='raised', bd=1)
        info_frame.pack(fill='x', pady=(0, 10))
        
        info_label = tk.Label(
            info_frame,
            text="‚ÑπÔ∏è –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –≥—Ä—É–ø–ø FreeIPA.",
            bg=ModernColors.INFO,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 9),
            justify='left'
        )
        info_label.pack(padx=10, pady=8)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        users_frame = tk.LabelFrame(
            main_sync_frame,
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        )
        users_frame.pack(fill='x', pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_user_frame = tk.Frame(users_frame, bg=ModernColors.BACKGROUND)
        create_user_frame.pack(fill='x', padx=10, pady=10)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        user_main_frame = tk.Frame(create_user_frame, bg=ModernColors.BACKGROUND)
        user_main_frame.pack(fill='x', pady=(0, 5))
        
        tk.Label(user_main_frame, text="–õ–æ–≥–∏–Ω:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left')
        self.new_user_uid_var = tk.StringVar()
        user_uid_entry = tk.Entry(user_main_frame, textvariable=self.new_user_uid_var, width=15)
        user_uid_entry.pack(side='left', padx=(10, 0))
        
        tk.Label(user_main_frame, text="–ò–º—è:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left', padx=(20, 0))
        self.new_user_givenname_var = tk.StringVar()
        user_givenname_entry = tk.Entry(user_main_frame, textvariable=self.new_user_givenname_var, width=15)
        user_givenname_entry.pack(side='left', padx=(10, 0))
        
        tk.Label(user_main_frame, text="–§–∞–º–∏–ª–∏—è:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left', padx=(20, 0))
        self.new_user_sn_var = tk.StringVar()
        user_sn_entry = tk.Entry(user_main_frame, textvariable=self.new_user_sn_var, width=15)
        user_sn_entry.pack(side='left', padx=(10, 0))
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: Email –∏ –ø–∞—Ä–æ–ª—å
        user_details_frame = tk.Frame(create_user_frame, bg=ModernColors.BACKGROUND)
        user_details_frame.pack(fill='x', pady=(0, 5))
        
        tk.Label(user_details_frame, text="Email:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left')
        self.new_user_email_var = tk.StringVar()
        user_email_entry = tk.Entry(user_details_frame, textvariable=self.new_user_email_var, width=25)
        user_email_entry.pack(side='left', padx=(10, 0))
        
        tk.Label(user_details_frame, text="–ü–∞—Ä–æ–ª—å:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left', padx=(20, 0))
        self.new_user_password_var = tk.StringVar()
        user_password_entry = tk.Entry(user_details_frame, textvariable=self.new_user_password_var, width=20, show='*')
        user_password_entry.pack(side='left', padx=(10, 0))
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        user_extra_frame = tk.Frame(create_user_frame, bg=ModernColors.BACKGROUND)
        user_extra_frame.pack(fill='x', pady=(0, 5))
        
        tk.Label(user_extra_frame, text="–î–æ–ª–∂–Ω–æ—Å—Ç—å:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left')
        self.new_user_title_var = tk.StringVar()
        user_title_entry = tk.Entry(user_extra_frame, textvariable=self.new_user_title_var, width=20)
        user_title_entry.pack(side='left', padx=(10, 0))
        
        tk.Label(user_extra_frame, text="–û—Ç–¥–µ–ª:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left', padx=(20, 0))
        self.new_user_department_var = tk.StringVar()
        user_department_entry = tk.Entry(user_extra_frame, textvariable=self.new_user_department_var, width=20)
        user_department_entry.pack(side='left', padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_button_frame = tk.Frame(create_user_frame, bg=ModernColors.BACKGROUND)
        user_button_frame.pack(fill='x', pady=(5, 0))
        
        ModernButton(
            user_button_frame,
            text="üë§ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            command=self._create_user,
            style='success'
        ).pack(side='right')
        
        ModernButton(
            user_button_frame,
            text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è",
            command=self._clear_user_fields,
            style='secondary'
        ).pack(side='right', padx=(0, 10))

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
        groups_frame = tk.LabelFrame(
            main_sync_frame,
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        )
        groups_frame.pack(fill='x', pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        create_group_frame = tk.Frame(groups_frame, bg=ModernColors.BACKGROUND)
        create_group_frame.pack(fill='x', padx=10, pady=10)
        
        tk.Label(create_group_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left')
        self.new_group_name_var = tk.StringVar()
        group_name_entry = tk.Entry(create_group_frame, textvariable=self.new_group_name_var, width=20)
        group_name_entry.pack(side='left', padx=(10, 0))
        
        tk.Label(create_group_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:", bg=ModernColors.BACKGROUND, fg=ModernColors.TEXT_PRIMARY).pack(side='left', padx=(20, 0))
        self.new_group_desc_var = tk.StringVar()
        group_desc_entry = tk.Entry(create_group_frame, textvariable=self.new_group_desc_var, width=30)
        group_desc_entry.pack(side='left', padx=(10, 0))
        
        ModernButton(
            create_group_frame,
            text="‚ú® –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É",
            command=self._create_group,
            style='success'
        ).pack(side='right')
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏
        groups_buttons_frame = tk.Frame(groups_frame, bg=ModernColors.BACKGROUND)
        groups_buttons_frame.pack(fill='x', padx=10, pady=10)
        
        ModernButton(
            groups_buttons_frame,
            text=" –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã FreeIPA",
            command=self._get_freeipa_groups,
            style='info'
        ).pack(side='left')
        
        ModernButton(
            groups_buttons_frame,
            text="üÜï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É",
            command=self._create_group,
            style='success'
        ).pack(side='left', padx=(10, 0))
        
        # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø FreeIPA
        groups_list_frame = tk.LabelFrame(
            main_sync_frame,
            text="–ì—Ä—É–ø–ø—ã FreeIPA",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        )
        groups_list_frame.pack(fill='both', expand=True, pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
        groups_controls_frame = tk.Frame(groups_list_frame, bg=ModernColors.BACKGROUND)
        groups_controls_frame.pack(fill='x', padx=10, pady=(5, 0))
        
        ModernButton(
            groups_controls_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            command=self._refresh_groups_list,
            style='primary'
        ).pack(side='left')
        
        tk.Label(
            groups_controls_frame,
            text="–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: ",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 9)
        ).pack(side='right')
        
        self.groups_count_label = tk.Label(
            groups_controls_frame,
            text="0",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 9, 'bold')
        )
        self.groups_count_label.pack(side='right')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è Treeview –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        groups_tree_frame = tk.Frame(groups_list_frame, bg=ModernColors.BACKGROUND)
        groups_tree_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è Treeview
        style = ttk.Style()
        style.configure("Groups.Treeview", background=ModernColors.SURFACE, 
                       foreground=ModernColors.TEXT_PRIMARY, fieldbackground=ModernColors.SURFACE)
        style.configure("Groups.Treeview.Heading", background=ModernColors.PRIMARY, 
                       foreground="white", font=('Arial', 9, 'bold'))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø
        columns = ('name', 'description', 'members_count')
        self.groups_tree = ttk.Treeview(
            groups_tree_frame,
            columns=columns,
            show='headings',
            style="Groups.Treeview",
            height=8
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.groups_tree.heading('name', text='–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã')
        self.groups_tree.heading('description', text='–û–ø–∏—Å–∞–Ω–∏–µ')
        self.groups_tree.heading('members_count', text='–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        self.groups_tree.column('name', width=200, minwidth=150)
        self.groups_tree.column('description', width=300, minwidth=200)
        self.groups_tree.column('members_count', width=100, minwidth=80)
        
        # –î–æ–±–∞–≤–ª—è–µ–º Treeview –≤ —Ñ—Ä–µ–π–º
        self.groups_tree.pack(side='left', fill='both', expand=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è Treeview
        groups_scrollbar = ttk.Scrollbar(groups_tree_frame, orient="vertical", command=self.groups_tree.yview)
        self.groups_tree.configure(yscrollcommand=groups_scrollbar.set)
        groups_scrollbar.pack(side="right", fill="y")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
        self.groups_tree.bind('<Double-1>', self._on_group_double_click)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        results_frame = tk.LabelFrame(
            main_sync_frame,
            text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        )
        results_frame.pack(fill='both', expand=True, pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_text = tk.Text(
            results_frame,
            height=10,
            bg=ModernColors.SURFACE,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Consolas', 9)
        )
        self.results_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_scrollbar = ttk.Scrollbar(results_frame, orient="vertical", command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=results_scrollbar.set)
        results_scrollbar.pack(side="right", fill="y")
        
    def _create_stats_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        stats_frame = tk.Frame(tab_frame, bg=ModernColors.BACKGROUND)
        stats_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_frame = tk.Frame(stats_frame, bg=ModernColors.BACKGROUND)
        controls_frame.pack(fill='x', pady=(0, 10))
        
        ModernButton(
            controls_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            command=self._refresh_stats,
            style='primary'
        ).pack(side='left')
        
        ModernButton(
            controls_frame,
            text="ÔøΩ –°—Ä–∞–≤–Ω–∏—Ç—å –≥—Ä—É–ø–ø—ã",
            command=self._compare_groups,
            style='info'
        ).pack(side='left', padx=(10, 0))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_text = tk.Text(
            stats_frame,
            bg=ModernColors.SURFACE,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Consolas', 10)
        )
        self.stats_text.pack(fill='both', expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_scrollbar = ttk.Scrollbar(stats_frame, orient="vertical", command=self.stats_text.yview)
        self.stats_text.configure(yscrollcommand=stats_scrollbar.set)
        stats_scrollbar.pack(side="right", fill="y")
        
    def _create_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        settings_frame = tk.Frame(tab_frame, bg=ModernColors.BACKGROUND)
        settings_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging_frame = tk.LabelFrame(
            settings_frame,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        )
        logging_frame.pack(fill='x', pady=10)
        
        self.detailed_logging_var = tk.BooleanVar(value=True)
        tk.Checkbutton(
            logging_frame,
            text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π FreeIPA",
            variable=self.detailed_logging_var,
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w', padx=10, pady=5)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        data_frame = tk.LabelFrame(
            settings_frame,
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏",
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        )
        data_frame.pack(fill='x', pady=10)
        
        data_buttons_frame = tk.Frame(data_frame, bg=ModernColors.BACKGROUND)
        data_buttons_frame.pack(fill='x', padx=10, pady=10)
        
        ModernButton(
            data_buttons_frame,
            text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            command=self._export_settings,
            style='secondary'
        ).pack(side='left')
        
        ModernButton(
            data_buttons_frame,
            text="üì• –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            command=self._import_settings,
            style='secondary'
        ).pack(side='left', padx=(10, 0))
        
        ModernButton(
            data_buttons_frame,
            text="üóëÔ∏è –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            command=self._reset_settings,
            style='danger'
        ).pack(side='right')
        
    # === –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π ===
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        config_path = Path("config/freeipa_config.json")
        template_path = Path("config/freeipa_config_template.json")
        
        if config_path.exists():
            try:
                self.config = FreeIPAConfig.from_file(str(config_path))
                self._update_ui_from_config()
                self._log_result("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
                return
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —à–∞–±–ª–æ–Ω
        if template_path.exists():
            try:
                self.config = FreeIPAConfig.from_file(str(template_path))
                self._update_ui_from_config()
                self._log_result("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._update_ui_from_config()
        self._log_result("‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è sputnik8")
    
    def _update_ui_from_config(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.config:
            self.server_url_var.set(self.config.server_url)
            self.domain_var.set(self.config.domain)
            self.username_var.set(self.config.username or "")
            self.password_var.set(self.config.password or "")
            self.use_kerberos_var.set(self.config.use_kerberos)
            self.verify_ssl_var.set(self.config.verify_ssl)
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è sputnik8
            self.server_url_var.set("https://ipa001.infra.int.sputnik8.com/")
            self.domain_var.set("infra.int.sputnik8.com")
            self.use_kerberos_var.set(False)
            self.verify_ssl_var.set(False)
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config = FreeIPAConfig(
                server_url=self.server_url_var.get().strip(),
                domain=self.domain_var.get().strip(),
                username=self.username_var.get().strip() or None,
                password=self.password_var.get().strip() or None,
                use_kerberos=self.use_kerberos_var.get(),
                verify_ssl=self.verify_ssl_var.get()
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            config_path = Path("config/freeipa_config.json")
            config_path.parent.mkdir(exist_ok=True)
            
            config.to_file(str(config_path))
            self.config = config
            self._log_result("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            self._log_result(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _load_config_from_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                self.config = FreeIPAConfig.from_file(file_path)
                self._update_ui_from_config()
                self._log_result(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {file_path}")
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self._validate_config():
            return
        
        self._save_config()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        async def test_async():
            try:
                service = FreeIPAService(self.config)
                if service.connect():
                    self._log_result("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA —É—Å–ø–µ—à–Ω–æ")
                    self.connection_status.config(text="‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω", fg=ModernColors.SUCCESS)
                    service.disconnect()
                    return True
                else:
                    self._log_result("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FreeIPA")
                    self.connection_status.config(text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", fg=ModernColors.ERROR)
                    return False
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                self.connection_status.config(text="‚ùå –û—à–∏–±–∫–∞", fg=ModernColors.ERROR)
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async_manager.run_async(test_async)
    
    def _connect_to_freeipa(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA"""
        if not self._validate_config():
            return
        
        self._save_config()
        
        async def connect_async():
            try:
                if self.user_service and self.group_service:
                    self.freeipa_integration = FreeIPAIntegration(self.user_service, self.group_service)
                    
                    if self.freeipa_integration.load_config():
                        if await self.freeipa_integration.connect():
                            self._log_result("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                            self.connection_status.config(text="‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω", fg=ModernColors.SUCCESS)
                            
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                            self._log_result("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...")
                            self._refresh_groups_list()
                            
                            return True
                        else:
                            self._log_result("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FreeIPA")
                            self.connection_status.config(text="‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", fg=ModernColors.ERROR)
                    else:
                        self._log_result("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                else:
                    self._log_result("‚ùå –°–µ—Ä–≤–∏—Å—ã Google Workspace –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
                    
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                self.connection_status.config(text="‚ùå –û—à–∏–±–∫–∞", fg=ModernColors.ERROR)
        
        async_manager.run_async(connect_async)
    
    def _validate_config(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.server_url_var.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞")
            return False
        
        if not self.domain_var.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω")
            return False
        
        if not self.use_kerberos_var.get():
            if not self.username_var.get().strip():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
            
            if not self.password_var.get().strip():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
                return False
        
        return True
    
    def _create_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –≤ FreeIPA"""
        group_name = self.new_group_name_var.get().strip()
        if not group_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
            return
        
        if not self.freeipa_integration:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ FreeIPA")
            return
        
        async def create_group_async():
            try:
                description = self.new_group_desc_var.get().strip() or f"–ì—Ä—É–ø–ø–∞ {group_name}"
                self._log_result(f"‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_name}...")
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ FreeIPA –∫–ª–∏–µ–Ω—Ç
                result = await self.freeipa_integration.freeipa_client.create_group(group_name, description)
                
                if result:
                    self._log_result(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} —Å–æ–∑–¥–∞–Ω–∞")
                    # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
                    self.new_group_name_var.set("")
                    self.new_group_desc_var.set("")
                else:
                    self._log_result(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_name}")
                    
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        
        async_manager.run_async(create_group_async)
    
    def _create_user(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FreeIPA"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        uid = self.new_user_uid_var.get().strip()
        givenname = self.new_user_givenname_var.get().strip()
        sn = self.new_user_sn_var.get().strip()
        
        if not uid:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        if not givenname:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        if not sn:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        email = self.new_user_email_var.get().strip()
        if email and '@' not in email:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
            return
        
        if not self.freeipa_integration:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ FreeIPA")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                  f"–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{uid}' ({givenname} {sn})?"):
            return
        
        async def create_user_async():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π
                password = self.new_user_password_var.get().strip()
                title = self.new_user_title_var.get().strip()
                department = self.new_user_department_var.get().strip()
                
                self._log_result(f"üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}...")
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è FreeIPA
                from ..services.freeipa_client import FreeIPAUser
                
                freeipa_user = FreeIPAUser(
                    uid=uid,
                    givenname=givenname,
                    sn=sn,
                    mail=email if email else None,
                    userpassword=password if password else None,
                    title=title if title else None,
                    department=department if department else None
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FreeIPA —Å–µ—Ä–≤–∏—Å
                loop = asyncio.get_event_loop()
                result = await loop.run_in_executor(
                    None,
                    self.freeipa_integration.freeipa_service.create_user,
                    freeipa_user
                )
                
                if result:
                    self._log_result(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Å–æ–∑–¥–∞–Ω")
                    if email:
                        self._log_result(f"üìß Email: {email}")
                    if title:
                        self._log_result(f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {title}")
                    if department:
                        self._log_result(f"üè¢ –û—Ç–¥–µ–ª: {department}")
                    
                    # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                    self._clear_user_fields()
                    
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ FreeIPA")
                else:
                    self._log_result(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
                    
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        async_manager.run_async(create_user_async)
    
    def _clear_user_fields(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.new_user_uid_var.set("")
        self.new_user_givenname_var.set("")
        self.new_user_sn_var.set("")
        self.new_user_email_var.set("")
        self.new_user_password_var.set("")
        self.new_user_title_var.set("")
        self.new_user_department_var.set("")
    
    def _get_freeipa_groups(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏–∑ FreeIPA –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        if not self.freeipa_integration:
            self._log_result("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ FreeIPA")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ —Ç–∞–±–ª–∏—Ü–µ
        self._refresh_groups_list()
            
        async def get_freeipa_groups_async():
            try:
                self._log_result("üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏–∑ FreeIPA...")
                groups = await self.freeipa_integration.freeipa_client.get_groups()
                self._log_result(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø –∏–∑ FreeIPA")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã
                user_groups = []
                for group in groups:
                    if isinstance(group, dict):
                        group_name = group.get('cn', [group.get('group_name', 'Unknown')])[0] if isinstance(group.get('cn'), list) else group.get('cn', 'Unknown')
                    else:
                        group_name = str(group)
                    
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                    system_groups = ['admins', 'editors', 'ipausers', 'trust admins', 'default smb group', 'domain admins', 'domain users']
                    if group_name.lower() not in [name.lower() for name in system_groups]:
                        user_groups.append(group_name)
                        self._log_result(f"  üîó {group_name}")
                
                if not user_groups:
                    self._log_result("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    self._log_result("ÔøΩ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä—É–ø–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ FreeIPA")
                    
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø FreeIPA: {e}")
        
        async_manager.run_async(get_freeipa_groups_async)
    
    def _refresh_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.freeipa_integration:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ FreeIPA")
            return
        
        async def refresh_async():
            try:
                stats = await self.freeipa_integration.get_freeipa_stats()
                
                self.stats_text.delete(1.0, tk.END)
                self.stats_text.insert(tk.END, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FreeIPA:\n")
                self.stats_text.insert(tk.END, "=" * 40 + "\n\n")
                
                if 'error' in stats:
                    self.stats_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}\n")
                else:
                    self.stats_text.insert(tk.END, f"üåê –°–µ—Ä–≤–µ—Ä: {stats['server_url']}\n")
                    self.stats_text.insert(tk.END, f"üè† –î–æ–º–µ–Ω: {stats['domain']}\n")
                    self.stats_text.insert(tk.END, f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if stats['connected'] else '‚ùå'}\n")
                    # –£–±—Ä–∞–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã
                    self.stats_text.insert(tk.END, f"üìÅ –ì—Ä—É–ø–ø: {stats['groups_count']}\n")
                
                self.stats_text.insert(tk.END, f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n")
                
            except Exception as e:
                self.stats_text.delete(1.0, tk.END)
                self.stats_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}\n")
        
        async_manager.run_async(refresh_async)
    
    def _compare_groups(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –º–µ–∂–¥—É Google Workspace –∏ FreeIPA"""
        if not self.freeipa_integration:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ FreeIPA")
            return
        
        async def compare_async():
            try:
                self._log_result("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –º–µ–∂–¥—É Google Workspace –∏ FreeIPA...")
                
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ Google Workspace
                google_groups = []
                if self.group_service and hasattr(self.group_service, 'get_all_groups'):
                    google_groups = await self.group_service.get_all_groups()
                
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ FreeIPA
                freeipa_groups = await self.freeipa_integration.freeipa_client.get_groups()
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–º–µ–Ω –≥—Ä—É–ø–ø –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                google_group_names = set()
                for group in google_groups:
                    if isinstance(group, dict):
                        name = group.get('name', group.get('email', ''))
                        if name:
                            google_group_names.add(name.lower())
                
                freeipa_group_names = set()
                for group in freeipa_groups:
                    if isinstance(group, dict):
                        name = group.get('cn', [group.get('group_name', '')])[0]
                        if name:
                            freeipa_group_names.add(name.lower())
                    else:
                        freeipa_group_names.add(str(group).lower())
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
                in_both = google_group_names & freeipa_group_names
                only_in_google = google_group_names - freeipa_group_names
                only_in_freeipa = freeipa_group_names - google_group_names
                
                self.stats_text.delete(1.0, tk.END)
                self.stats_text.insert(tk.END, "üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø:\n")
                self.stats_text.insert(tk.END, "=" * 40 + "\n\n")
                
                self.stats_text.insert(tk.END, f"üìä Google Workspace: {len(google_group_names)} –≥—Ä—É–ø–ø\n")
                self.stats_text.insert(tk.END, f"üìä FreeIPA: {len(freeipa_group_names)} –≥—Ä—É–ø–ø\n")
                self.stats_text.insert(tk.END, f"üîó –í –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö: {len(in_both)}\n")
                self.stats_text.insert(tk.END, f"üü¢ –¢–æ–ª—å–∫–æ –≤ Google: {len(only_in_google)}\n")
                self.stats_text.insert(tk.END, f"üü° –¢–æ–ª—å–∫–æ –≤ FreeIPA: {len(only_in_freeipa)}\n\n")
                
                if only_in_google:
                    self.stats_text.insert(tk.END, "ÔøΩ –ì—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –≤ Google (–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ FreeIPA):\n")
                    for group_name in sorted(list(only_in_google))[:15]:
                        self.stats_text.insert(tk.END, f"  üìÅ {group_name}\n")
                    if len(only_in_google) > 15:
                        self.stats_text.insert(tk.END, f"  ... –∏ –µ—â–µ {len(only_in_google) - 15}\n")
                
                if only_in_freeipa:
                    self.stats_text.insert(tk.END, "\nÔøΩ –ì—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –≤ FreeIPA:\n")
                    for group_name in sorted(list(only_in_freeipa))[:10]:
                        self.stats_text.insert(tk.END, f"  üîó {group_name}\n")
                    if len(only_in_freeipa) > 10:
                        self.stats_text.insert(tk.END, f"  ... –∏ –µ—â–µ {len(only_in_freeipa) - 10}\n")
                        
                self.stats_text.insert(tk.END, f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n")
                
            except Exception as e:
                self.stats_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}\n")
        
        async_manager.run_async(compare_async)
    
    def _export_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path and self.config:
            try:
                self.config.to_file(file_path)
                self._log_result(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_path}")
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def _import_settings(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self._load_config_from_file()
    
    def _reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"):
            self.server_url_var.set("")
            self.domain_var.set("")
            self.username_var.set("")
            self.password_var.set("")
            self.use_kerberos_var.set(False)
            self.verify_ssl_var.set(True)
            
            self._log_result("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def _refresh_groups_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø FreeIPA"""
        if not self.freeipa_integration:
            self._log_result("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ FreeIPA")
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ FreeIPA")
            return
            
        async def refresh_groups_async():
            try:
                self._log_result("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø FreeIPA...")
                
                # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
                for item in self.groups_tree.get_children():
                    self.groups_tree.delete(item)
                
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ FreeIPA
                groups = await self.freeipa_integration.freeipa_client.get_groups()
                
                if not groups:
                    self._log_result("‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    self.groups_count_label.config(text="0")
                    return
                
                # –°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
                system_groups = [
                    'admins', 'editors', 'ipausers', 'trust admins',
                    'default smb group', 'domain admins', 'domain users'
                ]
                actual_groups = []
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
                for group in groups:
                    if isinstance(group, dict):
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                        group_name = group.get('cn', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'])[0] if isinstance(group.get('cn'), list) else group.get('cn', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        description = group.get('description', [''])[0] if isinstance(group.get('description'), list) else group.get('description', '')
                        members = group.get('member', [])
                        members_count = len(members) if isinstance(members, list) else 0
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º –≥—Ä—É–ø–ø—ã
                        group_name = str(group)
                        description = ""
                        members_count = 0
                    
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                    if group_name.lower() not in [name.lower() for name in system_groups]:
                        actual_groups.append(group)
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Treeview
                        self.groups_tree.insert('', 'end', values=(
                            group_name,
                            description,
                            members_count
                        ))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≥—Ä—É–ø–ø
                self.groups_count_label.config(text=str(len(actual_groups)))
                if actual_groups:
                    self._log_result(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(actual_groups)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥—Ä—É–ø–ø –∏–∑ FreeIPA")
                    for group in actual_groups[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥—Ä—É–ø–ø –≤ –ª–æ–≥–µ
                        if isinstance(group, dict):
                            name = group.get('cn', ['Unknown'])[0] if isinstance(group.get('cn'), list) else group.get('cn', 'Unknown')
                        else:
                            name = str(group)
                        self._log_result(f"  üîó {name}")
                    if len(actual_groups) > 5:
                        self._log_result(f"  ... –∏ –µ—â–µ {len(actual_groups) - 5} –≥—Ä—É–ø–ø")
                else:
                    self._log_result("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ FreeIPA")
                
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
                self.groups_count_label.config(text="0")
        
        async_manager.run_async(refresh_groups_async)
    
    def _on_group_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ"""
        selection = self.groups_tree.selection()
        if not selection:
            return
        
        item = self.groups_tree.item(selection[0])
        group_name = item['values'][0]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self._show_group_context_menu(event, group_name)
    
    def _show_group_context_menu(self, event, group_name: str):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        context_menu = tk.Menu(self, tearoff=0)
        context_menu.add_command(
            label="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã",
            command=lambda: self._show_group_details(group_name)
        )
        context_menu.add_separator()
        context_menu.add_command(
            label="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
            command=lambda: self._manage_group_members(group_name)
        )
        context_menu.add_separator()
        context_menu.add_command(
            label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            command=self._refresh_groups_list
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        try:
            context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            context_menu.grab_release()
    
    def _manage_group_members(self, group_name: str):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã"""
        try:
            from .group_members_management import show_group_members_management
            
            # –ü–æ–ª—É—á–∞–µ–º FreeIPA —Å–µ—Ä–≤–∏—Å
            freeipa_service = None
            if self.freeipa_integration and hasattr(self.freeipa_integration, 'freeipa_client'):
                freeipa_service = self.freeipa_integration.freeipa_client
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            members_window = show_group_members_management(
                master=self,
                group_id=group_name,
                group_name=group_name,
                google_service=self.group_service,
                freeipa_service=freeipa_service
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
            self.wait_window(members_window)
            self._refresh_groups_list()
            
        except Exception as e:
            self._log_result(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: {e}")
    
    def _show_group_details(self, group_name: str):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
        if not self.freeipa_integration:
            return
        
        async def get_group_details_async():
            try:
                self._log_result(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ '{group_name}'...")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                group_info = await self.freeipa_integration.freeipa_client.get_group(group_name)
                
                if group_info:
                    details = f"""
üìÅ –ì—Ä—É–ø–ø–∞: {group_name}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {group_info.get('description', [''])[0] if isinstance(group_info.get('description'), list) else group_info.get('description', '')}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(group_info.get('member', []))}
üè∑Ô∏è GID: {group_info.get('gidnumber', [''])[0] if isinstance(group_info.get('gidnumber'), list) else group_info.get('gidnumber', '')}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {group_info.get('ipauniqueid', [''])[0] if isinstance(group_info.get('ipauniqueid'), list) else group_info.get('ipauniqueid', '')}

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:"""
                    
                    members = group_info.get('member', [])
                    if members:
                        for member in members[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ DN
                            if isinstance(member, str) and 'uid=' in member:
                                username = member.split('uid=')[1].split(',')[0]
                                details += f"\n  ‚Ä¢ {username}"
                            else:
                                details += f"\n  ‚Ä¢ {member}"
                        
                        if len(members) > 10:
                            details += f"\n  ... –∏ –µ—â–µ {len(members) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    else:
                        details += "\n  (–≥—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞)"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
                    detail_window = tk.Toplevel(self)
                    detail_window.title(f"–î–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã: {group_name}")
                    detail_window.geometry("500x400")
                    detail_window.configure(bg=ModernColors.BACKGROUND)
                    
                    text_widget = tk.Text(
                        detail_window,
                        bg=ModernColors.SURFACE,
                        fg=ModernColors.TEXT_PRIMARY,
                        font=('Consolas', 10),
                        wrap='word'
                    )
                    text_widget.pack(fill='both', expand=True, padx=10, pady=10)
                    text_widget.insert('1.0', details)
                    text_widget.config(state='disabled')
                    
                    self._log_result(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ '{group_name}' –ø–æ–ª—É—á–µ–Ω–∞")
                else:
                    self._log_result(f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ '{group_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
            except Exception as e:
                self._log_result(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ '{group_name}': {e}")
        
        async_manager.run_async(get_group_details_async)
    
    def _log_result(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Ä–∞–∑—Ä—É—à–µ–Ω
        try:
            if hasattr(self, 'results_text') and self.results_text.winfo_exists():
                self.results_text.insert(tk.END, log_message)
                self.results_text.see(tk.END)
        except tk.TclError:
            # –í–∏–¥–∂–µ—Ç —É–∂–µ —Ä–∞–∑—Ä—É—à–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –≤ logger
        logger.info(message)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.freeipa_integration:
            async def disconnect_async():
                await self.freeipa_integration.disconnect()
            
            try:
                async_manager.run_async(disconnect_async)
            except:
                pass
        
        self.destroy()


def open_freeipa_management(parent, user_service=None, group_service=None):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FreeIPA"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FreeIPA –º–æ–¥—É–ª–µ–π
    if not FREEIPA_MODULES_AVAILABLE:
        from tkinter import messagebox
        
        error_msg = (
            "‚ùå FreeIPA –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
            f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {FREEIPA_IMPORT_ERROR}\n\n"
            "üîß –†–ï–®–ï–ù–ò–Ø:\n\n"
            "1Ô∏è‚É£ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å Kerberos:\n"
            "   ‚Ä¢ –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Windows\n"
            "   ‚Ä¢ FreeIPA –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å\n"
            "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
            "2Ô∏è‚É£ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏:\n"
            "   ‚Ä¢ pip install python-freeipa requests-kerberos\n\n"
            "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: test_freeipa_connection.py"
        )
        
        messagebox.showerror("FreeIPA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", error_msg)
        return None
    
    try:
        window = FreeIPAManagementWindow(parent, user_service, group_service)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        window.protocol("WM_DELETE_WINDOW", window.on_closing)
        
        return window
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ FreeIPA: {e}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Kerberos
        if "kerberos" in str(e).lower() or "kfw" in str(e).lower():
            from tkinter import messagebox
            messagebox.showwarning(
                "FreeIPA - –ü—Ä–æ–±–ª–µ–º–∞ —Å Kerberos",
                "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kerberos\n\n"
                "üîß –†–ï–®–ï–ù–ò–ï:\n"
                "FreeIPA –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –ë–ï–ó Kerberos\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å\n\n"
                "üí° –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤: https://ipa001.infra.int.sputnik8.com/"
            )
        else:
            from tkinter import messagebox
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ FreeIPA: {e}")
        
        return None
