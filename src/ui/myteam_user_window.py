# -*- coding: utf-8 -*-
"""
–û–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ú–æ–µ–π –ö–æ–º–∞–Ω–¥–µ" (MyTeam)
"""

import tkinter as tk
from tkinter import messagebox, scrolledtext, ttk
import threading
from typing import Optional, Callable

from .ui_components import ModernColors, center_window
from .modern_styles import (
    apply_modern_window_style, CompactFrame, CompactLabel, 
    CompactEntry, CompactButton, create_title_section
)
from ..api.myteam_api import MyTeamAPI, MyTeamUser, MyTeamApiConfig, validate_myteam_user_data


class MyTeamUserWindow(tk.Toplevel):
    """
    –û–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ú–æ–µ–π –ö–æ–º–∞–Ω–¥–µ"
    """
    
    def __init__(self, master, api_token: str = "", on_created: Optional[Callable] = None):
        super().__init__(master)
        self.title('–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ú–æ–µ–π –ö–æ–º–∞–Ω–¥–µ"')
        self.geometry('800x700')
        self.resizable(False, False)
        self.api_token = api_token
        self.on_created = on_created
        self.transient(master)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        apply_modern_window_style(self, 'dialog')
        
        if master:
            center_window(self, master)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
        self.api_client = None
        self._init_api_client()
        
        self._create_widgets()
        self._test_api_connection()

    def _init_api_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            config = MyTeamApiConfig(
                base_url="https://sputnik8.ismyteam.ru",
                api_token=self.api_token,
                timeout=30
            )
            self.api_client = MyTeamAPI(config)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –æ–∫–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = create_title_section(self, 'üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ú–æ–µ–π –ö–æ–º–∞–Ω–¥–µ"')
        header_frame.pack(fill='x', padx=20, pady=(20, 10))

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_container = CompactFrame(self, padding_type='container')
        main_container.pack(fill='both', expand=True, padx=20, pady=10)

        # API —Å—Ç–∞—Ç—É—Å
        self._create_api_status_section(main_container)
        
        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._create_user_form(main_container)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_buttons(main_container)
        
        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self._create_result_area(main_container)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self._create_close_button(main_container)

    def _create_api_status_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞ API"""
        status_frame = CompactFrame(parent, padding_type='section')
        status_frame.pack(fill='x', pady=(0, 15))
        
        CompactLabel(status_frame, text='üîó –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', 
                    font_type='section_header').pack(anchor='w')
        
        self.status_frame = CompactFrame(status_frame, padding_type='minimal')
        self.status_frame.pack(fill='x', pady=(5, 0))
        
        self.status_label = CompactLabel(self.status_frame, text='‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', 
                                        font_type='info')
        self.status_label.pack(anchor='w')
        
        # –ü–æ–ª–µ –¥–ª—è API —Ç–æ–∫–µ–Ω–∞
        token_frame = CompactFrame(status_frame, padding_type='minimal')
        token_frame.pack(fill='x', pady=(10, 0))
        
        CompactLabel(token_frame, text='API –¢–æ–∫–µ–Ω:', font_type='label').pack(anchor='w')
        self.entry_token = CompactEntry(token_frame, width_type='wide_entry')
        self.entry_token.pack(fill='x', pady=(2, 0))
        
        if self.api_token:
            self.entry_token.insert(0, self.api_token)
        else:
            self.entry_token.insert(0, "–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ \"–ú–æ–µ–π –ö–æ–º–∞–Ω–¥–µ\"")
            self.entry_token.bind('<FocusIn>', self._clear_token_placeholder)
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        CompactButton(token_frame, text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', 
                     command=self._test_api_connection, style='secondary',
                     width_type='button_width').pack(pady=(5, 0), anchor='w')

    def _create_user_form(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        form_frame = CompactFrame(parent, padding_type='section')
        form_frame.pack(fill='x', pady=(0, 15))
        
        CompactLabel(form_frame, text='üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', 
                    font_type='section_header').pack(anchor='w')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        fields_frame = CompactFrame(form_frame, padding_type='form')
        fields_frame.pack(fill='x', pady=(10, 0))
        
        # –ò–º—è
        CompactLabel(fields_frame, text='–ò–º—è *:', font_type='label').grid(
            row=0, column=0, sticky='e', padx=(0, 10), pady=5)
        self.entry_first_name = CompactEntry(fields_frame, width_type='entry_width')
        self.entry_first_name.grid(row=0, column=1, sticky='ew', pady=5)
        
        # –§–∞–º–∏–ª–∏—è
        CompactLabel(fields_frame, text='–§–∞–º–∏–ª–∏—è *:', font_type='label').grid(
            row=1, column=0, sticky='e', padx=(0, 10), pady=5)
        self.entry_last_name = CompactEntry(fields_frame, width_type='entry_width')
        self.entry_last_name.grid(row=1, column=1, sticky='ew', pady=5)
        
        # Email
        CompactLabel(fields_frame, text='Email *:', font_type='label').grid(
            row=2, column=0, sticky='e', padx=(0, 10), pady=5)
        self.entry_email = CompactEntry(fields_frame, width_type='entry_width')
        self.entry_email.grid(row=2, column=1, sticky='ew', pady=5)
        
        # Username (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        CompactLabel(fields_frame, text='Username:', font_type='label').grid(
            row=3, column=0, sticky='e', padx=(0, 10), pady=5)
        self.entry_username = CompactEntry(fields_frame, width_type='entry_width')
        self.entry_username.grid(row=3, column=1, sticky='ew', pady=5)
        
        # –¢–µ–ª–µ—Ñ–æ–Ω
        CompactLabel(fields_frame, text='–¢–µ–ª–µ—Ñ–æ–Ω:', font_type='label').grid(
            row=4, column=0, sticky='e', padx=(0, 10), pady=5)
        self.entry_phone = CompactEntry(fields_frame, width_type='entry_width')
        self.entry_phone.grid(row=4, column=1, sticky='ew', pady=5)
        
        # –û—Ç–¥–µ–ª
        CompactLabel(fields_frame, text='–û—Ç–¥–µ–ª:', font_type='label').grid(
            row=5, column=0, sticky='e', padx=(0, 10), pady=5)
        self.entry_department = CompactEntry(fields_frame, width_type='entry_width')
        self.entry_department.grid(row=5, column=1, sticky='ew', pady=5)
        
        # –î–æ–ª–∂–Ω–æ—Å—Ç—å
        CompactLabel(fields_frame, text='–î–æ–ª–∂–Ω–æ—Å—Ç—å:', font_type='label').grid(
            row=6, column=0, sticky='e', padx=(0, 10), pady=5)
        self.entry_position = CompactEntry(fields_frame, width_type='entry_width')
        self.entry_position.grid(row=6, column=1, sticky='ew', pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        fields_frame.columnconfigure(1, weight=1)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username
        self.entry_email.bind('<KeyRelease>', self._update_username)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
        info_label = CompactLabel(form_frame, text='* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 
                                 font_type='info')
        info_label.pack(anchor='w', pady=(5, 0))

    def _create_control_buttons(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        buttons_frame = CompactFrame(parent, padding_type='section')
        buttons_frame.pack(fill='x', pady=(0, 15))
        
        button_container = CompactFrame(buttons_frame, padding_type='minimal')
        button_container.pack()
        
        self.btn_create = CompactButton(button_container, text='‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
                                       command=self._create_user, style='primary',
                                       width_type='wide_button')
        self.btn_create.pack(side='left', padx=(0, 10))
        
        CompactButton(button_container, text='üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É', 
                     command=self._clear_form, style='secondary',
                     width_type='button_width').pack(side='left')

    def _create_result_area(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        result_frame = CompactFrame(parent, padding_type='section')
        result_frame.pack(fill='both', expand=True, pady=(0, 15))
        
        CompactLabel(result_frame, text='üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:', 
                    font_type='section_header').pack(anchor='w')
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.txt_result = scrolledtext.ScrolledText(
            result_frame, 
            height=8, 
            wrap=tk.WORD, 
            font=('Consolas', 9),
            bg='#f8f9fa',
            fg='#495057',
            relief='flat',
            bd=1
        )
        self.txt_result.pack(fill='both', expand=True, pady=(10, 0))
        self.txt_result.config(state=tk.DISABLED)

    def _create_close_button(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è"""
        close_frame = CompactFrame(parent, padding_type='minimal')
        close_frame.pack(fill='x', pady=(0, 10))
        
        CompactButton(close_frame, text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', command=self.destroy, 
                     style='secondary', width_type='button_width').pack()

    def _clear_token_placeholder(self, event=None):
        """–û—á–∏—â–∞–µ—Ç placeholder –≤ –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞"""
        current_text = self.entry_token.get()
        if current_text.startswith("–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω"):
            self.entry_token.delete(0, tk.END)

    def _update_username(self, event=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç username –Ω–∞ –æ—Å–Ω–æ–≤–µ email"""
        email = self.entry_email.get().strip()
        if email and '@' in email:
            username = email.split('@')[0]
            self.entry_username.delete(0, tk.END)
            self.entry_username.insert(0, username)

    def _test_api_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def test_connection():
            try:
                self.status_label.config(text='‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', fg='#6c757d')
                self.update()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
                token = self.entry_token.get().strip()
                if token and not token.startswith("–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω"):
                    self.api_token = token
                    self._init_api_client()
                
                if not self.api_client:
                    self.status_label.config(text='‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', fg='#dc3545')
                    return
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                result = self.api_client.test_connection()
                
                if result['success']:
                    accessible_endpoints = [ep for ep, data in result['endpoints'].items() 
                                          if data.get('accessible', False)]
                    auth_required = any(data.get('requires_auth', False) 
                                      for data in result['endpoints'].values())
                    
                    if accessible_endpoints:
                        status_text = f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ({len(accessible_endpoints)} endpoints –¥–æ—Å—Ç—É–ø–Ω—ã)'
                        if auth_required and not self.api_token:
                            status_text += ' - —Ç—Ä–µ–±—É–µ—Ç—Å—è API —Ç–æ–∫–µ–Ω'
                        self.status_label.config(text=status_text, fg='#28a745')
                        self.btn_create.config(state='normal')
                    else:
                        self.status_label.config(text='‚ö†Ô∏è API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', fg='#ffc107')
                        self.btn_create.config(state='disabled')
                else:
                    self.status_label.config(text=f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.get("error", "Unknown")}', fg='#dc3545')
                    self.btn_create.config(state='disabled')
                    
            except Exception as e:
                self.status_label.config(text=f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}', fg='#dc3545')
                self.btn_create.config(state='disabled')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=test_connection, daemon=True).start()

    def _validate_form(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        first_name = self.entry_first_name.get().strip()
        last_name = self.entry_last_name.get().strip()
        email = self.entry_email.get().strip()
        phone = self.entry_phone.get().strip()
        department = self.entry_department.get().strip()
        position = self.entry_position.get().strip()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ API –º–æ–¥—É–ª—è
        validation_result = validate_myteam_user_data(
            email, first_name, last_name, phone, department, position
        )
        
        if not validation_result['valid']:
            error_message = "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(validation_result['errors'])
            messagebox.showwarning('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', error_message)
            return False
        
        return True

    def _create_user(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
        if not self._validate_form():
            return
        
        if not self.api_client:
            messagebox.showerror('–û—à–∏–±–∫–∞', 'API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
            return
        
        def create_user_async():
            try:
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                self.btn_create.config(state='disabled', text='‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...')
                self.update()
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = MyTeamUser(
                    email=self.entry_email.get().strip(),
                    first_name=self.entry_first_name.get().strip(),
                    last_name=self.entry_last_name.get().strip(),
                    username=self.entry_username.get().strip(),
                    phone=self.entry_phone.get().strip(),
                    department=self.entry_department.get().strip(),
                    position=self.entry_position.get().strip(),
                    is_active=True
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = self.api_client.create_user(user)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._display_result(result)
                
                # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
                if result['success'] and self.on_created:
                    self.on_created()
                
            except Exception as e:
                error_result = {
                    'success': False,
                    'message': f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
                    'error_code': 'unexpected_error'
                }
                self._display_result(error_result)
            
            finally:
                # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
                self.btn_create.config(state='normal', text='‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=create_user_async, daemon=True).start()

    def _display_result(self, result: dict):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.txt_result.config(state=tk.NORMAL)
        self.txt_result.delete(1.0, tk.END)
        
        if result['success']:
            message = f"‚úÖ –£–°–ü–ï–•\n{result['message']}\n\n"
            if 'user_data' in result and result['user_data']:
                message += "–î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                for key, value in result['user_data'].items():
                    message += f"  {key}: {value}\n"
            if 'endpoint_used' in result:
                message += f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π endpoint: {result['endpoint_used']}\n"
        else:
            message = f"‚ùå –û–®–ò–ë–ö–ê\n{result['message']}\n\n"
            if 'error_code' in result:
                message += f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {result['error_code']}\n"
            if 'details' in result:
                message += f"–î–µ—Ç–∞–ª–∏: {result['details']}\n"
        
        self.txt_result.insert(tk.END, message)
        self.txt_result.config(state=tk.DISABLED)

    def _clear_form(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É"""
        self.entry_first_name.delete(0, tk.END)
        self.entry_last_name.delete(0, tk.END)
        self.entry_email.delete(0, tk.END)
        self.entry_username.delete(0, tk.END)
        self.entry_phone.delete(0, tk.END)
        self.entry_department.delete(0, tk.END)
        self.entry_position.delete(0, tk.END)
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.txt_result.config(state=tk.NORMAL)
        self.txt_result.delete(1.0, tk.END)
        self.txt_result.config(state=tk.DISABLED)


def open_myteam_user_window(master=None, api_token: str = "", on_created: Optional[Callable] = None):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ú–æ–µ–π –ö–æ–º–∞–Ω–¥–µ"
    
    Args:
        master: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        api_token: API —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        on_created: Callback —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        window = MyTeamUserWindow(master, api_token, on_created)
        return window
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None