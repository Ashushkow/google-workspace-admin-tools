#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º SPUT–ùIK (–æ–±—â–∏–π).
"""

import tkinter as tk
from tkinter import messagebox, ttk, filedialog
from typing import Any, Optional, List, Dict
import threading
import os
from datetime import datetime

from .ui_components import ModernColors, ModernButton, center_window
from ..utils.file_paths import get_export_path


class SputnikCalendarWindow(tk.Toplevel):
    """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º SPUT–ùIK (–æ–±—â–∏–π)"""
    
    def __init__(self, master=None):
        super().__init__(master)
        self.master_window = master
        self.calendar_manager = None
        self.is_window_active = True  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title('üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º SPUT–ùIK (–æ–±—â–∏–π)')
        self.geometry('900x700')
        self.resizable(True, True)
        self.configure(bg=ModernColors.BACKGROUND)
        if master:
            self.transient(master)
            center_window(self, master)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.protocol("WM_DELETE_WINDOW", self.on_window_close)
        
        self.setup_ui()
        self.initialize_calendar()
    
    def on_window_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.is_window_active = False
        self.destroy()
    
    def safe_update_ui(self, update_func):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞"""
        if not self.is_window_active:
            return
        
        try:
            if self.winfo_exists():
                update_func()
        except tk.TclError:
            # –û–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            self.is_window_active = False
        except Exception:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ
            self.is_window_active = False
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        header_frame.pack(fill='x', padx=15, pady=(15, 10))
        
        title_label = tk.Label(
            header_frame,
            text='üéØ –ö–ê–õ–ï–ù–î–ê–†–¨ SPUT–ùIK (–û–ë–©–ò–ô)',
            font=('Arial', 18, 'bold'),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        )
        title_label.pack(side='left')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        self.info_label = tk.Label(
            header_frame,
            text='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...',
            font=('Arial', 10),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_SECONDARY
        )
        self.info_label.pack(side='right')
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        control_frame.pack(fill='x', padx=15, pady=(0, 10))
        
        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
        left_buttons = tk.Frame(control_frame, bg=ModernColors.BACKGROUND)
        left_buttons.pack(side='left')
        
        ModernButton(
            left_buttons,
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            command=self.refresh_members,
            style='primary'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            left_buttons,
            text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞',
            command=self.add_member_dialog,
            style='success'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            left_buttons,
            text='üìÅ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
            command=self.bulk_add_members,
            style='info'
        ).pack(side='left', padx=(0, 8))
        
        # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
        right_buttons = tk.Frame(control_frame, bg=ModernColors.BACKGROUND)
        right_buttons.pack(side='right')
        
        ModernButton(
            right_buttons,
            text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            command=self.show_statistics,
            style='secondary'
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            right_buttons,
            text='üíæ –≠–∫—Å–ø–æ—Ä—Ç',
            command=self.export_members,
            style='secondary'
        ).pack(side='left', padx=(0, 8))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        main_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        main_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_frame = tk.Frame(main_frame, bg=ModernColors.BACKGROUND)
        search_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(
            search_frame,
            text='üîç –ü–æ–∏—Å–∫:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(side='left', padx=(0, 5))
        
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_members)
        search_entry = tk.Entry(
            search_frame,
            textvariable=self.search_var,
            font=('Arial', 10),
            width=30
        )
        search_entry.pack(side='left', padx=(0, 10))
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
        tk.Label(
            search_frame,
            text='–†–æ–ª—å:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(side='left', padx=(0, 5))
        
        self.role_filter = ttk.Combobox(
            search_frame,
            values=['–í—Å–µ', '–í–ª–∞–¥–µ–ª–µ—Ü', '–†–µ–¥–∞–∫—Ç–æ—Ä', '–ß–∏—Ç–∞—Ç–µ–ª—å'],
            state='readonly',
            width=12
        )
        self.role_filter.set('–í—Å–µ')
        self.role_filter.bind('<<ComboboxSelected>>', self.filter_members)
        self.role_filter.pack(side='left')
        
        # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        list_frame = tk.Frame(main_frame, bg=ModernColors.BACKGROUND)
        list_frame.pack(fill='both', expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Treeview
        columns = ('email', 'role', 'actions')
        self.members_tree = ttk.Treeview(
            list_frame,
            columns=columns,
            show='headings',
            height=15,
            selectmode='extended'
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.members_tree.heading('email', text='üìß Email —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        self.members_tree.heading('role', text='üë§ –†–æ–ª—å')
        self.members_tree.heading('actions', text='‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.members_tree.column('email', width=400, anchor='w')
        self.members_tree.column('role', width=150, anchor='center')
        self.members_tree.column('actions', width=200, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(list_frame, orient='vertical', command=self.members_tree.yview)
        self.members_tree.configure(yscrollcommand=scrollbar.set)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.members_tree.bind('<Double-1>', self.on_member_double_click)
        self.members_tree.bind('<Button-3>', self.show_context_menu)
        
        # –£–ø–∞–∫–æ–≤–∫–∞
        self.members_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", command=self.change_member_role)
        self.context_menu.add_command(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", command=self.remove_selected_member)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å email", command=self.copy_email)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        status_frame = tk.Frame(self, bg=ModernColors.SURFACE)
        status_frame.pack(fill='x', side='bottom')
        
        self.status_label = tk.Label(
            status_frame,
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            bg=ModernColors.SURFACE,
            fg=ModernColors.TEXT_SECONDARY,
            anchor='w',
            padx=10,
            pady=5
        )
        self.status_label.pack(side='left', fill='x', expand=True)
        
        self.members_count_label = tk.Label(
            status_frame,
            text='–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0',
            bg=ModernColors.SURFACE,
            fg=ModernColors.TEXT_SECONDARY,
            padx=10,
            pady=5
        )
        self.members_count_label.pack(side='right')
        
        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        load_more_frame = tk.Frame(main_frame, bg=ModernColors.BACKGROUND)
        load_more_frame.pack(fill='x', pady=(5, 10))
        
        self.load_more_button = tk.Button(
            load_more_frame,
            text='üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (100‚Üí500)',
            command=self.load_more_users,
            bg=ModernColors.PRIMARY,
            fg='white',
            font=('Arial', 9),
            relief='flat',
            padx=10,
            pady=5
        )
        self.load_more_button.pack(anchor='center')
        self.load_more_button.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        
        # ...existing code...
    
    def initialize_calendar(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def init_worker():
            try:
                self.safe_update_ui(lambda: self.status_label.config(text='–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK...'))
                
                from ..api.sputnik_calendar import create_sputnik_calendar_manager
                self.calendar_manager = create_sputnik_calendar_manager()
                
                if self.calendar_manager:
                    calendar_info = self.calendar_manager.get_calendar_info()
                    
                    self.safe_update_ui(lambda: self.info_label.config(
                        text=f'–í–ª–∞–¥–µ–ª–µ—Ü: {calendar_info.owner if calendar_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}'
                    ))
                    
                    self.safe_update_ui(lambda: self.status_label.config(text='‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK'))
                    self.safe_update_ui(self.load_members)
                else:
                    self.safe_update_ui(lambda: self.status_label.config(text='‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é'))
                    self.safe_update_ui(lambda: messagebox.showerror(
                        "–û—à–∏–±–∫–∞",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK.\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."
                    ))
                    
            except Exception as e:
                self.safe_update_ui(lambda: self.status_label.config(text='‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'))
                self.safe_update_ui(lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:\n{str(e)}"))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=init_worker, daemon=True).start()
    
    def load_members(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        if not self.calendar_manager:
            return
        
        def load_worker():
            try:
                self.safe_update_ui(lambda: self.status_label.config(text='–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...'))
                
                members = self.calendar_manager.get_members()
                
                self.safe_update_ui(lambda: self._update_members_list(members))
                self.safe_update_ui(lambda: self.status_label.config(text=f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}'))
                
            except Exception as e:
                self.safe_update_ui(lambda: self.status_label.config(text='‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'))
                self.safe_update_ui(lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{str(e)}"))
        
        threading.Thread(target=load_worker, daemon=True).start()
    
    def _update_members_list(self, members):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ UI"""
        if not self.is_window_active:
            return
            
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
            selected_items = self.members_tree.selection()
            selected_emails = []
            for item in selected_items:
                values = self.members_tree.item(item)['values']
                if values:
                    selected_emails.append(values[0])
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            for item in self.members_tree.get_children():
                self.members_tree.delete(item)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for member in members:
                role_display = self._translate_role(member.role)
                actions = "–ò–∑–º–µ–Ω–∏—Ç—å ‚Ä¢ –£–¥–∞–ª–∏—Ç—å"
                
                item_id = self.members_tree.insert('', 'end', values=(
                    member.email,
                    role_display,
                    actions
                ))
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä, –µ—Å–ª–∏ email –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ä–∞–Ω–µ–µ
                if member.email in selected_emails:
                    self.members_tree.selection_add(item_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            self.members_count_label.config(text=f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}')
            
        except tk.TclError:
            # –í–∏–¥–∂–µ—Ç –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω
            self.is_window_active = False
        except Exception:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
            self.is_window_active = False
        self.filter_members()
    
    def _translate_role(self, role: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        translations = {
            'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü',
            'writer': '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä', 
            'reader': 'üëÅÔ∏è –ß–∏—Ç–∞—Ç–µ–ª—å',
            'freeBusyReader': '‚è∞ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏'
        }
        return translations.get(role, role)
    
    def filter_members(self, *args):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É –∏ —Ä–æ–ª–∏"""
        search_text = self.search_var.get().lower().strip()
        role_filter = self.role_filter.get()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        all_items = []
        for item in self.members_tree.get_children():
            values = self.members_tree.item(item)['values']
            all_items.append((item, values))
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for item, _ in all_items:
            self.members_tree.delete(item)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        visible_count = 0
        for item, values in all_items:
            email, role, actions = values
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–∏—Å–∫–∞
            if search_text:
                # –ü–æ–∏—Å–∫ –ø–æ email (–¥–æ @ –∏ –ø–æ—Å–ª–µ @)
                email_parts = email.lower().split('@')
                name_part = email_parts[0] if email_parts else ''
                domain_part = email_parts[1] if len(email_parts) > 1 else ''
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏
                if not (search_text in email.lower() or 
                       search_text in name_part or 
                       search_text in domain_part or
                       any(search_text in part for part in name_part.split('.'))):
                    continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
            if role_filter != '–í—Å–µ':
                if role_filter not in role:
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ
            new_item = self.members_tree.insert('', 'end', values=values)
            visible_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        total_count = len(all_items)
        if visible_count != total_count:
            if search_text:
                self.members_count_label.config(text=f'–ù–∞–π–¥–µ–Ω–æ: {visible_count} –∏–∑ {total_count} (–ø–æ–∏—Å–∫: "{search_text}")')
            else:
                self.members_count_label.config(text=f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {visible_count} –∏–∑ {total_count}')
        else:
            self.members_count_label.config(text=f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_count}')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        if search_text and visible_count == 0:
            self.status_label.config(text=f'üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{search_text}"')
    
    def refresh_members(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        self.load_members()
    
    def add_member_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        AddSputnikMemberDialog(self, self.calendar_manager, self.refresh_members)
    
    def bulk_add_members(self):
        """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.calendar_manager:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        BulkAddMembersDialog(self, self.calendar_manager, self.refresh_members)
    
    def change_member_role(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        selection = self.members_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏")
            return
        
        if len(selection) > 1:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            return
        
        item = self.members_tree.item(selection[0])
        values = item.get('values', [])
        if not values:
            return
        
        email = values[0]
        current_role = values[1]
        
        ChangeSputnikRoleDialog(self, self.calendar_manager, email, current_role, self.refresh_members)
    
    def remove_selected_member(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        selection = self.members_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞(–æ–≤) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        emails = []
        for item in selection:
            values = self.members_tree.item(item).get('values', [])
            if values:
                emails.append(values[0])
        
        if not emails:
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if len(emails) == 1:
            message = f"–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {emails[0]} –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è SPUT–ùIK?"
        else:
            message = f"–£–¥–∞–ª–∏—Ç—å {len(emails)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è SPUT–ùIK?"
        
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", message):
            return
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        def remove_worker():
            try:
                self.safe_update_ui(lambda: self.status_label.config(text='–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...'))
                
                successful = 0
                for email in emails:
                    if self.calendar_manager.remove_member(email):
                        successful += 1
                
                self.safe_update_ui(lambda: self.status_label.config(
                    text=f'‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {successful}/{len(emails)}'
                ))
                self.safe_update_ui(self.refresh_members)
                
                if successful == len(emails):
                    self.safe_update_ui(lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"))
                else:
                    self.safe_update_ui(lambda: messagebox.showwarning(
                        "–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö",
                        f"–£–¥–∞–ª–µ–Ω–æ {successful} –∏–∑ {len(emails)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    ))
                    
            except Exception as e:
                self.safe_update_ui(lambda: self.status_label.config(text='‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è'))
                self.safe_update_ui(lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:\n{str(e)}"))
        
        threading.Thread(target=remove_worker, daemon=True).start()
    
    def copy_email(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ email –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        selection = self.members_tree.selection()
        if not selection:
            return
        
        item = self.members_tree.item(selection[0])
        values = item.get('values', [])
        if values:
            email = values[0]
            self.clipboard_clear()
            self.clipboard_append(email)
            self.status_label.config(text=f'üìã Email —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {email}')
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        item = self.members_tree.identify_row(event.y)
        if item:
            self.members_tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)
    
    def on_member_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫—É"""
        self.change_member_role()
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        if not self.calendar_manager:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        SputnikStatisticsWindow(self, self.calendar_manager)
    
    def export_members(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if not self.calendar_manager:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        suggested_filename = f"calendar_members_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        suggested_path = get_export_path(suggested_filename)
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = filedialog.asksaveasfilename(
            initialfile=str(suggested_path),
            title="–≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            defaultextension=".csv",
            filetypes=[
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("Excel —Ñ–∞–π–ª—ã", "*.xlsx"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if not filename:
            return
        
        def export_worker():
            try:
                self.safe_update_ui(lambda: self.status_label.config(text='–≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...'))
                
                members_data = self.calendar_manager.export_members_to_dict()
                
                if filename.endswith('.csv'):
                    self._export_to_csv(members_data, filename)
                elif filename.endswith('.xlsx'):
                    self._export_to_excel(members_data, filename)
                else:
                    self._export_to_csv(members_data, filename)
                
                self.safe_update_ui(lambda: self.status_label.config(text=f'‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}'))
                self.safe_update_ui(lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filename}"))
                
            except Exception as e:
                self.safe_update_ui(lambda: self.status_label.config(text='‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞'))
                self.safe_update_ui(lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}"))
        
        threading.Thread(target=export_worker, daemon=True).start()
    
    def _export_to_csv(self, members_data, filename):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        import csv
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            if members_data:
                fieldnames = members_data[0].keys()
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for member in members_data:
                    writer.writerow(member)
    
    def _export_to_excel(self, members_data, filename):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        try:
            import pandas as pd
            
            df = pd.DataFrame(members_data)
            df.to_excel(filename, index=False)
            
        except ImportError:
            # Fallback –∫ CSV –µ—Å–ª–∏ pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "Pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ."
            )
            csv_filename = filename.replace('.xlsx', '.csv')
            self._export_to_csv(members_data, csv_filename)
    
    def load_more_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 500)"""
        self.load_more_button.config(state='disabled', text='üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...')
        
        def load_more_worker():
            try:
                self.safe_update_ui(lambda: self.loading_label.config(
                    text='üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...',
                    fg='blue'
                ))
                
                # –°–æ–∑–¥–∞–µ–º Directory API —Å–µ—Ä–≤–∏—Å
                from googleapiclient.discovery import build
                credentials = self.calendar_manager.calendar_api.credentials
                directory_service = build('admin', 'directory_v1', credentials=credentials)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_result = directory_service.users().list(
                    domain='sputnik8.com',
                    maxResults=500,  # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                    orderBy='givenName'
                ).execute()
                
                users = users_result.get('users', [])
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                sputnik_users = []
                for user in users:
                    email = user.get('primaryEmail', '')
                    if '@sputnik8.com' in email:
                        full_name = user.get('name', {}).get('fullName', email.split('@')[0])
                        suspended = user.get('suspended', False)
                        
                        sputnik_users.append({
                            'email': email,
                            'name': full_name,
                            'suspended': suspended,
                            'status': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if suspended else '–ê–∫—Ç–∏–≤–µ–Ω'
                        })
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
                sputnik_users.sort(key=lambda x: x['name'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self.users_cache = sputnik_users
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                self.safe_update_ui(lambda: self._update_users_list(sputnik_users))
                self.safe_update_ui(lambda: self.loading_label.config(
                    text=f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sputnik_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)',
                    fg='green'
                ))
                self.safe_update_ui(lambda: self.load_more_button.pack_forget())
                
            except Exception as e:
                self.safe_update_ui(lambda: self.loading_label.config(
                    text=f'‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)[:50]}...',
                    fg='red'
                ))
                self.safe_update_ui(lambda: self.load_more_button.config(
                    state='normal', 
                    text='üì• –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'
                ))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=load_more_worker, daemon=True).start()
    
    # ...existing code...
    
    def on_user_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.users_tree.selection()
        if not selection:
            self.selected_label.config(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞')
            self.add_button.config(state='disabled')
            return
        
        item = self.users_tree.item(selection[0])
        values = item.get('values', [])
        if not values:
            return
        
        name, email, status = values
        name = name.replace('üîó ', '')  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        role_desc = self._get_role_description(self.role_var.get())
        self.selected_label.config(
            text=f'üë§ –í—ã–±—Ä–∞–Ω: {name} ({email})\\nüîê –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫: {role_desc}'
        )
        
        # –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if status == '–£–∂–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ':
            self.add_button.config(state='disabled', text='‚úÖ –£–∂–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ')
        elif status == '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω':
            self.add_button.config(state='disabled', text='‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        else:
            self.add_button.config(state='normal', text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é')
    
    def on_user_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if self.add_button['state'] != 'disabled':
            self.add_member()
    
    def _get_role_description(self, role):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏"""
        descriptions = {
            'reader': 'üëÅÔ∏è –ß–∏—Ç–∞—Ç–µ–ª—å',
            'writer': '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä',
            'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü'
        }
        return descriptions.get(role, role)
    
    def add_member(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        selection = self.users_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        item = self.users_tree.item(selection[0])
        values = item.get('values', [])
        if not values:
            return
        
        name, email, status = values
        name = name.replace('üîó ', '')  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        role = self.role_var.get()
        
        if status == '–£–∂–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ':
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK")
            return
        
        if status == '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω':
            if not messagebox.askyesno(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é?"
            ):
                return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        role_desc = self._get_role_description(role)
        if not messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK?\\n\\n"
            f"Email: {email}\\n"
            f"–†–æ–ª—å: {role_desc}\\n\\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–µ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é –∫–æ–º–∞–Ω–¥—ã."
        ):
            return
        
        def add_worker():
            try:
                success = self.calendar_manager.add_member(email, role, name)
                
                if success:
                    self.safe_update_ui(lambda: messagebox.showinfo(
                        "–£—Å–ø–µ—Ö",
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK\\n\\n"
                        f"Email: {email}\\n"
                        f"–†–æ–ª—å: {role_desc}\\n\\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."
                    ))
                    if self.refresh_callback:
                        self.safe_update_ui(self.refresh_callback)
                    self.safe_update_ui(self.destroy)
                else:
                    self.safe_update_ui(lambda: messagebox.showerror(
                        "–û—à–∏–±–∫–∞",
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.\\n\\n"
                        f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\\n"
                        f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞\\n"
                        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω\\n"
                        f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Google Calendar API"
                    ))
                    
            except Exception as e:
                self.safe_update_ui(lambda: messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}:\\n\\n{str(e)}"
                ))
        
        threading.Thread(target=add_worker, daemon=True).start()


class AddSputnikMemberDialog(tk.Toplevel):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK —Å –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
    
    def __init__(self, parent, calendar_manager, refresh_callback):
        super().__init__(parent)
        self.parent = parent
        self.calendar_manager = calendar_manager
        self.refresh_callback = refresh_callback
        self.domain_users = []
        self.filtered_users = []
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π
        self.loading_cancelled = False
        self.loading_thread = None
        self.users_cache = None  # –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title('–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK')
        self.geometry('580x420')
        self.resizable(True, True)
        self.configure(bg=ModernColors.BACKGROUND)
        self.transient(parent)
        
        center_window(self, parent)
        self.setup_ui()
        self.load_domain_users()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–∏–∞–ª–æ–≥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = tk.Label(
            self,
            text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK',
            font=('Arial', 13, 'bold'),
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY
        )
        header_label.pack(pady=10)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        main_frame.pack(fill='both', expand=True, padx=15, pady=8)
        
        # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        search_frame = tk.Frame(main_frame, bg=ModernColors.BACKGROUND)
        search_frame.pack(fill='x', pady=(0, 8))
        
        tk.Label(
            search_frame,
            text='üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        ).pack(anchor='w', pady=(0, 5))
        
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_users)
        search_entry = tk.Entry(
            search_frame, 
            textvariable=self.search_var,
            font=('Arial', 11), 
            width=50
        )
        search_entry.pack(fill='x', pady=(0, 5))
        search_entry.focus()
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        loading_frame = tk.Frame(search_frame, bg=ModernColors.BACKGROUND)
        loading_frame.pack(fill='x', pady=(0, 5))
        
        self.loading_label = tk.Label(
            loading_frame,
            text='–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ–º–µ–Ω–∞ sputnik8.com...',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_SECONDARY,
            font=('Arial', 9, 'italic')
        )
        self.loading_label.pack(side='left')
        
        self.cancel_button = tk.Button(
            loading_frame,
            text='‚ùå –û—Ç–º–µ–Ω–∞',
            command=self.cancel_loading,
            bg=ModernColors.ERROR,
            fg='white',
            font=('Arial', 8),
            relief='flat',
            padx=8,
            pady=2
        )
        self.cancel_button.pack(side='right')
        self.cancel_button.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        
        # –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        list_frame = tk.Frame(main_frame, bg=ModernColors.BACKGROUND)
        list_frame.pack(fill='both', expand=True, pady=(0, 15))
        
        tk.Label(
            list_frame,
            text='üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        ).pack(anchor='w', pady=(0, 5))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        columns = ('name', 'email', 'status')
        self.users_tree = ttk.Treeview(
            list_frame,
            columns=columns,
            show='headings',
            height=8
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.users_tree.heading('name', text='–ò–º—è')
        self.users_tree.heading('email', text='Email')
        self.users_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        
        self.users_tree.column('name', width=180)
        self.users_tree.column('email', width=250)
        self.users_tree.column('status', width=120)
        
        # Scrollbar –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar = ttk.Scrollbar(list_frame, orient='vertical', command=self.users_tree.yview)
        self.users_tree.configure(yscrollcommand=scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞
        self.users_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.users_tree.bind('<Double-1>', self.on_user_double_click)
        self.users_tree.bind('<<TreeviewSelect>>', self.on_user_select)
        
        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        load_more_frame = tk.Frame(main_frame, bg=ModernColors.BACKGROUND)
        load_more_frame.pack(fill='x', pady=(5, 10))
        
        self.load_more_button = tk.Button(
            load_more_frame,
            text='üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (50‚Üí500)',
            command=self.load_more_users,
            bg=ModernColors.PRIMARY,
            fg='white',
            font=('Arial', 9),
            relief='flat',
            padx=10,
            pady=5
        )
        self.load_more_button.pack(anchor='center')
        self.load_more_button.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        
        # –í—ã–±–æ—Ä —Ä–æ–ª–∏
        role_frame = tk.Frame(main_frame, bg=ModernColors.BACKGROUND)
        role_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(
            role_frame,
            text='üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é:',
            bg=ModernColors.BACKGROUND,
            fg=ModernColors.TEXT_PRIMARY,
            font=('Arial', 10, 'bold')
        ).pack(anchor='w', pady=(0, 5))
        
        self.role_var = tk.StringVar(value='reader')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ä–æ–ª–µ–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        roles_container = tk.Frame(role_frame, bg=ModernColors.BACKGROUND)
        roles_container.pack(fill='x')
        
        roles = [
            ('reader', 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä', '–ß—Ç–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π'),
            ('writer', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ'),
            ('owner', 'üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø')
        ]
        
        for i, (role_value, role_title, role_desc) in enumerate(roles):
            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
            role_column = tk.Frame(roles_container, bg=ModernColors.BACKGROUND)
            role_column.pack(side='left', padx=(0, 15), fill='x', expand=True)
            
            role_button = tk.Radiobutton(
                role_column,
                text=role_title,
                variable=self.role_var,
                value=role_value,
                bg=ModernColors.BACKGROUND,
                fg=ModernColors.TEXT_PRIMARY,
                selectcolor=ModernColors.SURFACE,
                font=('Arial', 9, 'bold'),
                justify='left'
            )
            role_button.pack(anchor='w')
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–æ–π
            desc_label = tk.Label(
                role_column,
                text=role_desc,
                bg=ModernColors.BACKGROUND,
                fg=ModernColors.TEXT_SECONDARY,
                font=('Arial', 8),
                justify='left'
            )
            desc_label.pack(anchor='w')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.selected_info_frame = tk.Frame(main_frame, bg=ModernColors.SURFACE, relief='groove', bd=1)
        self.selected_info_frame.pack(fill='x', pady=(0, 10))
        
        self.selected_label = tk.Label(
            self.selected_info_frame,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞',
            bg=ModernColors.SURFACE,
            fg=ModernColors.TEXT_SECONDARY,
            font=('Arial', 9, 'italic'),
            padx=8,
            pady=5
        )
        self.selected_label.pack(fill='x')
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(main_frame, bg=ModernColors.BACKGROUND)
        buttons_frame.pack(fill='x')
        
        self.add_button = ModernButton(
            buttons_frame,
            text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é',
            command=self.add_member,
            style='success',
            state='disabled'
        )
        self.add_button.pack(side='right', padx=(8, 0))
        
        ModernButton(
            buttons_frame,
            text='‚ùå –û—Ç–º–µ–Ω–∞',
            command=self.destroy,
            style='secondary'
        ).pack(side='right')
    
    def cancel_loading(self):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.loading_cancelled = True
        self.loading_label.config(
            text='‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
            fg='red'
        )
        self.cancel_button.pack_forget()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._create_fallback_users()
    
    def safe_update_ui(self, update_func):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞"""
        try:
            if self.winfo_exists():
                update_func()
        except tk.TclError:
            # –û–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            pass
        except Exception:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ
            pass
    
    def load_domain_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–º–µ–Ω–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ–Ω–æ–π"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.users_cache:
            self.loading_label.config(
                text='‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞',
                fg='green'
            )
            self._update_users_list(self.users_cache)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", –µ—Å–ª–∏ –≤ –∫—ç—à–µ –º–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if len(self.users_cache) <= 50:
                self.load_more_button.pack(anchor='center')
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        self.cancel_button.pack(side='right')
        self.loading_cancelled = False
        
        def load_worker():
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
                self.safe_update_ui(lambda: self.loading_label.config(
                    text='üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Directory API...',
                    fg='blue'
                ))
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ API, —á—Ç–æ –∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                if not self.calendar_manager or not self.calendar_manager.calendar_api.credentials:
                    self.safe_update_ui(lambda: self.loading_label.config(
                        text='‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                        fg='red'
                    ))
                    self.safe_update_ui(lambda: self.cancel_button.pack_forget())
                    return
                
                # –°–æ–∑–¥–∞–µ–º Directory API —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ –∂–µ credentials
                from googleapiclient.discovery import build
                credentials = self.calendar_manager.calendar_api.credentials
                
                directory_service = build('admin', 'directory_v1', credentials=credentials)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if self.loading_cancelled:
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.safe_update_ui(lambda: self.loading_label.config(
                    text='üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤—ã—Ö 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...',
                    fg='blue'
                ))
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–º–µ–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                users_result = directory_service.users().list(
                    domain='sputnik8.com',
                    maxResults=50,  # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                    orderBy='givenName'
                ).execute()
                
                users = users_result.get('users', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
                if self.loading_cancelled:
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.safe_update_ui(lambda: self.loading_label.config(
                    text=f'‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...',
                    fg='blue'
                ))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                sputnik_users = []
                for i, user in enumerate(users):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
                    if i % 5 == 0 and self.loading_cancelled:
                        return
                    
                    email = user.get('primaryEmail', '')
                    if '@sputnik8.com' in email:
                        full_name = user.get('name', {}).get('fullName', email.split('@')[0])
                        suspended = user.get('suspended', False)
                        
                        sputnik_users.append({
                            'email': email,
                            'name': full_name,
                            'suspended': suspended,
                            'status': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if suspended else '–ê–∫—Ç–∏–≤–µ–Ω'
                        })
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
                sputnik_users.sort(key=lambda x: x['name'])
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
                if self.loading_cancelled:
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.users_cache = sputnik_users
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.safe_update_ui(lambda: self._update_users_list(sputnik_users))
                self.safe_update_ui(lambda: self.loading_label.config(
                    text=f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sputnik_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                    fg='green'
                ))
                self.safe_update_ui(lambda: self.cancel_button.pack_forget())
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–ª–æ
                if len(sputnik_users) >= 45:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É
                    self.safe_update_ui(lambda: self.load_more_button.pack(anchor='center'))
                
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                if not self.loading_cancelled:
                    self.safe_update_ui(lambda: self._create_fallback_users())
                    self.safe_update_ui(lambda: self.loading_label.config(
                        text=f'‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä—ã (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)',
                        fg='orange'
                    ))
                    self.safe_update_ui(lambda: self.cancel_button.pack_forget())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.loading_thread = threading.Thread(target=load_worker, daemon=True)
        self.loading_thread.start()
    
    def load_more_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 500)"""
        self.load_more_button.config(state='disabled', text='üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...')
        
        def load_more_worker():
            try:
                self.safe_update_ui(lambda: self.loading_label.config(
                    text='üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...',
                    fg='blue'
                ))
                
                # –°–æ–∑–¥–∞–µ–º Directory API —Å–µ—Ä–≤–∏—Å
                from googleapiclient.discovery import build
                credentials = self.calendar_manager.calendar_api.credentials
                directory_service = build('admin', 'directory_v1', credentials=credentials)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_result = directory_service.users().list(
                    domain='sputnik8.com',
                    maxResults=500,  # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                    orderBy='givenName'
                ).execute()
                
                users = users_result.get('users', [])
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                sputnik_users = []
                for user in users:
                    email = user.get('primaryEmail', '')
                    if '@sputnik8.com' in email:
                        full_name = user.get('name', {}).get('fullName', email.split('@')[0])
                        suspended = user.get('suspended', False)
                        
                        sputnik_users.append({
                            'email': email,
                            'name': full_name,
                            'suspended': suspended,
                            'status': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if suspended else '–ê–∫—Ç–∏–≤–µ–Ω'
                        })
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
                sputnik_users.sort(key=lambda x: x['name'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self.users_cache = sputnik_users
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                self.safe_update_ui(lambda: self._update_users_list(sputnik_users))
                self.safe_update_ui(lambda: self.loading_label.config(
                    text=f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sputnik_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)',
                    fg='green'
                ))
                self.safe_update_ui(lambda: self.load_more_button.pack_forget())
                
            except Exception as e:
                self.safe_update_ui(lambda: self.loading_label.config(
                    text=f'‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)[:50]}...',
                    fg='red'
                ))
                self.safe_update_ui(lambda: self.load_more_button.config(
                    state='normal', 
                    text='üì• –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'
                ))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=load_more_worker, daemon=True).start()
    
    def _create_fallback_users(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        fallback_users = [
            {'email': 'andrei.shushkov@sputnik8.com', 'name': '–ê–Ω–¥—Ä–µ–π –®—É—à–∫–æ–≤', 'suspended': False, 'status': '–ê–∫—Ç–∏–≤–µ–Ω'},
            {'email': 'valerii.sergeev@sputnik8.com', 'name': '–í–∞–ª–µ—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤', 'suspended': False, 'status': '–ê–∫—Ç–∏–≤–µ–Ω'},
            {'email': 'alice.grigoreva@sputnik8.com', 'name': '–ê–ª–∏—Å–∞ –ì—Ä–∏–≥–æ—Ä—å–µ–≤–∞', 'suspended': False, 'status': '–ê–∫—Ç–∏–≤–µ–Ω'},
            {'email': 'igor.petrov@sputnik8.com', 'name': '–ò–≥–æ—Ä—å –ü–µ—Ç—Ä–æ–≤', 'suspended': False, 'status': '–ê–∫—Ç–∏–≤–µ–Ω'},
            {'email': 'margarita.titova@sputnik8.com', 'name': '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –¢–∏—Ç–æ–≤–∞', 'suspended': False, 'status': '–ê–∫—Ç–∏–≤–µ–Ω'},
            {'email': 'evgeniia.matveeva@sputnik8.com', 'name': '–ï–≤–≥–µ–Ω–∏—è –ú–∞—Ç–≤–µ–µ–≤–∞', 'suspended': False, 'status': '–ê–∫—Ç–∏–≤–µ–Ω'},
            {'email': 'example.user@sputnik8.com', 'name': '–ù–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫', 'suspended': False, 'status': '–ê–∫—Ç–∏–≤–µ–Ω'},
        ]
        self._update_users_list(fallback_users)
    
    def _update_users_list(self, users):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.domain_users = users
        self.filtered_users = users.copy()
        self._populate_users_tree()
    
    def _populate_users_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.users_tree.get_children():
            self.users_tree.delete(item)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        existing_members = []
        try:
            members = self.calendar_manager.get_members()
            existing_members = [m.email.lower() for m in members]
        except:
            pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in self.filtered_users:
            status = user['status']
            if user['email'].lower() in existing_members:
                status = '–£–∂–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
            item_id = self.users_tree.insert('', 'end', values=(
                user['name'],
                user['email'],
                status
            ))
            
            # –í—ã–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            if status == '–£–∂–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ':
                self.users_tree.set(item_id, 'name', f"üîó {user['name']}")
    
    def filter_users(self, *args):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–∏—Å–∫—É"""
        search_text = self.search_var.get().lower()
        
        if not search_text:
            self.filtered_users = self.domain_users.copy()
        else:
            self.filtered_users = []
            for user in self.domain_users:
                if (search_text in user['name'].lower() or 
                    search_text in user['email'].lower()):
                    self.filtered_users.append(user)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self._populate_users_tree()
    
    def on_user_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.users_tree.selection()
        if not selection:
            self.selected_label.config(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞')
            self.add_button.config(state='disabled')
            return
        
        item = self.users_tree.item(selection[0])
        values = item.get('values', [])
        if not values:
            return
        
        name, email, status = values
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        role_text = {
            'reader': '–ß–∏—Ç–∞—Ç–µ–ª—å (–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π)',
            'writer': '–†–µ–¥–∞–∫—Ç–æ—Ä (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)',
            'owner': '–í–ª–∞–¥–µ–ª–µ—Ü (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)'
        }.get(self.role_var.get(), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')
        
        info_text = f"üë§ {name}\\nüìß {email}\\nüîê –†–æ–ª—å: {role_text}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if status == '–£–∂–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ':
            info_text += "\\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
            self.add_button.config(state='disabled')
        else:
            self.add_button.config(state='normal')
        
        self.selected_label.config(text=info_text)
    
    def on_user_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if self.add_button['state'] == 'normal':
            self.add_member()
    
    def add_member(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        selection = self.users_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return
        
        item = self.users_tree.item(selection[0])
        values = item.get('values', [])
        if not values:
            return
        
        name, email, status = values
        role = self.role_var.get()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        role_names = {
            'reader': '–ß–∏—Ç–∞—Ç–µ–ª—å (–ø—Ä–æ—Å–º–æ—Ç—Ä)',
            'writer': '–†–µ–¥–∞–∫—Ç–æ—Ä (—Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ)',
            'owner': '–í–ª–∞–¥–µ–ª–µ—Ü (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)'
        }
        
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK?\\n\\n"
            f"üë§ –ò–º—è: {name}\\n"
            f"üìß Email: {email}\\n"
            f"üîê –ü—Ä–∞–≤–∞: {role_names.get(role, role)}"
        )
        
        if not result:
            return
        
        def add_worker():
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                self.calendar_manager.add_member(email, role)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.safe_update_ui(lambda: messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", 
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é SPUT–ùIK"
                ))
                self.safe_update_ui(self.refresh_callback)
                self.safe_update_ui(self.destroy)
                
            except Exception as e:
                self.safe_update_ui(lambda: messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}:\\n\\n{str(e)}"
                ))
        
        threading.Thread(target=add_worker, daemon=True).start()


def open_sputnik_calendar_window(master=None):
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º SPUT–ùIK
    
    Args:
        master: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    """
    try:
        window = SputnikCalendarWindow(master)
        window.protocol("WM_DELETE_WINDOW", window.destroy)
        return window
    except Exception as e:
        messagebox.showerror(
            "–û—à–∏–±–∫–∞",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è SPUT–ùIK:\\n{str(e)}"
        )
        return None
