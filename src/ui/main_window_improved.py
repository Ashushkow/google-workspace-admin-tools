# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Admin Team Tools.
–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.
"""

import tkinter as tk
from tkinter import messagebox, simpledialog
from typing import Optional, Any, Callable
from datetime import datetime

from .ui_components import ModernColors, ModernButton, StatusIndicator
from .components.statistics_panel import StatisticsPanel
from .components.activity_log import ActivityLog
from .components.toolbar import MainToolbar
from .user_windows import CreateUserWindow, EditUserWindow
from .employee_list_window import EmployeeListWindow
from .additional_windows import AsanaInviteWindow, ErrorLogWindow
from .group_management import GroupManagementWindow
from ..services.data_service import DataService
from ..services.export_service import ExportService
from ..config.main_window_config import MainWindowConfig
from ..utils.ui_decorators import handle_ui_errors


class AdminToolsMainWindow(tk.Tk):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Admin Team Tools.
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
    """
    
    def __init__(self, service: Optional[Any] = None) -> None:
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.service = service
        self.data_service = DataService(service)
        self.export_service = ExportService(service)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
        self._ui_initialized = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._setup_window()
        self._setup_ui()
        self._schedule_initialization()

    def _setup_window(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.title(MainWindowConfig.TITLE)
        self.geometry(MainWindowConfig.GEOMETRY)
        self.minsize(MainWindowConfig.MIN_WIDTH, MainWindowConfig.MIN_HEIGHT)
        self.configure(bg=ModernColors.BACKGROUND)
        self.resizable(True, True)
        self._center_window()

    def _center_window(self) -> None:
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')

    def _setup_ui(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self._create_header()
        self.toolbar = MainToolbar(self, self._get_toolbar_callbacks())
        self._create_main_area()
        self._create_status_bar()

    def _create_header(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = tk.Frame(
            self, 
            bg=ModernColors.PRIMARY, 
            height=MainWindowConfig.HEADER_HEIGHT
        )
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        tk.Label(
            header_frame,
            text='Admin Team Tools',
            font=('Arial', 16, 'bold'),
            bg=ModernColors.PRIMARY,
            fg='white'
        ).pack(side='left', padx=15, pady=15)
        
        ModernButton(
            header_frame,
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            command=self.refresh_data,
            style='secondary',
            font=('Arial', 9)
        ).pack(side='right', padx=15, pady=15)

    def _create_main_area(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏"""
        main_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        main_frame.pack(fill='both', expand=True, padx=15, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.statistics_panel = StatisticsPanel(
            main_frame, 
            self.data_service,
            self._get_quick_actions_callbacks()
        )
        self.statistics_panel.pack(side='left', fill='y', padx=(0, 8))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_log = ActivityLog(main_frame)
        self.activity_log.pack(side='right', fill='both', expand=True)

    def _create_status_bar(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_frame = tk.Frame(
            self, 
            bg=ModernColors.SECONDARY, 
            height=MainWindowConfig.STATUS_BAR_HEIGHT
        )
        self.status_frame.pack(side='bottom', fill='x')
        self.status_frame.pack_propagate(False)
        
        self.status_indicator = StatusIndicator(self.status_frame)
        self.status_indicator.pack(side='left', padx=8, pady=3)
        
        self.status_label = tk.Label(
            self.status_frame,
            text=MainWindowConfig.MESSAGES['ready'],
            font=('Arial', 8),
            bg=ModernColors.SECONDARY,
            fg=ModernColors.TEXT_PRIMARY
        )
        self.status_label.pack(side='left', pady=3)

    def _get_toolbar_callbacks(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callbacks –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return {
            'employee_list': self.open_employee_list,
            'create_user': self.open_create_user,
            'edit_user': self.open_edit_user,
            'groups': self.open_group_management,
            'asana': self.open_asana_invite
        }

    def _get_quick_actions_callbacks(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callbacks –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        return {
            'export': self.export_users,
            'error_log': self.open_error_log
        }

    def _schedule_initialization(self) -> None:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
        self.after(MainWindowConfig.DELAYED_INIT_DELAY, self._delayed_init)
        self.check_service_status()

    def _delayed_init(self) -> None:
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI"""
        self._ui_initialized = True
        self.log_activity('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.after(MainWindowConfig.STATISTICS_LOAD_DELAY, self._load_statistics_async)

    def _load_statistics_async(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self._ui_initialized or not self.statistics_panel:
            self.after(MainWindowConfig.RETRY_DELAY, self._load_statistics_async)
            return
        
        self.statistics_panel.load_statistics()

    def check_service_status(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API"""
        if self.service:
            self.status_indicator.set_status('online')
            self.status_label.config(text=MainWindowConfig.MESSAGES['connected'])
            self.log_activity('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Workspace API')
        else:
            self.status_indicator.set_status('offline')
            self.status_label.config(text=MainWindowConfig.MESSAGES['no_connection'])
            self.log_activity('–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API', 'ERROR')

    def log_activity(self, message: str, level: str = 'INFO') -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if hasattr(self, 'activity_log'):
            self.activity_log.add_entry(message, level)

    def refresh_data(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.service:
            messagebox.showwarning(
                '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 
                MainWindowConfig.MESSAGES['no_connection']
            )
            return
        
        try:
            self.status_label.config(text=MainWindowConfig.MESSAGES['loading'])
            self.data_service.clear_cache()
            self.statistics_panel.refresh()
            self.status_label.config(text=MainWindowConfig.MESSAGES['updated'])
            self.log_activity('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
        except Exception as e:
            self._handle_error(e, '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö')

    def _handle_error(self, error: Exception, operation: str) -> None:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        error_msg = f'–û—à–∏–±–∫–∞ {operation}: {str(error)}'
        self.log_activity(error_msg, 'ERROR')
        messagebox.showerror('–û—à–∏–±–∫–∞', error_msg)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    def open_employee_list(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        EmployeeListWindow(self, self.service)

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    def open_create_user(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        CreateUserWindow(self, self.service)

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    def open_edit_user(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        EditUserWindow(self, self.service)

    @handle_ui_errors("–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏")
    def open_group_management(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
        GroupManagementWindow(self, self.service)

    def open_asana_invite(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ Asana"""
        try:
            AsanaInviteWindow(self)
            self.log_activity('–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ Asana')
        except Exception as e:
            self._handle_error(e, '–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ Asana')

    def open_error_log(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫"""
        try:
            ErrorLogWindow(self)
            self.log_activity('–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫')
        except Exception as e:
            self._handle_error(e, '–æ—Ç–∫—Ä—ã—Ç–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫')

    @handle_ui_errors("—ç–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    def export_users(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        self.export_service.export_users_to_csv(self.log_activity)
