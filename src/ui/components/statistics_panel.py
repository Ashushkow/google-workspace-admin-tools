# -*- coding: utf-8 -*-
"""
–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import tkinter as tk
from typing import Optional, Any, Callable

from ..ui_components import ModernColors, ModernButton
from ...api.users_api import get_user_list
from ...api.groups_api import list_groups
from ...themes.theme_manager import theme_manager


class StatisticsPanel(tk.Frame):
    """
    –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    
    def __init__(self, parent: tk.Widget, service: Optional[Any] = None, 
                 quick_actions_callbacks: Optional[dict] = None):
        super().__init__(parent, relief='solid', bd=1)
        
        self.service = service
        self.callbacks = quick_actions_callbacks or {}
        
        self._setup_ui()
        self.apply_theme()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        theme_manager.add_theme_change_callback(self.on_theme_changed)
        
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–∞–Ω–µ–ª–∏"""
        self.pack(side='left', fill='y', padx=(0, 8), pady=0, ipadx=10, ipady=10)
        
        self._create_statistics_section()
        self._create_quick_actions_section()
        
    def _create_statistics_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        self.title_label = tk.Label(
            self,
            text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            font=('Arial', 12, 'bold')
        )
        self.title_label.pack(anchor='w', pady=(0, 10))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        self.stats_frame = tk.Frame(self)
        self.stats_frame.pack(fill='x', pady=(0, 15))
        
        self.total_users_label = tk.Label(
            self.stats_frame,
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –∑–∞–≥—Ä—É–∑–∫–∞...',
            font=('Arial', 10),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_SECONDARY
        )
        self.total_users_label.pack(anchor='w', pady=1)
        
        self.total_groups_label = tk.Label(
            self.stats_frame,
            text='–ì—Ä—É–ø–ø—ã: –∑–∞–≥—Ä—É–∑–∫–∞...',
            font=('Arial', 10),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_SECONDARY
        )
        self.total_groups_label.pack(anchor='w', pady=1)
        
    def _create_quick_actions_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        tk.Label(
            self,
            text='‚ö° –î–µ–π—Å—Ç–≤–∏—è',
            font=('Arial', 12, 'bold'),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w', pady=(10, 8))
        
        quick_actions_frame = tk.Frame(self, bg=ModernColors.CARD_BG)
        quick_actions_frame.pack(fill='x')
        
        ModernButton(
            quick_actions_frame,
            text='üìã –≠–∫—Å–ø–æ—Ä—Ç',
            command=self.callbacks.get('export', self._no_callback),
            style='secondary',
            font=('Arial', 9)
        ).pack(fill='x', pady=1)
        
        ModernButton(
            quick_actions_frame,
            text='üìÅ –ñ—É—Ä–Ω–∞–ª',
            command=self.callbacks.get('error_log', self._no_callback),
            style='secondary',
            font=('Arial', 9)
        ).pack(fill='x', pady=1)
        
    def _no_callback(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö callback'–æ–≤"""
        pass
        
    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø"""
        if not self.service:
            return
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = get_user_list(self.service)
            users_count = len(users)
            self.total_users_label.config(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
            groups = list_groups(self.service)
            groups_count = len(groups)
            self.total_groups_label.config(text=f'–ì—Ä—É–ø–ø—ã: {groups_count}')
            
            return users_count, groups_count
            
        except Exception as e:
            self.total_users_label.config(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –æ—à–∏–±–∫–∞')
            self.total_groups_label.config(text='–ì—Ä—É–ø–ø—ã: –æ—à–∏–±–∫–∞')
            raise e
            
    def update_statistics(self, users_count: int, groups_count: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.total_users_label.config(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}')
        self.total_groups_label.config(text=f'–ì—Ä—É–ø–ø—ã: {groups_count}')
        
    def refresh(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return self.load_statistics()
    
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã"""
        if not theme_manager.current_theme:
            return
            
        theme = theme_manager.current_theme
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ—Ä–µ–π–º—É
        self.config(bg=theme.get_color('secondary'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for widget in self.winfo_children():
            self._apply_theme_to_widget(widget, theme)
            
    def _apply_theme_to_widget(self, widget, theme):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –≤–∏–¥–∂–µ—Ç—É"""
        try:
            if isinstance(widget, tk.Label):
                widget.config(
                    bg=theme.get_color('secondary'),
                    fg=theme.get_color('text_primary')
                )
            elif isinstance(widget, tk.Frame):
                widget.config(bg=theme.get_color('secondary'))
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
                for child in widget.winfo_children():
                    self._apply_theme_to_widget(child, theme)
        except tk.TclError:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —ç—Ç–∏ –æ–ø—Ü–∏–∏
            pass
            
    def on_theme_changed(self, theme):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã"""
        self.apply_theme()
