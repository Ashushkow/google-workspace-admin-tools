# -*- coding: utf-8 -*-
"""
–ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import tkinter as tk
from tkinter import scrolledtext
from datetime import datetime
from typing import Optional

from ..ui_components import ModernColors, ModernButton


class ActivityLog(tk.Frame):
    """
    –ü–∞–Ω–µ–ª—å –∂—É—Ä–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    
    def __init__(self, parent: tk.Widget):
        super().__init__(parent, bg=ModernColors.CARD_BG, relief='solid', bd=1)
        
        self._setup_ui()
        
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∂—É—Ä–Ω–∞–ª–∞"""
        self.pack(side='right', fill='both', expand=True, padx=0, pady=0)
        
        self._create_header()
        self._create_log_area()
        
    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∂—É—Ä–Ω–∞–ª–∞"""
        log_header = tk.Frame(self, bg=ModernColors.CARD_BG)
        log_header.pack(fill='x', padx=10, pady=(10, 8))
        
        tk.Label(
            log_header,
            text='üìù –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            font=('Arial', 12, 'bold'),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(side='left')
        
        ModernButton(
            log_header,
            text='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å',
            command=self.clear_log,
            style='secondary',
            font=('Arial', 9)
        ).pack(side='right')
        
    def _create_log_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∂—É—Ä–Ω–∞–ª–∞"""
        log_frame = tk.Frame(self, bg=ModernColors.CARD_BG)
        log_frame.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            wrap=tk.WORD,
            font=('Consolas', 9),
            bg='white',
            fg=ModernColors.TEXT_PRIMARY,
            relief='solid',
            bd=1
        )
        self.log_text.pack(fill='both', expand=True)
        
    def add_entry(self, message: str, level: str = 'INFO'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        color_map = {
            'INFO': 'black',
            'WARNING': 'orange',
            'ERROR': 'red',
            'SUCCESS': 'green'
        }
        
        log_entry = f'[{timestamp}] {level}: {message}\n'
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        self.log_text.insert(tk.END, log_entry)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
        start_line = self.log_text.index(tk.END + "-2l linestart")
        end_line = self.log_text.index(tk.END + "-1l lineend")
        
        tag_name = f"level_{level}"
        self.log_text.tag_add(tag_name, start_line, end_line)
        self.log_text.tag_config(tag_name, foreground=color_map.get(level, 'black'))
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
        self.log_text.see(tk.END)
        
    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.log_text.delete(1.0, tk.END)
        self.add_entry('–ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω')
        
    def get_log_content(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞"""
        return self.log_text.get(1.0, tk.END)
        
    def save_log_to_file(self, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.get_log_content())
            return True
        except Exception:
            return False
