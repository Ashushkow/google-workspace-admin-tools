#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Admin Team Tools —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π FreeIPA
"""

import logging
import click
import asyncio
from typing import Optional

from ..core.di_container import container
from ..services.user_service import UserService
from ..services.group_service import GroupService


logger = logging.getLogger(__name__)


@click.group()
@click.option('--verbose', '-v', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
@click.pass_context
def cli(ctx, verbose):
    """Admin Team Tools - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Workspace –∏ FreeIPA"""
    ctx.ensure_object(dict)
    ctx.obj['verbose'] = verbose
    
    if verbose:
        logging.getLogger().setLevel(logging.DEBUG)


@cli.group()
def users():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    pass


@cli.group()
def groups():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏"""
    pass


@users.command()
@click.option('--domain', '-d', help='–î–æ–º–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')
@click.option('--limit', '-l', default=100, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
async def list(domain: Optional[str], limit: int):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Google Workspace"""
    try:
        user_service = container.resolve(UserService)
        users = await user_service.list_users(domain=domain, max_results=limit)
        
        click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        for user in users:
            click.echo(f"  üë§ {user.email} - {user.full_name}")
            
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", err=True)


@users.command()
@click.argument('email')
async def show(email: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user_service = container.resolve(UserService)
        user = await user_service.get_user(email)
        
        if not user:
            click.echo(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω", err=True)
            return
        
        click.echo(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
        click.echo(f"  –ò–º—è: {user.full_name}")
        click.echo(f"  –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user.suspended == False else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")
        if hasattr(user, 'org_unit_path'):
            click.echo(f"  –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {user.org_unit_path}")
            
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", err=True)


@groups.command()
@click.option('--domain', '-d', help='–î–æ–º–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')
@click.option('--limit', '-l', default=100, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
async def list(domain: Optional[str], limit: int):
    """–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø Google Workspace"""
    try:
        group_service = container.resolve(GroupService)
        groups = await group_service.list_groups(domain=domain, max_results=limit)
        
        click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}")
        for group in groups:
            click.echo(f"  üë• {group.email} - {group.name}")
            
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}", err=True)


@groups.command()
@click.argument('email')
async def members(email: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã"""
    try:
        group_service = container.resolve(GroupService)
        members = await group_service.get_group_members(email)
        
        click.echo(f"üë• –ì—Ä—É–ø–ø–∞: {email}")
        click.echo(f"üìä –ß–ª–µ–Ω–æ–≤: {len(members)}")
        
        for member in members:
            click.echo(f"  üë§ {member.email} ({member.role})")
            
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã: {e}", err=True)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥ FreeIPA (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
try:
    from .freeipa_simple import freeipa
    cli.add_command(freeipa)
except ImportError as e:
    logger.warning(f"FreeIPA commands not available: {e}")


# Wrapper –¥–ª—è async –∫–æ–º–∞–Ω–¥
def _run_async_command(func):
    """Wrapper –¥–ª—è –∑–∞–ø—É—Å–∫–∞ async –∫–æ–º–∞–Ω–¥"""
    def wrapper(*args, **kwargs):
        return asyncio.run(func(*args, **kwargs))
    return wrapper


# –ü—Ä–∏–º–µ–Ω—è–µ–º wrapper –∫ async –∫–æ–º–∞–Ω–¥–∞–º
users.commands['list'].callback = _run_async_command(users.commands['list'].callback)
users.commands['show'].callback = _run_async_command(users.commands['show'].callback)
groups.commands['list'].callback = _run_async_command(groups.commands['list'].callback)
groups.commands['members'].callback = _run_async_command(groups.commands['members'].callback)


class CLIApplication:
    """CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π FreeIPA"""
    
    def __init__(self, user_service=None, group_service=None):
        self.user_service = user_service
        self.group_service = group_service
        self.logger = logging.getLogger(__name__)
    
    async def run(self) -> int:
        """–ó–∞–ø—É—Å–∫ CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.logger.info("–ó–∞–ø—É—Å–∫ CLI —Ä–µ–∂–∏–º–∞")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º CLI —á–µ—Ä–µ–∑ click
            cli()
            return 0
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ CLI: {e}")
            return 1


if __name__ == '__main__':
    cli()
