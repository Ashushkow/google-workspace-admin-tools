#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FreeIPA
"""

import asyncio
import click
import logging
from typing import List, Optional
from pathlib import Path

from ..integrations.freeipa_integration import FreeIPAIntegration, setup_freeipa_integration
from ..services.user_service import UserService
from ..services.group_service import GroupService
from ..services.freeipa_client import create_freeipa_config_template, test_freeipa_connection
from ..utils.enhanced_logger import setup_logging


logger = logging.getLogger(__name__)


@click.group()
@click.pass_context
def freeipa(ctx):
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FreeIPA"""
    pass


@freeipa.command()
@click.option('--output', '-o', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
def create_config(output: str):
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ FreeIPA"""
    try:
        create_freeipa_config_template(output)
        click.echo(f"‚úÖ –®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {output}")
        click.echo("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ FreeIPA")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", err=True)


@freeipa.command()
@click.option('--config', '-c', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
def test_connection(config: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA"""
    try:
        if test_freeipa_connection(config):
            click.echo("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA —É—Å–ø–µ—à–Ω–æ")
        else:
            click.echo("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FreeIPA", err=True)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", err=True)


@freeipa.command()
@click.option('--config', '-c', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
async def stats(config: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É FreeIPA"""
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–æ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DI
        click.echo("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
        return
        
        user_service = container.resolve(UserService)
        group_service = container.resolve(GroupService)
        
        integration = FreeIPAIntegration(user_service, group_service)
        
        if not integration.load_config(config):
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", err=True)
            return
        
        async with integration:
            stats_data = await integration.get_freeipa_stats()
            
            if 'error' in stats_data:
                click.echo(f"‚ùå –û—à–∏–±–∫–∞: {stats_data['error']}", err=True)
                return
            
            click.echo("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FreeIPA:")
            click.echo(f"  –°–µ—Ä–≤–µ—Ä: {stats_data['server_url']}")
            click.echo(f"  –î–æ–º–µ–Ω: {stats_data['domain']}")
            click.echo(f"  –ü–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if stats_data['connected'] else '‚ùå'}")
            click.echo(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_data['users_count']}")
            click.echo(f"  –ì—Ä—É–ø–ø: {stats_data['groups_count']}")
            
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", err=True)


@freeipa.command()
@click.argument('email')
@click.option('--groups', '-g', multiple=True, help='–ì—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
@click.option('--config', '-c', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
async def sync_user(email: str, groups: tuple, config: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Workspace –≤ FreeIPA"""
    try:
        user_service = container.resolve(UserService)
        group_service = container.resolve(GroupService)
        
        integration = FreeIPAIntegration(user_service, group_service)
        
        if not integration.load_config(config):
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", err=True)
            return
        
        async with integration:
            groups_list = list(groups) if groups else []
            result = await integration.sync_user_to_freeipa(email, groups_list)
            
            if result:
                click.echo(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ FreeIPA")
                if groups_list:
                    click.echo(f"üìÅ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã: {', '.join(groups_list)}")
            else:
                click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}", err=True)
                
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", err=True)


@freeipa.command()
@click.option('--domain', '-d', help='–î–æ–º–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
@click.option('--groups', '-g', multiple=True, help='–ì—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
@click.option('--config', '-c', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.option('--confirm', is_flag=True, help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞')
async def sync_all_users(domain: Optional[str], groups: tuple, config: str, confirm: bool):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Workspace –≤ FreeIPA"""
    try:
        user_service = container.resolve(UserService)
        group_service = container.resolve(GroupService)
        
        integration = FreeIPAIntegration(user_service, group_service)
        
        if not integration.load_config(config):
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", err=True)
            return
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        users = await user_service.list_users(domain=domain)
        click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        if groups:
            click.echo(f"üìÅ –ì—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {', '.join(groups)}")
        
        if not confirm:
            if not click.confirm('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é?'):
                click.echo("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        async with integration:
            groups_list = list(groups) if groups else []
            results = await integration.sync_all_users_to_freeipa(domain, groups_list)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = sum(1 for result in results.values() if result)
            total_count = len(results)
            
            click.echo(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            click.echo(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
            click.echo(f"  ‚ùå –û—à–∏–±–∫–∏: {total_count - success_count}")
            click.echo(f"  üìä –í—Å–µ–≥–æ: {total_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            failed_users = [email for email, result in results.items() if not result]
            if failed_users:
                click.echo(f"\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏:")
                for email in failed_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    click.echo(f"  ‚Ä¢ {email}")
                if len(failed_users) > 10:
                    click.echo(f"  ... –∏ –µ—â–µ {len(failed_users) - 10}")
                    
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", err=True)


@freeipa.command()
@click.argument('name')
@click.option('--description', '-d', help='–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã')
@click.option('--config', '-c', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
async def create_group(name: str, description: Optional[str], config: str):
    """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ FreeIPA"""
    try:
        user_service = container.resolve(UserService)
        group_service = container.resolve(GroupService)
        
        integration = FreeIPAIntegration(user_service, group_service)
        
        if not integration.load_config(config):
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", err=True)
            return
        
        async with integration:
            result = await integration.create_freeipa_group(name, description)
            
            if result:
                click.echo(f"‚úÖ –ì—Ä—É–ø–ø–∞ {name} —Å–æ–∑–¥–∞–Ω–∞ –≤ FreeIPA")
                if description:
                    click.echo(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            else:
                click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {name}", err=True)
                
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}", err=True)


@freeipa.command()
@click.option('--domain', '-d', help='–î–æ–º–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø')
@click.option('--config', '-c', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.option('--confirm', is_flag=True, help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞')
async def sync_groups(domain: Optional[str], config: str, confirm: bool):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã –∏–∑ Google Workspace –≤ FreeIPA"""
    try:
        user_service = container.resolve(UserService)
        group_service = container.resolve(GroupService)
        
        integration = FreeIPAIntegration(user_service, group_service)
        
        if not integration.load_config(config):
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", err=True)
            return
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        groups = await group_service.list_groups(domain=domain)
        click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        if not confirm:
            if not click.confirm('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≥—Ä—É–ø–ø?'):
                click.echo("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        async with integration:
            results = await integration.sync_google_groups_to_freeipa(domain)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = sum(1 for result in results.values() if result)
            total_count = len(results)
            
            click.echo(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø:")
            click.echo(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
            click.echo(f"  ‚ùå –û—à–∏–±–∫–∏: {total_count - success_count}")
            click.echo(f"  üìä –í—Å–µ–≥–æ: {total_count}")
            
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø: {e}", err=True)


@freeipa.command()
@click.argument('user_email')
@click.argument('group_name')
@click.option('--config', '-c', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
async def add_user_to_group(user_email: str, group_name: str, config: str):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É FreeIPA"""
    try:
        user_service = container.resolve(UserService)
        group_service = container.resolve(GroupService)
        
        integration = FreeIPAIntegration(user_service, group_service)
        
        if not integration.load_config(config):
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", err=True)
            return
        
        async with integration:
            result = await integration.add_user_to_freeipa_group(user_email, group_name)
            
            if result:
                click.echo(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_name}")
            else:
                click.echo(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É", err=True)
                
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}", err=True)


@freeipa.command()
@click.option('--domain', '-d', help='–î–æ–º–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')
@click.option('--config', '-c', default='config/freeipa_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
async def compare_users(domain: Optional[str], config: str):
    """–°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Google Workspace –∏ FreeIPA"""
    try:
        user_service = container.resolve(UserService)
        group_service = container.resolve(GroupService)
        
        integration = FreeIPAIntegration(user_service, group_service)
        
        if not integration.load_config(config):
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", err=True)
            return
        
        async with integration:
            comparison = await integration.compare_users_with_google(domain)
            
            if 'error' in comparison:
                click.echo(f"‚ùå –û—à–∏–±–∫–∞: {comparison['error']}", err=True)
                return
            
            click.echo("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            click.echo(f"  Google Workspace: {comparison['google_users_count']}")
            click.echo(f"  FreeIPA: {comparison['freeipa_users_count']}")
            click.echo(f"  –í –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö: {len(comparison['in_both'])}")
            click.echo(f"  –¢–æ–ª—å–∫–æ –≤ Google: {len(comparison['only_in_google'])}")
            click.echo(f"  –¢–æ–ª—å–∫–æ –≤ FreeIPA: {len(comparison['only_in_freeipa'])}")
            click.echo(f"  –¢—Ä–µ–±—É—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {comparison['sync_needed']}")
            
            if comparison['only_in_google']:
                click.echo(f"\nüìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ Google (–ø–µ—Ä–≤—ã–µ 10):")
                for email in comparison['only_in_google'][:10]:
                    click.echo(f"  ‚Ä¢ {email}")
                    
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}", err=True)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º async –∫–æ–º–∞–Ω–¥—ã
def _run_async_command(func):
    """Wrapper –¥–ª—è –∑–∞–ø—É—Å–∫–∞ async –∫–æ–º–∞–Ω–¥"""
    def wrapper(*args, **kwargs):
        return asyncio.run(func(*args, **kwargs))
    return wrapper

# –ü—Ä–∏–º–µ–Ω—è–µ–º wrapper –∫ async –∫–æ–º–∞–Ω–¥–∞–º
stats.callback = _run_async_command(stats.callback)
sync_user.callback = _run_async_command(sync_user.callback)
sync_all_users.callback = _run_async_command(sync_all_users.callback)
create_group.callback = _run_async_command(create_group.callback)
sync_groups.callback = _run_async_command(sync_groups.callback)
add_user_to_group.callback = _run_async_command(add_user_to_group.callback)
compare_users.callback = _run_async_command(compare_users.callback)
