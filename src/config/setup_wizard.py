#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
import re
import sys
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
from pathlib import Path
from typing import Optional, Tuple

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
try:
    from ..utils.resource_path import get_resource_path, ensure_resource_dir
except (ImportError, ValueError):
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    try:
        from utils.resource_path import get_resource_path, ensure_resource_dir
    except ImportError:
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        def get_resource_path(path: str) -> Path:
            return Path(path)
        
        def ensure_resource_dir(path: Path) -> None:
            path.mkdir(parents=True, exist_ok=True)


class SetupWizard:
    """–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    
    def __init__(self):
        self.root = None
        self.domain_var = None
        self.admin_var = None
        self.result = None
        
    def run_gui_setup(self) -> Optional[Tuple[str, str]]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å GUI –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            self.root = tk.Tk()
            self.root.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Admin Team Tools")
            self.root.geometry("700x600")
            self.root.resizable(True, True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            self.root.minsize(650, 550)
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            self.root.eval('tk::PlaceWindow . center')
            
            # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            self.root.attributes('-topmost', True)
            self.root.lift()
            self.root.focus_force()
            
            result = self._create_wizard_gui()
            
            return result
            
        except Exception as e:
            # –ï—Å–ª–∏ GUI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
            try:
                error_root = tk.Tk()
                error_root.withdraw()
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}\n\n"
                    f"–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n"
                    f"GOOGLE_WORKSPACE_DOMAIN=–≤–∞—à-–¥–æ–º–µ–Ω.com\n"
                    f"GOOGLE_WORKSPACE_ADMIN=admin@–≤–∞—à-–¥–æ–º–µ–Ω.com"
                )
                error_root.destroy()
            except:
                pass
            return None
    
    def _create_wizard_gui(self) -> Optional[Tuple[str, str]]:
        """–°–æ–∑–¥–∞—Ç—å GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞—Å—Ç–µ—Ä–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="30")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        title_label = ttk.Label(
            main_frame, 
            text="üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Admin Team Tools!", 
            font=('Segoe UI', 18, 'bold')
        )
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 10), sticky=tk.W)
        
        # –í–µ—Ä—Å–∏—è
        version_label = ttk.Label(
            main_frame, 
            text="–í–µ—Ä—Å–∏—è 2.2.0", 
            font=('Segoe UI', 10), 
            foreground='gray'
        )
        version_label.grid(row=1, column=0, columnspan=2, pady=(0, 25), sticky=tk.W)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = """–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å Google Workspace –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –¥–æ–º–µ–Ω –∏ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        
        desc_label = ttk.Label(main_frame, text=description, wraplength=620, font=('Segoe UI', 10))
        desc_label.grid(row=2, column=0, columnspan=2, pady=(0, 30), sticky=tk.W)
        
        # –†–∞–º–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.LabelFrame(main_frame, text=" –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ", padding="20")
        settings_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # –ü–æ–ª–µ –¥–æ–º–µ–Ω–∞
        ttk.Label(settings_frame, text="–î–æ–º–µ–Ω Google Workspace:", font=('Segoe UI', 10)).grid(
            row=0, column=0, sticky=tk.W, pady=(0, 5))
        self.domain_var = tk.StringVar()
        domain_entry = ttk.Entry(settings_frame, textvariable=self.domain_var, width=55, font=('Segoe UI', 10))
        domain_entry.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        domain_help = ttk.Label(
            settings_frame, 
            text="üìù –ù–∞–ø—Ä–∏–º–µ—Ä: mycompany.com", 
            font=('Segoe UI', 9), 
            foreground='#666666'
        )
        domain_help.grid(row=2, column=0, sticky=tk.W, pady=(0, 15))
        
        # –ü–æ–ª–µ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        ttk.Label(settings_frame, text="Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", font=('Segoe UI', 10)).grid(
            row=3, column=0, sticky=tk.W, pady=(0, 5))
        self.admin_var = tk.StringVar()
        admin_entry = ttk.Entry(settings_frame, textvariable=self.admin_var, width=45, font=('Segoe UI', 10))
        admin_entry.grid(row=4, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        admin_help = ttk.Label(
            settings_frame, 
            text="üìù –ù–∞–ø—Ä–∏–º–µ—Ä: admin@mycompany.com", 
            font=('Segoe UI', 9), 
            foreground='#666666'
        )
        admin_help.grid(row=5, column=0, sticky=tk.W)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è
        info_frame = ttk.LabelFrame(main_frame, text=" ‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ", padding="15")
        info_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 25))
        
        info_text = """‚Ä¢ Google API credentials –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é
‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"""
        
        info_label = ttk.Label(info_frame, text=info_text, font=('Segoe UI', 9), foreground='#444444')
        info_label.grid(row=0, column=0, sticky=tk.W)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=5, column=0, columnspan=2, pady=(10, 0), sticky=tk.E)
        
        cancel_button = ttk.Button(
            button_frame, 
            text="‚ùå –û—Ç–º–µ–Ω–∞", 
            command=self._cancel_setup,
            width=12
        )
        cancel_button.grid(row=0, column=0, padx=(0, 15))
        
        save_button = ttk.Button(
            button_frame, 
            text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
            command=self._save_setup,
            width=15
        )
        save_button.grid(row=0, column=1)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        main_frame.columnconfigure(0, weight=1)
        settings_frame.columnconfigure(0, weight=1)
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter
        domain_entry.focus()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        def on_enter(event):
            if self._validate_input():
                self._save_setup()
        
        domain_entry.bind('<Return>', lambda e: admin_entry.focus())
        admin_entry.bind('<Return>', on_enter)
        save_button.bind('<Return>', lambda e: self._save_setup())
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result = None
        self.root.mainloop()
        
        return self.result
    
    def _select_credentials_file(self):
        """–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª credentials.json"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª credentials.json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path:
            self.credentials_path = file_path
            self.creds_path_var.set(os.path.basename(file_path))
    
    def _validate_input(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        domain = self.domain_var.get().strip()
        admin = self.admin_var.get().strip()
        
        if not domain:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–º–µ–Ω Google Workspace")
            return False
            
        if not admin:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–æ–º–µ–Ω–∞
        domain_pattern = r'^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]\.[a-zA-Z]{2,}$'
        if not re.match(domain_pattern, domain):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: mycompany.com")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        if not re.match(email_pattern, admin):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n–ü—Ä–∏–º–µ—Ä: admin@mycompany.com")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è email –∏ –¥–æ–º–µ–Ω–∞
        email_domain = admin.split('@')[1]
        if email_domain != domain:
            result = messagebox.askyesno(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                f"Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω—É:\n"
                f"Email: {admin}\n"
                f"–î–æ–º–µ–Ω: {domain}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?"
            )
            if not result:
                return False
        
        return True
    
    def _save_setup(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if not self._validate_input():
            return
            
        domain = self.domain_var.get().strip()
        admin = self.admin_var.get().strip()
        
        self.result = (domain, admin)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        messagebox.showinfo(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n"
            f"üè¢ –î–æ–º–µ–Ω: {domain}\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin}\n\n"
            f"–î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            f"1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Google API credentials\n"
            f"2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n\n"
            f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∑–∞–ø—É—Å–∫..."
        )
        
        self.root.destroy()
    
    def _cancel_setup(self):
        """–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É?\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.\n–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ."
        )
        if result:
            self.result = None
            self.root.destroy()


def run_setup_wizard() -> Optional[Tuple[str, str]]:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å GUI –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    wizard = SetupWizard()
    return wizard.run_gui_setup()
