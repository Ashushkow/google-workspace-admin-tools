#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
import sys
import json
from pathlib import Path
from typing import Dict, Any, Optional, Union
from dataclasses import dataclass, field
from pydantic import Field, field_validator
from pydantic_settings import BaseSettings
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –≤ bundle
from ..utils.resource_path import get_resource_path, ensure_resource_dir

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class AppSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    # Google Workspace
    google_application_credentials: str = "config/credentials.json"
    google_workspace_domain: str = "yourdomain.com"
    google_workspace_admin: str = "admin@yourdomain.com"
    
    def get_credentials_path(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ credentials —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bundle"""
        return get_resource_path(self.google_application_credentials)
    
    # Application
    app_name: str = "Admin Team Tools"
    app_version: str = "2.2.0"
    app_debug: bool = False
    app_log_level: str = "INFO"
    cli_mode: bool = False
    
    # Database
    database_url: str = "sqlite:///data/admin_tools.db"
    cache_ttl: int = 300
    
    # Security
    secret_key: str = "your-secret-key-here"
    encryption_key: str = "your-encryption-key-here"
    
    # API
    api_rate_limit: int = 100
    api_timeout: int = 30
    api_retry_count: int = 3
    
    # UI
    ui_theme: str = "light"
    ui_language: str = "ru"
    ui_window_size: str = "600x400"
    
    # Logging
    log_file: str = "logs/admin_tools.log"
    log_max_size: str = "10MB"
    log_backup_count: int = 5
    log_format: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    # Development
    dev_mode: bool = False
    debug_sql: bool = False
    profiling_enabled: bool = False
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = False
        extra = "allow"  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
    @field_validator("google_workspace_domain")
    @classmethod
    def validate_domain(cls, v):
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –¥–æ–º–µ–Ω—ã, –≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API
        return v
    
    @field_validator("google_workspace_admin")
    @classmethod
    def validate_admin_email(cls, v):
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ email, –≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API
        return v
    
    @field_validator("app_log_level")
    @classmethod
    def validate_log_level(cls, v):
        valid_levels = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
        if v.upper() not in valid_levels:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {valid_levels}")
        return v.upper()

@dataclass
class GoogleAPIConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google API"""
    scopes: list = field(default_factory=lambda: [
        'https://www.googleapis.com/auth/admin.directory.user',
        'https://www.googleapis.com/auth/admin.directory.group',
        'https://www.googleapis.com/auth/admin.directory.group.member',
        'https://www.googleapis.com/auth/admin.directory.orgunit',
        'https://www.googleapis.com/auth/admin.directory.domain.readonly',
        'https://www.googleapis.com/auth/calendar',
        'https://www.googleapis.com/auth/drive',
        'https://www.googleapis.com/auth/gmail.send'  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
    ])
    credentials_file: str = "config/credentials.json"
    token_file: str = "config/token.pickle"
    
    def get_credentials_path(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É credentials —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bundle"""
        return get_resource_path(self.credentials_file)
    
    def get_token_path(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É token —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bundle"""
        return get_resource_path(self.token_file)
    
class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self._settings: Optional[AppSettings] = None
        self._google_config: Optional[GoogleAPIConfig] = None
        self._first_run_checked = False
        
    def _check_first_run(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º"""
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è FIRST_RUN
        if os.getenv('FIRST_RUN', '').lower() == 'false':
            return False
        
        # 2. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è exe: –µ—Å–ª–∏ —ç—Ç–æ bundled –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ,
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ä—è–¥–æ–º —Å exe, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ bundle
        if getattr(sys, 'frozen', False):
            exe_dir = Path(sys.executable).parent
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è exe –≤ –ø–∞–ø–∫–µ: {exe_dir}")
            
            # –î–ª—è exe –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û —Ñ–∞–π–ª—ã —Ä—è–¥–æ–º —Å exe
            # (–Ω–µ –≤–Ω—É—Ç—Ä–∏ bundle, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ä—è–¥–æ–º —Å exe
            env_file = exe_dir / ".env"
            env_configured = False
            if env_file.exists():
                try:
                    env_content = env_file.read_text(encoding='utf-8')
                    if ('GOOGLE_WORKSPACE_DOMAIN=' in env_content and 
                        'yourdomain.com' not in env_content and 
                        'example.com' not in env_content):
                        env_configured = True
                except:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials —Ä—è–¥–æ–º —Å exe
            credentials_paths = [
                exe_dir / "config" / "credentials.json",
                exe_dir / "credentials.json"
            ]
            
            credentials_found = False
            for cred_path in credentials_paths:
                if cred_path.exists() and cred_path.stat().st_size > 100:
                    credentials_found = True
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º token —Ä—è–¥–æ–º —Å exe
            token_paths = [
                exe_dir / "config" / "token.pickle",
                exe_dir / "token.pickle"
            ]
            
            token_found = False
            for token_path in token_paths:
                if token_path.exists():
                    token_found = True
                    break
            
            # –î–ª—è exe: –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –ù–ï–¢ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä—è–¥–æ–º —Å exe
            is_first = not env_configured and not credentials_found and not token_found
            
            print(f"üîç –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è exe:")
            print(f"  üìÅ .env —Ä—è–¥–æ–º —Å exe: {'‚úÖ' if env_file.exists() else '‚ùå'}")
            print(f"  ‚öôÔ∏è .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if env_configured else '‚ùå'}")
            print(f"  üîë credentials —Ä—è–¥–æ–º —Å exe: {'‚úÖ' if credentials_found else '‚ùå'}")
            print(f"  üé´ token —Ä—è–¥–æ–º —Å exe: {'‚úÖ' if token_found else '‚ùå'}")
            print(f"  üö® –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {'‚úÖ' if is_first else '‚ùå'}")
            
            return is_first
        
        # 3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        env_file = Path(".env")
        if env_file.exists():
            try:
                env_content = env_file.read_text(encoding='utf-8')
                # –ï—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π), —Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
                if ('GOOGLE_WORKSPACE_DOMAIN=' in env_content and 
                    'yourdomain.com' not in env_content and 
                    'example.com' not in env_content):
                    return False
            except:
                pass
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö credentials –≤ dev —Ä–µ–∂–∏–º–µ
        credentials_paths = [
            Path("config/credentials.json"),
            Path("credentials.json")
        ]
        
        credentials_found = False
        for cred_path in credentials_paths:
            if cred_path.exists() and cred_path.stat().st_size > 100:  # –ù–µ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                credentials_found = True
                break
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º token —Ñ–∞–π–ª (–ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        token_paths = [
            Path("config/token.pickle"),
            Path("token.pickle")
        ]
        
        token_found = False
        for token_path in token_paths:
            if token_path.exists():
                token_found = True
                break
        
        # 6. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –ù–ï–¢ —Ñ–∞–π–ª–∞ .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ò –ù–ï–¢ credentials
        is_first = not credentials_found and not (env_file.exists() and 'GOOGLE_WORKSPACE_DOMAIN=' in env_file.read_text(encoding='utf-8'))
        
        if is_first:
            print(f"üîç –û–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ (dev —Ä–µ–∂–∏–º):")
            print(f"  üìÅ .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {'‚úÖ' if env_file.exists() else '‚ùå'}")
            print(f"  üîë credentials.json: {'‚úÖ' if credentials_found else '‚ùå'}")  
            print(f"  üé´ token.pickle: {'‚úÖ' if token_found else '‚ùå'}")
            
        return is_first
    
    def _set_first_run_environment(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        os.environ['FIRST_RUN'] = 'True'
        os.environ['SKIP_CONFIG_VALIDATION'] = 'True'
        os.environ['GOOGLE_WORKSPACE_DOMAIN'] = 'yourdomain.com'  # –í—Ä–µ–º–µ–Ω–Ω–æ
        os.environ['GOOGLE_WORKSPACE_ADMIN'] = 'admin@yourdomain.com'  # –í—Ä–µ–º–µ–Ω–Ω–æ
    
    @property
    def settings(self) -> AppSettings:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self._settings is None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not self._first_run_checked:
                if self._check_first_run():
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                    self._set_first_run_environment()
                self._first_run_checked = True
                
            self._settings = AppSettings()
        return self._settings
    
    @property
    def google(self) -> GoogleAPIConfig:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Google API"""
        if self._google_config is None:
            self._google_config = GoogleAPIConfig()
        return self._google_config
    
    def reload(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self._settings = None
        self._google_config = None
        load_dotenv(override=True)
    
    def get_database_path(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        url = self.settings.database_url
        if url.startswith("sqlite:///"):
            relative_path = url.replace("sqlite:///", "")
            path = get_resource_path(relative_path)
            path.parent.mkdir(parents=True, exist_ok=True)
            return path
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {url}")
    
    def get_log_path(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤"""
        path = get_resource_path(self.settings.log_file)
        path.parent.mkdir(parents=True, exist_ok=True)
        return path
    
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        return self.settings.dev_mode or self.settings.app_debug
    
    def export_to_dict(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return self.settings.dict()
    
    def export_to_json(self, file_path: Union[str, Path]) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(self.export_to_dict(), f, indent=2, ensure_ascii=False)
    
    def is_first_run(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º"""
        return self._check_first_run()
    
    def create_initial_config(self, domain: str, admin_email: str) -> None:
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        env_content = f"""# Google Workspace Configuration
GOOGLE_WORKSPACE_DOMAIN={domain}
GOOGLE_WORKSPACE_ADMIN={admin_email}

# Application Settings
APP_NAME=Admin Team Tools
APP_VERSION=2.2.0
APP_DEBUG=false

# Disable validation for setup
SKIP_CONFIG_VALIDATION=false
FIRST_RUN=false
"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
        if getattr(sys, 'frozen', False):
            # –î–ª—è exe - —Å–æ–∑–¥–∞–µ–º .env —Ä—è–¥–æ–º —Å exe —Ñ–∞–π–ª–æ–º
            app_dir = Path(sys.executable).parent
            env_file = app_dir / ".env"
        else:
            # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –≤ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ
            env_file = Path(".env")
            
        try:
            env_file.write_text(env_content, encoding='utf-8')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {env_file.absolute()}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ –∫–∞–∫ fallback
            try:
                Path(".env").write_text(env_content, encoding='utf-8')
                print("‚úÖ .env —Å–æ–∑–¥–∞–Ω –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
            except:
                pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['GOOGLE_WORKSPACE_DOMAIN'] = domain
        os.environ['GOOGLE_WORKSPACE_ADMIN'] = admin_email
        os.environ['FIRST_RUN'] = 'false'
        os.environ['SKIP_CONFIG_VALIDATION'] = 'false'
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –¥–æ–º–µ–Ω={domain}, –∞–¥–º–∏–Ω={admin_email}")
        os.environ['GOOGLE_WORKSPACE_DOMAIN'] = domain
        os.environ['GOOGLE_WORKSPACE_ADMIN'] = admin_email
        os.environ['SKIP_CONFIG_VALIDATION'] = 'false'
        os.environ['FIRST_RUN'] = 'false'
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.reload()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = ConfigManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def get_scopes():
    """–ü–æ–ª—É—á–∏—Ç—å scopes"""
    return config.google.scopes

def get_credentials_file():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ credentials —Ñ–∞–π–ª—É"""
    return config.google.get_credentials_path()

def get_token_pickle():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ token —Ñ–∞–π–ª—É"""
    return config.google.get_token_path()

def get_domain_admin_email():
    """–ü–æ–ª—É—á–∏—Ç—å email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–º–µ–Ω–∞"""
    return config.settings.google_workspace_admin

def get_workspace_domain():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω workspace"""
    return config.settings.google_workspace_domain

def get_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return config.settings.dict()

def load_settings() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return config.export_to_dict()
