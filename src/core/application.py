#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Admin Team Tools —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
"""

import asyncio
import logging
from typing import Optional
from pathlib import Path

from .di_container import container
from .domain import User, Group
from ..services.user_service import UserService
from ..services.group_service import GroupService
from ..repositories.google_api_repository import GoogleUserRepository, GoogleGroupRepository
from ..repositories.cache_repository import CacheRepository
from ..repositories.audit_repository import SQLiteAuditRepository
from ..config.enhanced_config import config
from ..utils.enhanced_logger import setup_logging
from ..utils.exceptions import AdminToolsError, ConfigurationError
from ..utils.health_check import HealthChecker


class Application:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Admin Team Tools"""
    
    def __init__(self):
        self.logger: Optional[logging.Logger] = None
        self.health_checker: Optional[HealthChecker] = None
        self.user_service: Optional[UserService] = None
        self.group_service: Optional[GroupService] = None
        self._running = False
        self._setup_complete = False
    
    async def setup(self) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            self.logger = setup_logging(config.settings.app_log_level)
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Admin Team Tools v{config.settings.app_version}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._validate_configuration()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            await self._setup_dependencies()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            self.health_checker = HealthChecker()
            health_status = await self.health_checker.check_all()
            
            if not health_status.is_healthy:
                self.logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                for issue in health_status.issues:
                    self.logger.error(f"  ‚Ä¢ {issue}")
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
            self.user_service = container.resolve(UserService)
            self.group_service = container.resolve(GroupService)
            
            self._setup_complete = True
            self.logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            else:
                print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            return False
    
    async def start(self) -> int:
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
        """
        if not self._setup_complete:
            success = await self.setup()
            if not success:
                return 1
        
        try:
            self._running = True
            self.logger.info("üèÉ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º CLI
            if config.settings.cli_mode:
                return await self._run_cli()
            
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º GUI
            return await self._run_gui()
            
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return 0
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return 1
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self._running:
            self.logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            self._running = False
            
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await self._cleanup_resources()
            
            self.logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    async def _validate_configuration(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings = config.settings
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ credentials
            creds_path = Path(settings.google_application_credentials)
            if not creds_path.exists():
                raise ConfigurationError(
                    f"–§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {creds_path}\\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google API —Å–æ–≥–ª–∞—Å–Ω–æ docs/API_SETUP.md"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
            if settings.google_workspace_domain == "yourdomain.com":
                raise ConfigurationError(
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º–µ–Ω Google Workspace –≤ .env —Ñ–∞–π–ª–µ"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if settings.google_workspace_admin == "admin@yourdomain.com":
                raise ConfigurationError(
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ .env —Ñ–∞–π–ª–µ"
                )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            Path("logs").mkdir(exist_ok=True)
            Path("data").mkdir(exist_ok=True)
            Path("cache").mkdir(exist_ok=True)
            
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
        except Exception as e:
            raise ConfigurationError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    async def _setup_dependencies(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        from ..repositories.interfaces import IUserRepository, IGroupRepository, ICacheRepository, IAuditRepository
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
        container.register(IUserRepository, GoogleUserRepository, singleton=True)
        container.register(IGroupRepository, GoogleGroupRepository, singleton=True)
        container.register(ICacheRepository, CacheRepository, singleton=True)
        container.register(IAuditRepository, SQLiteAuditRepository, singleton=True)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        container.register(UserService, singleton=True)
        container.register(GroupService, singleton=True)
        
        self.logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def _run_cli(self) -> int:
        """–ó–∞–ø—É—Å–∫ –≤ CLI —Ä–µ–∂–∏–º–µ"""
        from ..cli.main import CLIApplication
        
        cli_app = CLIApplication(
            user_service=self.user_service,
            group_service=self.group_service
        )
        
        return await cli_app.run()
    
    async def _run_gui(self) -> int:
        """–ó–∞–ø—É—Å–∫ –≤ GUI —Ä–µ–∂–∏–º–µ"""
        try:
            from ..ui.main_window import AdminToolsMainWindow
            from ..api.service_adapter import ServiceAdapter
            
            self.logger.info("üñ•Ô∏è –ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GUI
            service_adapter = ServiceAdapter(
                user_service=self.user_service,
                group_service=self.group_service
            )
            
            # –°–æ–∑–¥–∞–µ–º GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            gui_app = AdminToolsMainWindow(service=service_adapter)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º GUI (—ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            gui_app.mainloop()
            
            return 0
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
            return 1
    
    async def _cleanup_resources(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            if hasattr(self, 'cache_repo'):
                await self.cache_repo.close()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
            if hasattr(self, 'audit_repo'):
                await self.audit_repo.close()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_files = Path("temp").glob("*")
            for temp_file in temp_files:
                if temp_file.is_file():
                    temp_file.unlink()
            
            self.logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main() -> int:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = Application()
    return await app.start()


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è CLI
def cli_main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è CLI"""
    return asyncio.run(main())


if __name__ == "__main__":
    exit_code = cli_main()
    exit(exit_code)
