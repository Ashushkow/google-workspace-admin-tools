# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–±–æ—Ç–∞ —Å Google Directory API.
"""

import os
import pickle
import json
from typing import Any
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from google.oauth2 import service_account
from .config.enhanced_config import config, get_domain_admin_email

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
SCOPES = config.google.scopes
CREDENTIALS_FILE = config.google.credentials_file
TOKEN_PICKLE = config.google.token_file


def detect_credentials_type() -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ credentials.json
    
    Returns:
        'service_account' –∏–ª–∏ 'oauth2'
    """
    try:
        with open(CREDENTIALS_FILE, 'r', encoding='utf-8') as f:
            creds_data = json.load(f)
            
        return 'service_account' if creds_data.get('type') == 'service_account' else 'oauth2' if 'installed' in creds_data else (_ for _ in ()).throw(ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç credentials.json"))
            
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è credentials.json: {e}")


def get_service_account_credentials():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ credentials –¥–ª—è Service Account —Å Domain-wide delegation"""
    creds = service_account.Credentials.from_service_account_file(
        CREDENTIALS_FILE, 
        scopes=SCOPES
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    domain_admin_email = get_domain_admin_email()
    
    # –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–æ–º–µ–Ω–∞
    if domain_admin_email and domain_admin_email != 'admin@yourdomain.com':
        creds = creds.with_subject(domain_admin_email)
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Service Account —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è {domain_admin_email}")
    else:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Service Account –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
        print("‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        # –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º credentials –∫–∞–∫ –µ—Å—Ç—å
        # –ü—É—Å—Ç—å Google API —Å–∞–º –≤—ã–¥–∞—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    
    return creds


def get_oauth2_credentials():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ credentials –¥–ª—è OAuth 2.0"""
    creds = None
    token_path = TOKEN_PICKLE
    os.makedirs(os.path.dirname(token_path), exist_ok=True)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(token_path):
        with open(token_path, 'rb') as token:
            creds = pickle.load(token)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω
            try:
                print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                creds.refresh(Request())
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                creds = None
        
        if not creds:
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            try:
                print("üåê –ó–∞–ø—É—Å–∫ OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                print("‚è∞ –ë—Ä–∞—É–∑–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥")
                print("üìã –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL –∏–∑ –∫–æ–Ω—Å–æ–ª–∏")
                
                flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                import threading
                import time
                
                auth_result = [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                auth_error = [None]
                
                def run_auth():
                    try:
                        auth_result[0] = flow.run_local_server(port=0, timeout_seconds=30)
                    except Exception as e:
                        auth_error[0] = e
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                auth_thread = threading.Thread(target=run_auth)
                auth_thread.daemon = True
                auth_thread.start()
                
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                auth_thread.join(timeout=35)
                
                if auth_thread.is_alive():
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (35 —Å–µ–∫). –ü—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    raise TimeoutError("OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
                
                if auth_error[0]:
                    raise auth_error[0]
                
                if auth_result[0]:
                    creds = auth_result[0]
                    print("‚úÖ OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å credentials")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Service Account credentials")
                print("üìã –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OAuth 2.0 –≤ Google Cloud Console")
                raise
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if creds:
            with open(token_path, 'wb') as token:
                pickle.dump(creds, token)
    
    return creds


def get_service() -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ Google Directory API.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø credentials (Service Account –∏–ª–∏ OAuth 2.0)
    –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    Returns:
        –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å Google Directory API
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω
        ValueError: –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç credentials.json –Ω–µ–≤–µ—Ä–Ω—ã–π
        ConfigurationError: –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not _is_configuration_valid():
        # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é - –ø–æ–∑–≤–æ–ª—è–µ–º GUI –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GUI –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        if os.getenv('ALLOW_INCOMPLETE_CONFIG', 'False').lower() == 'true':
            print("üîÑ –†–∞–∑—Ä–µ—à–µ–Ω –∑–∞–ø—É—Å–∫ —Å –Ω–µ–ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        else:
            raise ValueError(
                "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GUI –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
    
    if not os.path.exists(CREDENTIALS_FILE):
        raise FileNotFoundError(f"–§–∞–π–ª {CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø credentials
    creds_type = detect_credentials_type()
    
    if creds_type == 'service_account':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Service Account
        creds = get_service_account_credentials()
    elif creds_type == 'oauth2':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OAuth 2.0
        creds = get_oauth2_credentials()
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø credentials: {creds_type}")
    
    return build('admin', 'directory_v1', credentials=creds)


def _is_configuration_valid() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if config.settings.google_workspace_domain == "yourdomain.com":
            print("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: yourdomain.com)")
            return False
            
        if config.settings.google_workspace_admin == "admin@yourdomain.com":
            print("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin@yourdomain.com)")
            return False
            
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {config.settings.google_workspace_domain}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
