#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è Google API.
"""

from typing import List, Optional
from ..core.domain import User, Group
from .interfaces import IUserRepository, IGroupRepository
from ..core.di_container import service
from ..api.google_api_client import GoogleAPIClient
from ..config.enhanced_config import config
import logging

try:
    from googleapiclient.errors import HttpError
except ImportError:
    HttpError = Exception


@service(singleton=True)
class GoogleUserRepository(IUserRepository):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Google Workspace"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.client = GoogleAPIClient(config.settings.google_application_credentials)
        self._initialized = False
    
    async def _ensure_initialized(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"""
        if not self._initialized:
            self._initialized = self.client.initialize()
            if not self._initialized:
                self.logger.warning("Google API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
    
    async def get_all(self) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        await self._ensure_initialized()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –∏ ServiceAdapter - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ auth.get_service()
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Google API
            from ..auth import get_service
            
            self.logger.info("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π Google API...")
            service = get_service()
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (—Ç–æ—Ç –∂–µ –∫–æ–¥ —á—Ç–æ –≤ ServiceAdapter)
            all_users = []
            page_token = None
            page_count = 0
            
            while True:
                page_count += 1
                self.logger.info(f"  üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {page_count}...")
                
                request_params = {
                    'customer': 'my_customer',
                    'maxResults': 500,  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                    'orderBy': 'email'
                }
                
                if page_token:
                    request_params['pageToken'] = page_token
                
                result = service.users().list(**request_params).execute()
                page_users = result.get('users', [])
                
                if page_users:
                    all_users.extend(page_users)
                    self.logger.info(f"    ‚Ü≥ –ü–æ–ª—É—á–µ–Ω–æ {len(page_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_count} (–≤—Å–µ–≥–æ: {len(all_users)})")
                else:
                    self.logger.info(f"    ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count} –ø—É—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                page_token = result.get('nextPageToken')
                if not page_token:
                    self.logger.info(f"    üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    break
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if page_count > 50:
                    self.logger.warning(f"    ‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
                    break
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã User
            users: List[User] = []
            for api_user in all_users:
                users.append(
                    User(
                        user_id=api_user.get('id', ''),
                        primary_email=api_user.get('primaryEmail', ''),
                        full_name=api_user.get('name', {}).get('fullName', ''),
                        first_name=api_user.get('name', {}).get('givenName', ''),
                        last_name=api_user.get('name', {}).get('familyName', ''),
                        suspended=api_user.get('suspended', False),
                        org_unit_path=api_user.get('orgUnitPath', '/')
                    )
                )
            
            if users:
                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø—Ä—è–º–æ–≥–æ Google API")
                return users
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API: {e}")
        
        # –§–æ–ª–±–µ–∫ - –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å
        self.logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google API")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω
        configured_domain = self._get_configured_domain()
        
        return [
            User(
                user_id="demo1",
                primary_email=f"demo1@{configured_domain}",
                full_name="–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 (–¢–ï–°–¢)",
                first_name="–î–µ–º–æ",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1"
            ),
            User(
                user_id="demo2", 
                primary_email=f"demo2@{configured_domain}",
                full_name="–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 (–¢–ï–°–¢)",
                first_name="–î–µ–º–æ",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2"
            )
        ]
    
    def _get_configured_domain(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from ..config.enhanced_config import config
            domain = config.settings.google_workspace_domain
            if domain and domain != "yourdomain.com":
                return domain
            return "example.com"
        except:
            return "example.com"
    
    async def get_by_email(self, email: str) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        await self._ensure_initialized()
        
        if not self._initialized:
            demo = await self.get_all()
            for u in demo:
                if u.email.lower() == email.lower():
                    return u
            return None
        
        try:
            api_user = self.client.get_user_by_email(email)
            if not api_user:
                return None
            return User(
                user_id=api_user.get('id', ''),
                primary_email=api_user.get('primaryEmail', ''),
                full_name=api_user.get('name', {}).get('fullName', ''),
                first_name=api_user.get('name', {}).get('givenName', ''),
                last_name=api_user.get('name', {}).get('familyName', ''),
                suspended=api_user.get('suspended', False),
                org_unit_path=api_user.get('orgUnitPath', '/')
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}: {e}")
            return None
    
    async def create(self, user: User) -> User:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._ensure_initialized()
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} (–∑–∞–≥–ª—É—à–∫–∞)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Google API
        return user
    
    async def update(self, user: User) -> User:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._ensure_initialized()
        self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} (–∑–∞–≥–ª—É—à–∫–∞)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google API
        return user
    
    async def delete(self, email: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._ensure_initialized()
        self.logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} (–∑–∞–≥–ª—É—à–∫–∞)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google API
        return True
    
    async def search(self, query: str) -> List[User]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        await self._ensure_initialized()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        all_users = await self.get_all()
        q = query.lower()
        
        filtered = [u for u in all_users if q in u.email.lower() or q in u.full_name.lower()]
        
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
        return filtered
    
    async def get_by_org_unit(self, org_unit_path: str) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–º—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é"""
        await self._ensure_initialized()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ OU
        all_users = await self.get_all()
        filtered = [u for u in all_users if u.org_unit_path == org_unit_path]
        
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ OU '{org_unit_path}'")
        return filtered


@service(singleton=True)
class GoogleGroupRepository(IGroupRepository):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥—Ä—É–ø–ø Google Workspace"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.client = GoogleAPIClient(config.settings.google_application_credentials)
        self._initialized = False
    
    async def _ensure_initialized(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"""
        if not self._initialized:
            self._initialized = self.client.initialize()
            if not self._initialized:
                self.logger.warning("Google API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
    
    async def get_all(self) -> List[Group]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã"""
        await self._ensure_initialized()
        
        if not self._initialized:
            self.logger.info("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
            return []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Google API (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
            api_groups = self.client.get_groups()
            groups: List[Group] = []
            
            for g in api_groups:
                groups.append(
                    Group(
                        email=g.get('email', ''),
                        name=g.get('name', ''),
                        description=g.get('description', ''),
                        members_count=int(g.get('directMembersCount', 0) or 0)
                    )
                )
            
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø –∏–∑ Google API")
            return groups
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
            return []
    
    async def get_by_email(self, email: str) -> Optional[Group]:
        """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ email"""
        await self._ensure_initialized()
        
        all_groups = await self.get_all()
        for group in all_groups:
            if group.email.lower() == email.lower():
                return group
        return None
    
    async def create(self, group: Group) -> Group:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"""
        await self._ensure_initialized()
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.email} (–∑–∞–≥–ª—É—à–∫–∞)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Google API
        return group
    
    async def update(self, group: Group) -> Group:
        """–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"""
        await self._ensure_initialized()
        self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.email} (–∑–∞–≥–ª—É—à–∫–∞)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google API
        return group
    
    async def delete(self, email: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"""
        await self._ensure_initialized()
        self.logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {email} (–∑–∞–≥–ª—É—à–∫–∞)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google API
        return True
    
    async def add_member(self, group_email: str, member_email: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É"""
        await self._ensure_initialized()
        
        if not self._initialized:
            self.logger.warning("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            return False
        
        try:
            return self.client.add_group_member(group_email, member_email)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {member_email} –≤ {group_email}: {e}")
            return False
    
    async def remove_member(self, group_email: str, member_email: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        await self._ensure_initialized()
        
        if not self._initialized:
            self.logger.warning("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            return False
        
        try:
            return self.client.remove_group_member(group_email, member_email)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {member_email} –∏–∑ {group_email}: {e}")
            return False
    
    async def get_members(self, group_email: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
        await self._ensure_initialized()
        
        if not self._initialized:
            return []
        
        try:
            members = self.client.get_group_members(group_email)
            return [m.get('email', '') for m in members if m.get('email')]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {group_email}: {e}")
            return []
