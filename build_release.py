#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ exe-—Ñ–∞–π–ª–∞ Admin Team Tools
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def print_step(step, message):
    """–ü–µ—á–∞—Ç—å —ç—Ç–∞–ø–∞ —Å–±–æ—Ä–∫–∏"""
    print(f"\n{'='*50}")
    print(f"–≠–¢–ê–ü {step}: {message}")
    print(f"{'='*50}")

def get_file_size(file_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ MB"""
    if os.path.exists(file_path):
        size_bytes = os.path.getsize(file_path)
        size_mb = size_bytes / (1024 * 1024)
        return size_mb
    return 0

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print(f"\nüîß {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def clean_build_dirs():
    """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–±–æ—Ä–∫–∏"""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"üóëÔ∏è  –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")

def check_upx():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è UPX"""
    try:
        upx_path = os.path.join(os.environ['LOCALAPPDATA'], 
                               'Microsoft', 'WinGet', 'Packages', 
                               'UPX.UPX_Microsoft.Winget.Source_8wekyb3d8bbwe',
                               'upx-5.0.1-win64', 'upx.exe')
        
        if os.path.exists(upx_path):
            result = subprocess.run([upx_path, '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ UPX –Ω–∞–π–¥–µ–Ω")
                return upx_path
    except:
        pass
    
    # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π upx
    try:
        result = subprocess.run(['upx', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ UPX –Ω–∞–π–¥–µ–Ω")
            return 'upx'
    except:
        pass
    
    print("‚ùå UPX –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def build_exe():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏"""
    print_step(1, "–ü–û–î–ì–û–¢–û–í–ö–ê")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('main_optimized.py'):
        print("‚ùå –§–∞–π–ª main_optimized.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not os.path.exists('requirements.txt'):
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –û—á–∏—Å—Ç–∫–∞
    clean_build_dirs()
    
    print_step(2, "–°–ë–û–†–ö–ê –ë–ê–ó–û–í–û–ì–û EXE")
    
    # –ö–æ–º–∞–Ω–¥–∞ PyInstaller —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    pyinstaller_cmd = [
        'pyinstaller',
        '--onefile',
        '--noconsole',
        '--clean',
        '--optimize=2',
        '--exclude-module=PIL',
        '--exclude-module=matplotlib',
        '--exclude-module=numpy',
        '--exclude-module=pandas',
        '--exclude-module=scipy',
        '--exclude-module=IPython',
        '--exclude-module=jupyter',
        '--exclude-module=notebook',
        '--exclude-module=PyQt5',
        '--exclude-module=PySide2',
        '--exclude-module=tkinter.test',
        '--exclude-module=test',
        '--exclude-module=unittest',
        '--exclude-module=doctest',
        '--exclude-module=pdb',
        '--exclude-module=pydoc',
        '--exclude-module=xmlrpc',
        '--name=AdminTeamTools',
        'main_optimized.py'
    ]
    
    if not run_command(' '.join(pyinstaller_cmd), "–°–±–æ—Ä–∫–∞ —Å PyInstaller"):
        return False
    
    exe_path = 'dist/AdminTeamTools.exe'
    if not os.path.exists(exe_path):
        print("‚ùå –§–∞–π–ª exe –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return False
    
    original_size = get_file_size(exe_path)
    print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–æ —Å–∂–∞—Ç–∏—è: {original_size:.1f} MB")
    
    print_step(3, "–°–ñ–ê–¢–ò–ï –° UPX")
    
    # UPX —Å–∂–∞—Ç–∏–µ
    upx_path = check_upx()
    if upx_path:
        upx_cmd = f'"{upx_path}" --best --force "{exe_path}"'
        if run_command(upx_cmd, "–°–∂–∞—Ç–∏–µ —Å UPX"):
            compressed_size = get_file_size(exe_path)
            compression_ratio = (original_size - compressed_size) / original_size * 100
            print(f"üì¶ –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {compressed_size:.1f} MB")
            print(f"üíæ –≠–∫–æ–Ω–æ–º–∏—è: {compression_ratio:.1f}%")
        else:
            print("‚ö†Ô∏è  –°–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ exe —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ö†Ô∏è  UPX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∂–∞—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        print("üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ UPX:")
        print("   1. –°–∫–∞—á–∞–π—Ç–µ —Å https://upx.github.io/")
        print("   2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH")
    
    print_step(4, "–§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø")
    
    final_size = get_file_size(exe_path)
    print(f"üéâ –ì–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {exe_path}")
    print(f"üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {final_size:.1f} MB")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    final_exe = 'AdminTeamTools.exe'
    if os.path.exists(final_exe):
        os.remove(final_exe)
    shutil.copy2(exe_path, final_exe)
    print(f"üìÅ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {final_exe}")
    
    print_step("‚úÖ", "–°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ: {final_exe}")
    print(f"üì¶ –†–∞–∑–º–µ—Ä: {final_size:.1f} MB")
    
    return True

if __name__ == "__main__":
    success = build_exe()
    if success:
        print("\nüéâ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
    else:
        print("\n‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        sys.exit(1)