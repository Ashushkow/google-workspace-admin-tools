#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç OAuth 2.0 Google API –±–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
import sys
import logging
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_oauth2_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OAuth 2.0 –±–µ–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    print("=" * 70)
    print("üîë –ü–†–Ø–ú–û–ô –¢–ï–°–¢ OAUTH 2.0 GOOGLE WORKSPACE API")
    print("=" * 70)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Google API –Ω–∞–ø—Ä—è–º—É—é
        from google_auth_oauthlib.flow import InstalledAppFlow
        from google.auth.transport.requests import Request
        from googleapiclient.discovery import build
        from googleapiclient.errors import HttpError
        import pickle
        import json
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º scopes
        SCOPES = [
            'https://www.googleapis.com/auth/admin.directory.user',
            'https://www.googleapis.com/auth/admin.directory.group',
            'https://www.googleapis.com/auth/admin.directory.orgunit',
        ]
        
        credentials_file = Path("credentials.json")
        token_file = Path("token.pickle")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        if not credentials_file.exists():
            print("‚ùå credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ß–∏—Ç–∞–µ–º credentials
        with open(credentials_file, 'r') as f:
            creds_data = json.load(f)
        
        if 'installed' not in creds_data:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç credentials.json - —Ç—Ä–µ–±—É–µ—Ç—Å—è OAuth 2.0 Desktop Application")
            return False
        
        print("‚úÖ OAuth 2.0 credentials –Ω–∞–π–¥–µ–Ω—ã")
        print(f"   Client ID: {creds_data['installed']['client_id']}")
        
        credentials = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        if token_file.exists():
            print("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω...")
            try:
                with open(token_file, 'rb') as token:
                    credentials = pickle.load(token)
                print("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
                credentials = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        if not credentials or not credentials.valid:
            if credentials and credentials.expired and credentials.refresh_token:
                print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω...")
                try:
                    credentials.refresh(Request())
                    print("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                    credentials = None
            
            if not credentials or not credentials.valid:
                print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                print("–í–ù–ò–ú–ê–ù–ò–ï: –°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Workspace")
                
                flow = InstalledAppFlow.from_client_secrets_file(
                    credentials_file, SCOPES)
                credentials = flow.run_local_server(
                    port=0,
                    prompt='select_account'
                )
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
                with open(token_file, 'wb') as token:
                    pickle.dump(credentials, token)
                print("üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        print("üîß –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Admin SDK...")
        service = build('admin', 'directory_v1', credentials=credentials)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        domains_result = service.domains().list(customer='my_customer').execute()
        domains = domains_result.get('domains', [])
        
        if domains:
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {len(domains)}")
            for domain in domains:
                print(f"   ‚Ä¢ {domain['domainName']} ({'–û—Å–Ω–æ–≤–Ω–æ–π' if domain.get('isPrimary') else '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π'})")
        else:
            print("‚ö†Ô∏è –î–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users_result = service.users().list(
            customer='my_customer',
            maxResults=10,
            orderBy='email'
        ).execute()
        
        users = users_result.get('users', [])
        
        if users:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            for i, user in enumerate(users[:5]):
                email = user.get('primaryEmail', 'N/A')
                name = user.get('name', {}).get('fullName', 'N/A')
                suspended = user.get('suspended', False)
                org_unit = user.get('orgUnitPath', '/')
                
                status = "üî¥ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" if suspended else "üü¢ –ê–ö–¢–ò–í–ï–ù"
                print(f"   {i+1}. {email}")
                print(f"      –ò–º—è: {name}")
                print(f"      –°—Ç–∞—Ç—É—Å: {status}")
                print(f"      –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {org_unit}")
                print()
            
            if len(users) > 5:
                print(f"   ... –∏ –µ—â–µ {len(users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
            print("=" * 70)
            print("üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            print("‚úÖ OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("=" * 70)
            return True
            
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Google Workspace")
            print("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –∞–∫–∫–∞—É–Ω—Ç–∞")
            print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ scopes")
            return False
        
    except HttpError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ Google API: {e}")
        if e.resp.status == 403:
            print("üí° –û—à–∏–±–∫–∞ 403 - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        elif e.resp.status == 401:
            print("üí° –û—à–∏–±–∫–∞ 401 - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
        return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        success = test_oauth2_direct()
        if success:
            print("\nüéØ OAuth 2.0 –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å OAuth 2.0")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
