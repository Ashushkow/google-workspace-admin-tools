#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±–æ—Ä–æ–º OU
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

try:
    from src.api.orgunits_api import list_orgunits, format_orgunits_for_combobox, get_orgunit_path_from_display_name
    from src.api.users_api import create_user
    from src.ui.user_windows import CreateUserWindow
    print("‚úÖ –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_ou_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å OU"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π OU...")
    
    # –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mock_orgunits = [
        {
            'name': 'Root Organization',
            'orgUnitPath': '/',
            'description': '–ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'
        },
        {
            'name': 'HR',
            'orgUnitPath': '/HR',
            'description': 'Human Resources'
        },
        {
            'name': 'Admin',
            'orgUnitPath': '/HR/Admin',
            'description': 'Administration team under HR'
        },
        {
            'name': 'IT',
            'orgUnitPath': '/IT',
            'description': 'Information Technology'
        },
        {
            'name': 'Developers',
            'orgUnitPath': '/IT/Developers',
            'description': 'Development team'
        }
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è combobox
    formatted = format_orgunits_for_combobox(mock_orgunits)
    print("üìã –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ OU –¥–ª—è UI:")
    for ou in formatted:
        print(f"  - {ou}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏
    print("\nüîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π OU:")
    test_cases = [
        ("üè† –ö–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "/"),
        ("üè¢ HR", "/HR"),
        ("  üè¢ Admin", "/HR/Admin"),
        ("üè¢ IT", "/IT"),
        ("  üè¢ Developers", "/IT/Developers")
    ]
    
    for display_name, expected_path in test_cases:
        actual_path = get_orgunit_path_from_display_name(display_name, mock_orgunits)
        status = "‚úÖ" if actual_path == expected_path else "‚ùå"
        print(f"  {status} '{display_name}' -> '{actual_path}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected_path}')")

def test_user_creation_with_ou():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å OU"""
    print("\nüë§ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å OU:")
    print("(–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞ - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç)")
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ API
    example_calls = [
        {
            'email': 'john.doe@sputnik8.com',
            'first_name': 'John',
            'last_name': 'Doe',
            'password': 'SecurePass123!',
            'org_unit_path': '/HR'
        },
        {
            'email': 'jane.admin@sputnik8.com',
            'first_name': 'Jane',
            'last_name': 'Admin',
            'password': 'AdminPass456!',
            'org_unit_path': '/HR/Admin'
        },
        {
            'email': 'dev.user@sputnik8.com',
            'first_name': 'Dev',
            'last_name': 'User',
            'password': 'DevPass789!',
            'org_unit_path': '/IT/Developers'
        }
    ]
    
    for i, call_params in enumerate(example_calls, 1):
        print(f"\n  üìù –ü—Ä–∏–º–µ—Ä {i}:")
        print(f"     Email: {call_params['email']}")
        print(f"     –ò–º—è: {call_params['first_name']} {call_params['last_name']}")
        print(f"     OU: {call_params['org_unit_path']}")
        print(f"     API call: create_user(service, email='{call_params['email']}', "
              f"first_name='{call_params['first_name']}', last_name='{call_params['last_name']}', "
              f"password='***', org_unit_path='{call_params['org_unit_path']}')")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±–æ—Ä–æ–º OU")
    print("=" * 70)
    
    try:
        test_ou_functions()
        test_user_creation_with_ou()
        
        print("\n" + "=" * 70)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("1. –í –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –ø–æ–ª–µ '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (OU)'")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞")
        print("3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏")
        print("4. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–æ –∫–æ—Ä–Ω–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
