# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Admin Team Tools.
"""

import tkinter as tk
from tkinter import messagebox, scrolledtext, ttk, simpledialog, filedialog
import csv
from datetime import datetime
from typing import Any, Optional

from ui_components import ModernColors, ModernButton, StatusIndicator, center_window
from user_windows import CreateUserWindow, EditUserWindow
from employee_list_window import EmployeeListWindow
from additional_windows import AsanaInviteWindow, AddToGroupWindow, ErrorLogWindow
from group_management import GroupManagementWindow
from users_api import get_user_list
from groups_api import list_groups
from data_cache import data_cache
from simple_utils import async_manager, error_handler, SimpleProgressDialog, show_api_error


class AdminToolsMainWindow(tk.Tk):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Admin Team Tools.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Google Workspace.
    """
    
    def __init__(self, service=None):
        super().__init__()
        self.service = service
        self._ui_initialized = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.title('Admin Team Tools v2.0 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Google Workspace')
        self.geometry('750x500')
        self.configure(bg=ModernColors.BACKGROUND)
        self.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self.after(1000, self._delayed_init)
        
        # –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.check_service_status()

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.create_main_area()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.create_status_bar()

    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = tk.Frame(self, bg=ModernColors.PRIMARY, height=60)
        header_frame.pack(fill='x', padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            header_frame, 
            text='Admin Team Tools',
            font=('Arial', 16, 'bold'),
            bg=ModernColors.PRIMARY,
            fg='white'
        )
        title_label.pack(side='left', padx=15, pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        refresh_btn = ModernButton(
            header_frame, 
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            command=self.refresh_data,
            style='secondary',
            font=('Arial', 9)
        )
        refresh_btn.pack(side='right', padx=15, pady=15)

    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar_frame = tk.Frame(self, bg=ModernColors.BACKGROUND, height=80)
        toolbar_frame.pack(fill='x', padx=15, pady=(5, 0))
        toolbar_frame.pack_propagate(False)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        top_buttons_frame = tk.Frame(toolbar_frame, bg=ModernColors.BACKGROUND)
        top_buttons_frame.pack(fill='x', pady=(0, 5))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        ModernButton(
            top_buttons_frame,
            text='üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
            command=self.open_employee_list,
            style='primary',
            font=('Arial', 9)
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            top_buttons_frame,
            text='‚ûï –°–æ–∑–¥–∞—Ç—å',
            command=self.open_create_user,
            style='success',
            font=('Arial', 9)
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            top_buttons_frame,
            text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
            command=self.open_edit_user,
            style='secondary',
            font=('Arial', 9)
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            top_buttons_frame,
            text='ÔøΩ Asana',
            command=self.open_asana_invite,
            style='warning',
            font=('Arial', 9)
        ).pack(side='right', padx=(8, 0))
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        bottom_buttons_frame = tk.Frame(toolbar_frame, bg=ModernColors.BACKGROUND)
        bottom_buttons_frame.pack(fill='x')
        
        # –ì—Ä—É–ø–ø—ã
        ModernButton(
            bottom_buttons_frame,
            text='ÔøΩ –ì—Ä—É–ø–ø—ã',
            command=self.open_group_management,
            style='info',
            font=('Arial', 9)
        ).pack(side='left', padx=(0, 8))
        
        ModernButton(
            bottom_buttons_frame,
            text='ÔøΩ –í –≥—Ä—É–ø–ø—É',
            command=self.open_add_to_group,
            style='secondary',
            font=('Arial', 9)
        ).pack(side='left', padx=(0, 8))

    def create_main_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏"""
        main_frame = tk.Frame(self, bg=ModernColors.BACKGROUND)
        main_frame.pack(fill='both', expand=True, padx=15, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—Å–¥–µ–ª–∞–µ–º —É–∂–µ)
        left_panel = tk.Frame(main_frame, bg=ModernColors.CARD_BG, relief='solid', bd=1)
        left_panel.pack(side='left', fill='y', padx=(0, 8), pady=0, ipadx=10, ipady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        tk.Label(
            left_panel,
            text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            font=('Arial', 12, 'bold'),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w', pady=(0, 10))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        self.stats_frame = tk.Frame(left_panel, bg=ModernColors.CARD_BG)
        self.stats_frame.pack(fill='x', pady=(0, 15))
        
        self.total_users_label = tk.Label(
            self.stats_frame,
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –∑–∞–≥—Ä—É–∑–∫–∞...',
            font=('Arial', 10),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_SECONDARY
        )
        self.total_users_label.pack(anchor='w', pady=1)
        
        self.total_groups_label = tk.Label(
            self.stats_frame,
            text='–ì—Ä—É–ø–ø—ã: –∑–∞–≥—Ä—É–∑–∫–∞...',
            font=('Arial', 10),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_SECONDARY
        )
        self.total_groups_label.pack(anchor='w', pady=1)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        tk.Label(
            left_panel,
            text='‚ö° –î–µ–π—Å—Ç–≤–∏—è',
            font=('Arial', 12, 'bold'),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(anchor='w', pady=(10, 8))
        
        quick_actions_frame = tk.Frame(left_panel, bg=ModernColors.CARD_BG)
        quick_actions_frame.pack(fill='x')
        
        ModernButton(
            quick_actions_frame,
            text='üìã –≠–∫—Å–ø–æ—Ä—Ç',
            command=self.export_users,
            style='secondary',
            font=('Arial', 9)
        ).pack(fill='x', pady=1)
        
        ModernButton(
            quick_actions_frame,
            text='üìÅ –ñ—É—Ä–Ω–∞–ª',
            command=self.open_error_log,
            style='secondary',
            font=('Arial', 9)
        ).pack(fill='x', pady=1)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        right_panel = tk.Frame(main_frame, bg=ModernColors.CARD_BG, relief='solid', bd=1)
        right_panel.pack(side='right', fill='both', expand=True, padx=0, pady=0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂—É—Ä–Ω–∞–ª–∞
        log_header = tk.Frame(right_panel, bg=ModernColors.CARD_BG)
        log_header.pack(fill='x', padx=10, pady=(10, 8))
        
        tk.Label(
            log_header,
            text='üìù –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            font=('Arial', 12, 'bold'),
            bg=ModernColors.CARD_BG,
            fg=ModernColors.TEXT_PRIMARY
        ).pack(side='left')
        
        ModernButton(
            log_header,
            text='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å',
            command=self.clear_log,
            style='secondary',
            font=('Arial', 9)
        ).pack(side='right')
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∂—É—Ä–Ω–∞–ª–∞
        log_frame = tk.Frame(right_panel, bg=ModernColors.CARD_BG)
        log_frame.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            wrap=tk.WORD,
            font=('Consolas', 9),
            bg='white',
            fg=ModernColors.TEXT_PRIMARY,
            relief='solid',
            bd=1
        )
        self.log_text.pack(fill='both', expand=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        self.after(2000, self.load_statistics_async)

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_frame = tk.Frame(self, bg=ModernColors.SECONDARY, height=25)
        self.status_frame.pack(side='bottom', fill='x')
        self.status_frame.pack_propagate(False)
        
        self.status_indicator = StatusIndicator(self.status_frame)
        self.status_indicator.pack(side='left', padx=8, pady=3)
        
        self.status_label = tk.Label(
            self.status_frame,
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            font=('Arial', 8),
            bg=ModernColors.SECONDARY,
            fg=ModernColors.TEXT_PRIMARY
        )
        self.status_label.pack(side='left', pady=3)

    def check_service_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API"""
        if self.service:
            self.status_indicator.set_status('online')
            self.status_label.config(text='–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Google Workspace API')
            self.log_activity('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Workspace API')
        else:
            self.status_indicator.set_status('offline')
            self.status_label.config(text='–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            self.log_activity('–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API', 'ERROR')

    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø"""
        if not self.service:
            return
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = get_user_list(self.service)
            users_count = len(users)
            self.total_users_label.config(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
            groups = list_groups(self.service)
            groups_count = len(groups)
            self.total_groups_label.config(text=f'–ì—Ä—É–ø–ø—ã: {groups_count}')
            
            self.log_activity(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {groups_count} –≥—Ä—É–ø–ø')
            
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}', 'ERROR')

    def log_activity(self, message: str, level: str = 'INFO'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_entry = f'[{timestamp}] {level}: {message}\n'
        
        self.log_text.insert(tk.END, log_entry)
        self.log_text.see(tk.END)

    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.log_text.delete(1.0, tk.END)
        self.log_activity('–ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω')

    def refresh_data(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        try:
            self.status_label.config(text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
            data_cache.clear_cache()
            self.load_statistics()
            self.status_label.config(text='–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            self.log_activity('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}', 'ERROR')
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}')

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω
    def open_employee_list(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        try:
            window = EmployeeListWindow(self, self.service)
            self.log_activity('–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}', 'ERROR')
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}')

    def open_create_user(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        try:
            window = CreateUserWindow(self, self.service)
            self.log_activity('–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}', 'ERROR')
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}')

    def open_edit_user(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_email = simpledialog.askstring(
            '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            '–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'
        )
        
        if user_email:
            try:
                window = EditUserWindow(self, self.service, user_email)
                self.log_activity(f'–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_email}')
            except Exception as e:
                self.log_activity(f'–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}', 'ERROR')
                messagebox.showerror('–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}')

    def open_group_management(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        try:
            window = GroupManagementWindow(self, self.service)
            self.log_activity('–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏: {str(e)}', 'ERROR')
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏: {str(e)}')

    def open_add_to_group(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        try:
            window = AddToGroupWindow(self, self.service)
            self.log_activity('–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {str(e)}', 'ERROR')
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {str(e)}')

    def open_asana_invite(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ Asana"""
        try:
            window = AsanaInviteWindow(self)
            self.log_activity('–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ Asana')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ Asana: {str(e)}', 'ERROR')
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ Asana: {str(e)}')

    def open_error_log(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫"""
        try:
            window = ErrorLogWindow(self)
            self.log_activity('–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫')
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫: {str(e)}', 'ERROR')
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫: {str(e)}')

    def export_users(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        if not self.service:
            messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google API')
            return
            
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename = filedialog.asksaveasfilename(
                defaultextension='.csv',
                filetypes=[('CSV files', '*.csv'), ('All files', '*.*')],
                title='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            )
            
            if filename:
                users = get_user_list(self.service)
                
                with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.writer(csvfile)
                    writer.writerow(['Email', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–°—Ç–∞—Ç—É—Å'])
                    
                    for user in users:
                        name = user.get('name', {})
                        org_info = user.get('organizations', [{}])[0] if user.get('organizations') else {}
                        
                        writer.writerow([
                            user.get('primaryEmail', ''),
                            name.get('givenName', ''),
                            name.get('familyName', ''),
                            org_info.get('title', ''),
                            '–ê–∫—Ç–∏–≤–µ–Ω' if not user.get('suspended', False) else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                        ])
                
                self.log_activity(f'–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}')
                messagebox.showinfo('–£—Å–ø–µ—Ö', f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}')
                
        except Exception as e:
            self.log_activity(f'–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}', 'ERROR')
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}')

    def load_statistics_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self._ui_initialized or not hasattr(self, 'total_users_label'):
            # –ï—Å–ª–∏ UI –Ω–µ –≥–æ—Ç–æ–≤, –æ—Ç–ª–æ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫—É
            self.after(500, self.load_statistics_async)
            return
            
        def load_data():
            if not self.service:
                return None, None
            
            users = get_user_list(self.service)
            groups = list_groups(self.service)
            return users, groups
        
        def on_success(result):
            if not hasattr(self, 'total_users_label'):
                return
                
            users, groups = result
            if users is not None and groups is not None:
                users_count = len(users)
                groups_count = len(groups)
                self.total_users_label.config(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}')
                self.total_groups_label.config(text=f'–ì—Ä—É–ø–ø—ã: {groups_count}')
                self.log_activity(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {groups_count} –≥—Ä—É–ø–ø')
        
        def on_error(error):
            if hasattr(self, 'log_activity'):
                self.log_activity(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(error)}', 'ERROR')
            show_api_error(self, error, "–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        if hasattr(self, 'status_label'):
            self.status_label.config(text='–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
        
        async_manager.run_async(load_data, on_success, on_error)

    def _delayed_init(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI"""
        self._ui_initialized = True
        self.log_activity('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ')
