#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ scopes –¥–ª—è OAuth 2.0.
"""

import os
import sys
import json
import pickle
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

def check_token_scopes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º scopes –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ç–æ–∫–µ–Ω–µ"""
    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê SCOPES –í –¢–û–ö–ï–ù–ï")
    print("=" * 60)
    
    token_file = Path("token.pickle")
    
    if not token_file.exists():
        print("‚ùå token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(token_file, 'rb') as f:
            credentials = pickle.load(f)
        
        print("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        if hasattr(credentials, 'scopes'):
            print("üìã Scopes –≤ —Ç–æ–∫–µ–Ω–µ:")
            for scope in credentials.scopes:
                print(f"   ‚Ä¢ {scope}")
        else:
            print("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ scopes –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print(f"üìä –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞: {credentials.valid}")
        print(f"üìä –ò—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω: {credentials.expired}")
        
        if hasattr(credentials, 'token'):
            print(f"üìä –¢–æ–∫–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {'–î–∞' if credentials.token else '–ù–µ—Ç'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def regenerate_token_with_admin_scopes():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ scopes –¥–ª—è Google Workspace Admin"""
    print("\n" + "=" * 60)
    print("üîÑ –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –¢–û–ö–ï–ù–ê –° ADMIN SCOPES")
    print("=" * 60)
    
    try:
        from google_auth_oauthlib.flow import InstalledAppFlow
        from google.auth.transport.requests import Request
        import pickle
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ scopes –¥–ª—è Google Workspace Admin
        ADMIN_SCOPES = [
            'https://www.googleapis.com/auth/admin.directory.user',
            'https://www.googleapis.com/auth/admin.directory.group',
            'https://www.googleapis.com/auth/admin.directory.orgunit',
            'https://www.googleapis.com/auth/admin.directory.domain',
            'https://www.googleapis.com/auth/admin.directory.customer',
            'https://www.googleapis.com/auth/calendar',
        ]
        
        credentials_file = Path("credentials.json")
        token_file = Path("token.pickle")
        
        if not credentials_file.exists():
            print("‚ùå credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("üìã –ù–æ–≤—ã–µ scopes –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
        for scope in ADMIN_SCOPES:
            print(f"   ‚Ä¢ {scope}")
        
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
        print("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Google Workspace")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç–µ—Å—å –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
        if token_file.exists():
            token_file.unlink()
            print("üóëÔ∏è –°—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏...")
        flow = InstalledAppFlow.from_client_secrets_file(
            credentials_file, ADMIN_SCOPES)
        
        credentials = flow.run_local_server(
            port=0,
            prompt='select_account',
            authorization_prompt_message='üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Google Workspace...',
            success_message='‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞...'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        with open(token_file, 'wb') as token:
            pickle.dump(credentials, token)
        
        print("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
        if hasattr(credentials, 'scopes'):
            print("üìã Scopes –≤ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ:")
            for scope in credentials.scopes:
                print(f"   ‚Ä¢ {scope}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def test_admin_permissions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
    print("=" * 60)
    
    try:
        from googleapiclient.discovery import build
        from googleapiclient.errors import HttpError
        import pickle
        
        token_file = Path("token.pickle")
        
        if not token_file.exists():
            print("‚ùå token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(token_file, 'rb') as f:
            credentials = pickle.load(f)
        
        service = build('admin', 'directory_v1', credentials=credentials)
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ
        print("üîç –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤...")
        try:
            domains_result = service.domains().list(customer='my_customer').execute()
            domains = domains_result.get('domains', [])
            
            if domains:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {len(domains)}")
                for domain in domains:
                    print(f"   ‚Ä¢ {domain['domainName']} ({'–û—Å–Ω–æ–≤–Ω–æ–π' if domain.get('isPrimary') else '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π'})")
            else:
                print("‚ö†Ô∏è –î–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except HttpError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤: {e}")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüîç –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        try:
            users_result = service.users().list(
                customer='my_customer',
                maxResults=3
            ).execute()
            
            users = users_result.get('users', [])
            
            if users:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                for user in users:
                    email = user.get('primaryEmail', 'N/A')
                    name = user.get('name', {}).get('fullName', 'N/A')
                    print(f"   ‚Ä¢ {email} ({name})")
            else:
                print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except HttpError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ OAuth 2.0 –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
        check_token_scopes()
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
        print("\n" + "=" * 60)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø")
        print("=" * 60)
        print("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Google Workspace Admin API")
        print("—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.")
        
        choice = input("\n–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω? (y/N): ")
        if choice.lower() == 'y':
            success = regenerate_token_with_admin_scopes()
            if success:
                test_admin_permissions()
        else:
            print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º...")
            test_admin_permissions()
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
