#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Admin Team Tools v2.0.8 - Google Workspace Management
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
UX IMPROVED VERSION - —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import sys
import os
import asyncio
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.core.application import Application
from src.utils.enhanced_logger import setup_logging
from src.config.enhanced_config import config


def show_progress_bar(current: int, total: int, description: str = "", width: int = 40):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if total == 0:
        return
    
    percentage = int((current / total) * 100)
    filled_length = int(width * current // total)
    
    bar = '‚ñà' * filled_length + '‚ñë' * (width - filled_length)
    print(f'\r{description} |{bar}| {percentage}% ({current}/{total})', end='', flush=True)
    
    if current == total:
        print(" ‚úÖ")


def show_loading_animation(message: str, duration: float = 2.0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
    spinner_chars = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è']
    end_time = time.time() + duration
    i = 0
    
    while time.time() < end_time:
        print(f'\r{spinner_chars[i % len(spinner_chars)]} {message}', end='', flush=True)
        time.sleep(0.1)
        i += 1
    
    print(f'\r‚úÖ {message} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', flush=True)


def create_section_divider(title: str, width: int = 70, char: str = "‚ïê"):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π"""
    if len(title) >= width - 4:
        return f"{char * 2} {title} {char * 2}"
    
    padding = (width - len(title) - 2) // 2
    return f"{char * padding} {title} {char * (width - padding - len(title) - 2)}"


def show_startup_banner():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    print("\n" * 2)
    
    # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    print("‚îå" + "‚îÄ" * 68 + "‚îê")
    print("‚îÇ" + " " * 68 + "‚îÇ")
    print("‚îÇ" + "üöÄ ADMIN TEAM TOOLS v2.0.8".center(68) + "‚îÇ")
    print("‚îÇ" + "üìä Google Workspace Management System".center(68) + "‚îÇ")
    print("‚îÇ" + " " * 68 + "‚îÇ")
    print("‚îî" + "‚îÄ" * 68 + "‚îò")
    print()
    
    # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    print(create_section_divider("–°–¢–ê–¢–£–° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò", char="‚îÄ"))
    print("üîê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: OAuth 2.0 (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)")
    print("üîß –†–µ–∑–µ—Ä–≤: Service Account (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)")
    print()
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —ç—Ç–∞–ø–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    stages = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 0.5),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ credentials", 0.8),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", 0.3),
        ("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", 0.4)
    ]
    
    for i, (stage, duration) in enumerate(stages, 1):
        show_loading_animation(stage, duration)
        show_progress_bar(i, len(stages), "–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
        print()
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    print(create_section_divider("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø", char="‚îÄ"))
    
    credentials_path = Path("credentials.json")
    if credentials_path.exists():
        try:
            import json
            with open(credentials_path, 'r') as f:
                creds_data = json.load(f)
            
            if 'installed' in creds_data:
                print("‚úÖ OAuth 2.0 credentials –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                print("   üåê –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                print("   üîë –¢–æ–∫–µ–Ω—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤")
            elif 'type' in creds_data and creds_data['type'] == 'service_account':
                print("‚úÖ Service Account credentials –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                print("   ü§ñ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                print("   ‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            else:
                print("‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç credentials.json")
                print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è credentials.json")
            print(f"   üìã –î–µ—Ç–∞–ª–∏: {str(e)}")
            print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON —Ñ–∞–π–ª–∞")
    else:
        print("‚ùå credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   üìã –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º.: docs/OAUTH2_PRIORITY_SETUP.md")
        print("   üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞")
    
    print()
    print(create_section_divider("–ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´", char="‚îÄ"))
    print("üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∫–ª–∞–≤–∏—à:")
    print("   ‚Ä¢ F1        - –°–ø—Ä–∞–≤–∫–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("   ‚Ä¢ Ctrl+Q    - –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")  
    print("   ‚Ä¢ Ctrl+R    - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    print("   ‚Ä¢ Ctrl+S    - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    print("   ‚Ä¢ Tab       - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º")
    print("   ‚Ä¢ Escape    - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print()
    
    print("‚îå" + "‚îÄ" * 68 + "‚îê")
    print("‚îÇ" + "üéØ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!".center(68) + "‚îÇ")
    print("‚îî" + "‚îÄ" * 68 + "‚îò")
    print()


def show_user_friendly_error(error_type: str, message: str, suggestions: list = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    print()
    print("‚îå" + "‚îÄ" * 68 + "‚îê")
    print("‚îÇ" + f"‚ùå {error_type}".center(68) + "‚îÇ")
    print("‚îî" + "‚îÄ" * 68 + "‚îò")
    print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {message}")
    
    if suggestions:
        print()
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        for i, suggestion in enumerate(suggestions, 1):
            print(f"   {i}. {suggestion}")
    
    print()
    print("üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    print()


async def main() -> int:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Returns:
        –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
    """
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        show_loading_animation("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", 1.0)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application()
        return await app.start()
        
    except KeyboardInterrupt:
        print("\n")
        print("‚îå" + "‚îÄ" * 68 + "‚îê")
        print("‚îÇ" + "‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º".center(68) + "‚îÇ")
        print("‚îî" + "‚îÄ" * 68 + "‚îò")
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return 0
        
    except ImportError as e:
        show_user_friendly_error(
            "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {e}",
            [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install -r requirements.txt",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            ]
        )
        return 1
        
    except FileNotFoundError as e:
        show_user_friendly_error(
            "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª: {e}",
            [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ backup"
            ]
        )
        return 1
        
    except Exception as e:
        show_user_friendly_error(
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}",
            [
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ logs/",
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏"
            ]
        )
        return 1


def cli_main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è CLI —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä
        show_startup_banner()
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("‚ö° –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...")
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        
        return asyncio.run(main())
        
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return 0
        
    except Exception as e:
        show_user_friendly_error(
            "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}",
            [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º",
                "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
            ]
        )
        return 1


def print_rollback_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    print()
    print(create_section_divider("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–¢–ö–ê–¢–ï", char="‚ïê"))
    print("üîÑ –ï—Å–ª–∏ –Ω–æ–≤—ã–π UX –≤–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è:")
    print()
    print("üìã –°–ø–æ—Å–æ–±—ã –æ—Ç–∫–∞—Ç–∞:")
    print("   1. –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞—Ç:")
    print("      mv main.py main_ux_improved.py")
    print("      mv main_backup_*.py main.py")
    print()
    print("   2. –†—É—á–Ω–æ–π –æ—Ç–∫–∞—Ç:")
    print("      - –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª main_backup_YYYYMMDD_HHMMSS.py")
    print("      - –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ main.py")
    print()
    print("   3. Git –æ—Ç–∫–∞—Ç (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ git):")
    print("      git checkout HEAD~1 main.py")
    print()
    print("üìû –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ª–æ–≥–∏ –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print(create_section_divider("", char="‚ïê"))


if __name__ == "__main__":
    print_rollback_info()
    exit_code = cli_main()
    sys.exit(exit_code)
