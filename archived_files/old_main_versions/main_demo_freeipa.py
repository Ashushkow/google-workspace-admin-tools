#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å demo –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FreeIPA
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

def patch_service_adapter_for_demo():
    """–ü–∞—Ç—á–∏–º ServiceAdapter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ demo –¥–∞–Ω–Ω—ã—Ö"""
    from src.api.service_adapter import ServiceAdapter
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º _ensure_data_loaded –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ demo –¥–∞–Ω–Ω—ã—Ö
    def demo_ensure_data_loaded(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç demo –¥–∞–Ω–Ω—ã–µ"""
        if not hasattr(self, '_data_loaded') or not self._data_loaded:
            print("üß™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ demo –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            self._demo_fallback_mode = True
            self._initialize_demo_data()
            self._data_loaded = True
            print(f"‚úÖ Demo –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self._users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(self._groups)} –≥—Ä—É–ø–ø")
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    ServiceAdapter._ensure_data_loaded = demo_ensure_data_loaded

async def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å demo –¥–∞–Ω–Ω—ã–º–∏"""
    print("=" * 70)
    print("üß™ DEMO –†–ï–ñ–ò–ú - ADMIN TEAM TOOLS")
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 70)
    print("‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ demo –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
    print("üîó FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –º–µ–Ω—é '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'")
    print("=" * 70)
    print()
    
    try:
        # –ü–∞—Ç—á–∏–º ServiceAdapter
        patch_service_adapter_for_demo()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from src.core.application import Application
        app = Application()
        return await app.start()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

def cli_main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        return asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = cli_main()
    print(f"\nüèÅ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º: {exit_code}")
    sys.exit(exit_code)
