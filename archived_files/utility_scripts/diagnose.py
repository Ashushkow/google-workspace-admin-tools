#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º Admin Team Tools
"""

import os
import sys
import json
import time
from pathlib import Path

def print_section(title):
    print("\n" + "="*60)
    print(f"üìã {title}")
    print("="*60)

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print_section("–ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í")
    
    files_to_check = [
        "main.py",
        "credentials.json", 
        "src/core/application.py",
        "src/api/service_adapter.py"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"‚úÖ {file_path} ({size} –±–∞–π—Ç)")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")

def check_credentials():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print_section("–ü–†–û–í–ï–†–ö–ê CREDENTIALS")
    
    creds_path = "credentials.json"
    if not os.path.exists(creds_path):
        print("‚ùå credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–æ–≥–ª–∞—Å–Ω–æ docs/OAUTH2_PRIORITY_SETUP.md")
        return
    
    try:
        with open(creds_path, 'r') as f:
            creds = json.load(f)
        
        if 'installed' in creds:
            print("‚úÖ OAuth 2.0 credentials –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            print(f"üìß Client ID: {creds['installed'].get('client_id', 'N/A')[:20]}...")
        elif 'type' in creds and creds['type'] == 'service_account':
            print("‚úÖ Service Account credentials –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            print(f"üìß Client Email: {creds.get('client_email', 'N/A')}")
        else:
            print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç credentials.json")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è credentials.json: {e}")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_section("–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø")
    
    env_vars = [
        "FAST_LOAD_MODE",
        "DEV_MODE", 
        "GOOGLE_WORKSPACE_DOMAIN",
        "GOOGLE_WORKSPACE_ADMIN"
    ]
    
    for var in env_vars:
        value = os.getenv(var, "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        print(f"üîß {var}: {value}")

def test_quick_import():
    """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print_section("–¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê –ú–û–î–£–õ–ï–ô")
    
    modules_to_test = [
        ("src.core.application", "Application"),
        ("src.api.service_adapter", "ServiceAdapter"),
        ("src.config.enhanced_config", "config")
    ]
    
    sys.path.insert(0, str(Path(__file__).parent / 'src'))
    
    for module_name, class_name in modules_to_test:
        try:
            start_time = time.time()
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            end_time = time.time()
            print(f"‚úÖ {module_name}.{class_name} ({end_time-start_time:.2f}—Å)")
        except Exception as e:
            print(f"‚ùå {module_name}.{class_name}: {e}")

def test_api_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    print_section("–¢–ï–°–¢ API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    
    try:
        sys.path.insert(0, str(Path(__file__).parent / 'src'))
        from src.auth import get_service
        
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å...")
        start_time = time.time()
        
        service = get_service()
        end_time = time.time()
        
        if service:
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–µ–Ω –∑–∞ {end_time-start_time:.2f}—Å")
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            try:
                print("üîÑ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
                result = service.users().list(customer='my_customer', maxResults=1).execute()
                users = result.get('users', [])
                print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            except Exception as api_error:
                print(f"‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {api_error}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
    print_section("–ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò")
    
    logs_dir = Path("logs")
    if not logs_dir.exists():
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    log_files = list(logs_dir.glob("*.log"))
    if not log_files:
        print("‚ö†Ô∏è –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –ª–æ–≥
    latest_log = max(log_files, key=lambda x: x.stat().st_mtime)
    print(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥: {latest_log}")
    
    try:
        with open(latest_log, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
        print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:")
        for line in lines[-10:]:
            print(f"   {line.strip()}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

def test_freeipa_integration():
    """–¢–µ—Å—Ç FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print_section("–¢–ï–°–¢ FREEIPA –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    
    try:
        sys.path.insert(0, str(Path(__file__).parent / 'src'))
        from src.integrations.freeipa_integration import FreeIPAIntegration
        from src.services.user_service import UserService
        from src.services.group_service import GroupService
        
        print("‚úÖ FreeIPA –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞—Å—Å–∞
        integration_methods = ['freeipa_client', 'get_groups', 'get_group', 'create_group']
        for method in integration_methods:
            if hasattr(FreeIPAIntegration, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –ù–ï –ù–ê–ô–î–ï–ù")
        
        print("‚úÖ FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FreeIPA: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ADMIN TEAM TOOLS")
    print(f"üìÖ –î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    check_files()
    check_credentials() 
    check_environment()
    test_quick_import()
    test_api_connection()
    test_freeipa_integration()
    check_logs()
    
    print_section("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("1. ‚úÖ –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")
    print("2. üöÄ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞: set FAST_LOAD_MODE=true")
    print("3. üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/OAUTH2_PRIORITY_SETUP.md")
    print("4. üêõ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ logs/")
    
    print("\n" + "="*60)
    print("üéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("="*60)

if __name__ == "__main__":
    main()
