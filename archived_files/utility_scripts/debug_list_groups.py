#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–∞ list_groups –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / 'src'))

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
modules_to_reload = [
    'src.services.freeipa_client',
    'src.services.freeipa_safe_import', 
    'src.services.freeipa_client_stub'
]

for module in modules_to_reload:
    if module in sys.modules:
        print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å: {module}")
        del sys.modules[module]

import importlib
try:
    from src.services import freeipa_client
    importlib.reload(freeipa_client)
    print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ freeipa_client")
except:
    pass

from src.services.freeipa_client import FreeIPAService, FreeIPAConfig

def debug_list_groups():
    """–û—Ç–ª–∞–¥–∫–∞ –º–µ—Ç–æ–¥–∞ list_groups"""
    print("üêõ –û–¢–õ–ê–î–ö–ê –ú–ï–¢–û–î–ê LIST_GROUPS")
    print("=" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = Path("config/freeipa_config.json")
        with open(config_path, 'r', encoding='utf-8') as f:
            config_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é FreeIPA
        config = FreeIPAConfig(
            server_url=config_data.get('server_url', ''),
            domain=config_data.get('domain', ''),
            username=config_data.get('username', ''),
            password=config_data.get('password', ''),
            use_kerberos=config_data.get('use_kerberos', False),
            verify_ssl=config_data.get('verify_ssl', True),
            timeout=config_data.get('timeout', 30)
        )
        
        print(f"üì° –°–µ—Ä–≤–µ—Ä: {config.server_url}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config.username}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = FreeIPAService(config)
        
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA...")
        if not service.connect():
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º RAW –≤—ã–∑–æ–≤ group_find
        print("üî¨ –¢–µ—Å—Ç 1: RAW –≤—ã–∑–æ–≤ client.group_find()...")
        raw_result = service.client.group_find(sizelimit=100)
        print(f"   üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(raw_result)}")
        print(f"   üìã –ö–ª—é—á–∏: {list(raw_result.keys()) if isinstance(raw_result, dict) else 'N/A'}")
        
        if isinstance(raw_result, dict) and 'result' in raw_result:
            groups_count = len(raw_result['result'])
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –≤ 'result': {groups_count}")
        else:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {raw_result}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        print("üî¨ –¢–µ—Å—Ç 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ list_groups()...")
        groups = service.list_groups()
        print(f"   üìä –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ list_groups: —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(groups)}")
        print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(groups) if isinstance(groups, list) else 'N/A'}")
        
        if isinstance(groups, list):
            print("   ‚úÖ –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫!")
            if groups:
                print(f"   üîç –ü–µ—Ä–≤—ã–µ 3 –≥—Ä—É–ø–ø—ã:")
                for i, group in enumerate(groups[:3], 1):
                    if isinstance(group, dict):
                        name = group.get('cn', ['Unknown'])[0] if isinstance(group.get('cn'), list) else group.get('cn', 'Unknown')
                        print(f"      {i}. {name}")
                    else:
                        print(f"      {i}. {group} (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(group)})")
        elif isinstance(groups, dict):
            print(f"   ‚ùå –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞")
            print(f"   üìù –ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è: {list(groups.keys())}")
            # –í–æ–∑–º–æ–∂–Ω–æ, –≥–¥–µ-—Ç–æ –µ—Å—Ç—å –æ–±–µ—Ä—Ç–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–æ–≤–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –Ω–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        else:
            print(f"   ‚ùå –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø: {type(groups)}")
            print(f"   üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {groups}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ get_groups (–∞–ª–∏–∞—Å)
        print("üî¨ –¢–µ—Å—Ç 3: –ê–ª–∏–∞—Å –º–µ—Ç–æ–¥ get_groups()...")
        groups2 = service.get_groups()
        print(f"   üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(groups2)}")
        print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(groups2) if isinstance(groups2, list) else 'N/A'}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if isinstance(groups, list) and isinstance(groups2, list):
            if len(groups) == len(groups2):
                print("   ‚úÖ –ê–ª–∏–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
            else:
                print(f"   ‚ö†Ô∏è –†–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: list_groups={len(groups)}, get_groups={len(groups2)}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "=" * 50)
        if isinstance(groups, list) and len(groups) > 5:
            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!")
            print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(groups)} —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø FreeIPA")
            print("   üéâ –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∫–∞–∑–æ–º 5 —Ñ–µ–π–∫–æ–≤—ã—Ö –≥—Ä—É–ø–ø")
        else:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø!")
            print("   üêõ –ú–µ—Ç–æ–¥ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("   üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∫—ç—à –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_list_groups()
