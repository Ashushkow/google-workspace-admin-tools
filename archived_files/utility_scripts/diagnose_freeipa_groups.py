#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–ø–ø FreeIPA
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç RAW –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FreeIPA API
"""

import sys
import os
import asyncio
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.integrations.freeipa_integration import FreeIPAIntegration
from src.config.enhanced_config import config

async def diagnose_freeipa_groups():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø FreeIPA"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–†–£–ü–ü FREEIPA")
    print("=" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é FreeIPA
        freeipa_config_path = Path("config/freeipa_config.json")
        if not freeipa_config_path.exists():
            print("‚ùå –§–∞–π–ª config/freeipa_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(freeipa_config_path, 'r', encoding='utf-8') as f:
            freeipa_config = json.load(f)
        
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA —Å–µ—Ä–≤–µ—Ä—É: {freeipa_config.get('server_url', 'N/A')}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {freeipa_config.get('username', 'N/A')}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA —Å–µ—Ä–≤–∏—Å—É
        from src.services.freeipa_client import FreeIPAService, FreeIPAConfig
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é FreeIPA
        freeipa_config_obj = FreeIPAConfig(
            server_url=freeipa_config.get('server_url', ''),
            domain=freeipa_config.get('domain', ''),
            username=freeipa_config.get('username', ''),
            password=freeipa_config.get('password', ''),
            use_kerberos=freeipa_config.get('use_kerberos', False),
            verify_ssl=freeipa_config.get('verify_ssl', True),
            timeout=freeipa_config.get('timeout', 30)
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é
        freeipa_service = FreeIPAService(freeipa_config_obj)
        
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA...")
        connection_result = freeipa_service.connect()
        if connection_result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FreeIPA")
            return
        print()
        
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ RAW –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø...")
        groups = freeipa_service.list_groups()
        
        print(f"üìä –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {type(groups)}")
        print()
        
        if isinstance(groups, dict):
            print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê API:")
            print("-" * 50)
            print(f"üìã –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(groups.keys())}")
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
            for key, value in groups.items():
                print(f"üîë {key}:")
                print(f"   üîß –¢–∏–ø: {type(value)}")
                if isinstance(value, list):
                    print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(value)}")
                    if len(value) > 0:
                        print(f"   üîç –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(value[0])} - {value[0] if len(str(value[0])) < 100 else str(value[0])[:100] + '...'}")
                elif isinstance(value, dict):
                    print(f"   üìã –ö–ª—é—á–∏: {list(value.keys())}")
                else:
                    print(f"   üìù –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
                print()
            
            # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ –∫–ª—é—á–µ 'result'
            if 'result' in groups and isinstance(groups['result'], list):
                actual_groups = groups['result']
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ –∫–ª—é—á–µ 'result': {len(actual_groups)}")
                
                if actual_groups:
                    print("\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –ì–†–£–ü–ü:")
                    print("-" * 50)
                    
                    for i, group in enumerate(actual_groups, 1):
                        print(f"\nüìÅ –ì—Ä—É–ø–ø–∞ #{i}:")
                        if isinstance(group, dict):
                            print(f"   üìã –ö–ª—é—á–∏: {list(group.keys())}")
                            
                            # –ò–º—è –≥—Ä—É–ø–ø—ã
                            group_name = group.get('cn', ['Unknown'])[0] if isinstance(group.get('cn'), list) else group.get('cn', 'Unknown')
                            print(f"   üìõ –ò–º—è: {group_name}")
                            
                            # –û–ø–∏—Å–∞–Ω–∏–µ
                            if 'description' in group:
                                desc = group['description']
                                if isinstance(desc, list):
                                    desc = desc[0] if desc else ''
                                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
                            
                            # –£—á–∞—Å—Ç–Ω–∏–∫–∏
                            if 'member' in group:
                                members = group['member']
                                if isinstance(members, list):
                                    print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
                                
                        else:
                            print(f"   üìõ –ó–Ω–∞—á–µ–Ω–∏–µ: {group}")
                else:
                    print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç!")
            else:
                print("‚ùå –ö–ª—é—á 'result' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
        else:
            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
            print(f"\nüìÅ –ì—Ä—É–ø–ø–∞ #{i}:")
            print(f"   üîß –¢–∏–ø: {type(group)}")
            
            if isinstance(group, dict):
                print(f"   üìã –ö–ª—é—á–∏: {list(group.keys())}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã
                group_name = None
                if 'cn' in group:
                    cn = group['cn']
                    if isinstance(cn, list):
                        group_name = cn[0] if cn else 'Unknown'
                    else:
                        group_name = cn
                elif 'group_name' in group:
                    group_name = group['group_name']
                
                print(f"   üìõ –ò–º—è: {group_name}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º description –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'description' in group:
                    desc = group['description']
                    if isinstance(desc, list):
                        desc = desc[0] if desc else ''
                    print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–ª–µ–Ω–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'member' in group:
                    members = group['member']
                    if isinstance(members, list):
                        print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
                    else:
                        print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {members}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –≥—Ä—É–ø–ø
                if i <= 3:
                    print(f"   üóÇÔ∏è –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    for key, value in group.items():
                        if isinstance(value, list) and len(value) > 3:
                            print(f"      {key}: [—Å–ø–∏—Å–æ–∫ –∏–∑ {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤]")
                        else:
                            print(f"      {key}: {value}")
                        
            else:
                print(f"   üìõ –ó–Ω–∞—á–µ–Ω–∏–µ: {group}")
        
        print("\n" + "=" * 50)
        print("üéØ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        system_groups = [
            'admins', 'editors', 'ipausers', 'trust admins',
            'default smb group', 'domain admins', 'domain users'
        ]
        
        user_groups = []
        system_found = []
        
        for group in groups:
            if isinstance(group, dict):
                group_name = group.get('cn', [''])[0] if isinstance(group.get('cn'), list) else group.get('cn', '')
            else:
                group_name = str(group)
            
            if group_name.lower() in [name.lower() for name in system_groups]:
                system_found.append(group_name)
            else:
                user_groups.append(group_name)
        
        print(f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(groups)}")
        print(f"üîß –°–∏—Å—Ç–µ–º–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(system_found)}")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥—Ä—É–ø–ø: {len(user_groups)}")
        print()
        
        if system_found:
            print("üîß –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≥—Ä—É–ø–ø—ã:")
            for group in system_found:
                print(f"   - {group}")
            print()
        
        if user_groups:
            print("üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã:")
            for group in user_groups:
                print(f"   - {group}")
        else:
            print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not user_groups:
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –≥—Ä—É–ø–ø—ã analytics –∏ dev_backup –≤ FreeIPA")
            print("   - –í–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏–ª–∏ OU")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –≥—Ä—É–ø–ø")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(diagnose_freeipa_groups())
