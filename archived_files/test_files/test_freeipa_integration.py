#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from src.services.freeipa_client import FreeIPAConfig, FreeIPAService, FreeIPAUser, FreeIPAGroup
from src.services.freeipa_client import create_freeipa_config_template, test_freeipa_connection


async def test_freeipa_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    config_path = "config/freeipa_config.json"
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config_file = Path(config_path)
    
    if not config_file.exists():
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        print("üìù –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        create_freeipa_config_template(config_path)
        print(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {config_path}")
        print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
        return False
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {config_path}")
    
    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        config = FreeIPAConfig.from_file(config_path)
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä: {config.server_url}")
        print(f"‚úÖ –î–æ–º–µ–Ω: {config.domain}")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config.username}")
        print(f"‚úÖ Kerberos: {config.use_kerberos}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    try:
        freeipa_service = FreeIPAService(config)
        
        if freeipa_service.connect():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA —É—Å–ø–µ—à–Ω–æ")
            
            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
            print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            try:
                users = freeipa_service.list_users(limit=5)
                groups = freeipa_service.list_groups(limit=5)
                
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(users)}")
                print(f"‚úÖ –ì—Ä—É–ø–ø –≤ —Å–∏—Å—Ç–µ–º–µ: {len(groups)}")
                
                if users:
                    print("üìÑ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                    for user in users[:3]:
                        uid = user.get('uid', ['Unknown'])[0]
                        mail = user.get('mail', ['No email'])[0] if user.get('mail') else 'No email'
                        print(f"  üë§ {uid} ({mail})")
                
                if groups:
                    print("üìÑ –ü—Ä–∏–º–µ—Ä—ã –≥—Ä—É–ø–ø:")
                    for group in groups[:3]:
                        cn = group.get('cn', ['Unknown'])[0]
                        desc = group.get('description', [''])[0] if group.get('description') else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
                        print(f"  üë• {cn} - {desc}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...")
            
            test_user_uid = "test_integration_user"
            test_group_cn = "test_integration_group"
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                test_user = FreeIPAUser(
                    uid=test_user_uid,
                    givenname="Test",
                    sn="User",
                    mail="test.user@test.com",
                    gecos="Test user for integration testing"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                existing_user = freeipa_service.get_user(test_user_uid)
                if existing_user:
                    print(f"‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_uid} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    if freeipa_service.create_user(test_user):
                        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_uid} —Å–æ–∑–¥–∞–Ω")
                        
                        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if freeipa_service.delete_user(test_user_uid):
                            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_uid} —É–¥–∞–ª–µ–Ω")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
                test_group = FreeIPAGroup(
                    cn=test_group_cn,
                    description="Test group for integration testing"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                existing_group = freeipa_service.get_group(test_group_cn)
                if existing_group:
                    print(f"‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ {test_group_cn} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    if freeipa_service.create_group(test_group):
                        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ {test_group_cn} —Å–æ–∑–¥–∞–Ω–∞")
                        
                        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
                        if freeipa_service.delete_group(test_group_cn):
                            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ {test_group_cn} —É–¥–∞–ª–µ–Ω–∞")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            
            freeipa_service.disconnect()
            
            print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            print("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print("  ‚úÖ API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("  ‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            return True
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FreeIPA")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("  ‚Ä¢ URL —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("  ‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å")
            print("  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ FreeIPA")
            print("  ‚Ä¢ –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Admin Team Tools - FreeIPA Integration Test")
    print("=" * 60)
    
    try:
        result = asyncio.run(test_freeipa_integration())
        
        if result:
            print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FreeIPA –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("\nüìö –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:")
            print("  1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CLI –∫–æ–º–∞–Ω–¥—ã: python main.py freeipa --help")
            print("  2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: python main.py freeipa sync-all-users")
            print("  3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã: python main.py freeipa create-group")
            print("  4. –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/FREEIPA_INTEGRATION_GUIDE.md")
            
            return 0
        else:
            print("\n‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FreeIPA —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config/freeipa_config.json")
            print("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FreeIPA —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("  4. –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/FREEIPA_INTEGRATION_GUIDE.md")
            
            return 1
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
