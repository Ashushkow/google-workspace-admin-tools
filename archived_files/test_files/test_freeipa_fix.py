#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

async def test_freeipa_integration():
    """–¢–µ—Å—Ç FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
        from src.integrations.freeipa_integration import FreeIPAIntegration
        from src.services.user_service import UserService
        from src.services.group_service import GroupService
        from src.repositories.google_api_repository import GoogleUserRepository, GoogleGroupRepository
        from src.repositories.cache_repository import CacheRepository
        from src.repositories.audit_repository import SQLiteAuditRepository
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        class MockRepo:
            async def get_all(self): return []
            async def get_by_email(self, email): return None
        
        mock_user_repo = MockRepo()
        mock_group_repo = MockRepo()
        mock_cache_repo = MockRepo()
        mock_audit_repo = MockRepo()
        
        user_service = UserService(mock_user_repo, mock_cache_repo, mock_audit_repo)
        group_service = GroupService(mock_group_repo, mock_cache_repo, mock_audit_repo)
        
        print("‚úÖ –°–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        freeipa_integration = FreeIPAIntegration(user_service, group_service)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç freeipa_client –¥–æ—Å—Ç—É–ø–µ–Ω
        assert hasattr(freeipa_integration, 'freeipa_client'), "–ê—Ç—Ä–∏–±—É—Ç freeipa_client –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print("‚úÖ –ê—Ç—Ä–∏–±—É—Ç freeipa_client –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ freeipa_client –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
        client = freeipa_integration.freeipa_client
        assert client is not None, "freeipa_client –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None"
        print("‚úÖ freeipa_client –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        required_methods = ['get_groups', 'get_group', 'create_group']
        for method_name in required_methods:
            assert hasattr(client, method_name), f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            method = getattr(client, method_name)
            assert asyncio.iscoroutinefunction(method), f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π"
            print(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –Ω–∞–π–¥–µ–Ω –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π")
        
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –û—à–∏–±–∫–∞ 'FreeIPAIntegration' object has no attribute 'freeipa_client' –ò–°–ü–†–ê–í–õ–ï–ù–ê")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_ui_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        from src.ui.freeipa_management import FreeIPAManagementWindow
        print("‚úÖ FreeIPAManagementWindow –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å (–±–µ–∑ GUI)
        # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞—Å—Å–∞
        import inspect
        signature = inspect.signature(FreeIPAManagementWindow.__init__)
        print(f"‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FreeIPAManagementWindow: {signature}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ UI: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("="*60)
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø FREEIPA –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("="*60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success1 = asyncio.run(test_freeipa_integration())
    success2 = asyncio.run(test_ui_import())
    
    print("\n" + "="*60)
    if success1 and success2:
        print("üéØ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
    print("="*60)

if __name__ == "__main__":
    main()
