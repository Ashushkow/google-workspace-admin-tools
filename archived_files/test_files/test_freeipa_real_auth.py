#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FreeIPA —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.services.freeipa_safe_import import create_freeipa_client, get_freeipa_status
from src.services.freeipa_client import FreeIPAConfig, FreeIPAService

def test_stub_directly():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç FreeIPA stub —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç FreeIPA stub...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
        client = create_freeipa_client(
            server="ipa001.infra.int.sputnik8.com",  # –ë–µ–∑ —Å—Ö–µ–º—ã - –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            verify_ssl=False,
            timeout=30
        )
        
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(client).__name__}")
        print(f"üåê Host: {client.host}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ ping
        try:
            ping_result = client.ping()
            print(f"‚úÖ Ping —É—Å–ø–µ—à–µ–Ω: {ping_result}")
        except Exception as e:
            print(f"‚ö†Ô∏è Ping –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
        print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞...")
        login_success = client.login("Ashushkow", "Kudrovo95!")
        
        if login_success:
            print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!")
            
            # –¢–µ—Å—Ç API –≤—ã–∑–æ–≤–æ–≤
            try:
                print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø...")
                groups_result = client.group_find()
                print(f"‚úÖ –ì—Ä—É–ø–ø—ã –ø–æ–ª—É—á–µ–Ω—ã: {groups_result}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
            
            # –õ–æ–≥–∞—É—Ç
            client.logout()
            print("‚úÖ –õ–æ–≥–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
        else:
            print("‚ùå –õ–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è")
            
        return login_success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_freeipa_service():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ FreeIPAService"""
    print("\nüß™ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ FreeIPAService...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = FreeIPAConfig.from_file("config/freeipa_config.json")
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.server_url}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = FreeIPAService(config)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        connect_result = service.connect()
        
        if connect_result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ!")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø
            try:
                print("\nüìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å...")
                groups = service.get_groups()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups) if groups else 0}")
                
                if groups:
                    for i, group in enumerate(groups[:3]):
                        print(f"  üìÅ {group}")
                    if len(groups) > 3:
                        print(f"  ... –∏ –µ—â–µ {len(groups) - 3}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
            service.disconnect()
            print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            
        else:
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
        return connect_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

async def test_async_operations():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    try:
        config = FreeIPAConfig.from_file("config/freeipa_config.json")
        service = FreeIPAService(config)
        
        # –≠–º—É–ª–∏—Ä—É–µ–º async –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –≤ GUI
        async def async_connect():
            print("üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            result = service.connect()
            if result:
                print("‚úÖ Async –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                groups = service.get_groups()
                print(f"‚úÖ Async –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø: {len(groups) if groups else 0}")
                service.disconnect()
            return result
        
        result = await async_connect()
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ async –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 70)
    print("üß™ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö FREEIPA")
    print("üåê –°–µ—Ä–≤–µ—Ä: https://ipa001.infra.int.sputnik8.com/")
    print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Ashushkow")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å FreeIPA
    status = get_freeipa_status()
    print(f"üìä FreeIPA —Å—Ç–∞—Ç—É—Å:")
    print(f"  –î–æ—Å—Ç—É–ø–µ–Ω: {status['freeipa_available']}")
    print(f"  –ö–ª–∏–µ–Ω—Ç: {status['client_class']}")
    if status['import_error']:
        print(f"  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {status['import_error']}")
    
    tests = [
        ("–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç stub", test_stub_directly),
        ("–¢–µ—Å—Ç FreeIPAService", test_freeipa_service),
        ("–¢–µ—Å—Ç async –æ–ø–µ—Ä–∞—Ü–∏–π", lambda: asyncio.run(test_async_operations())),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*25} {test_name} {'='*25}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{status:<15} {test_name}")
    
    passed_tests = sum(results.values())
    total_tests = len(results)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeIPA —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print("‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≥—Ä—É–ø–ø–∞–º–∏")
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python main.py")
        print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí FreeIPA –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        print("   3. –ù–∞–∂–º–∏—Ç–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("   4. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –≥—Ä—É–ø–ø–∞–º–∏!")
        
    elif passed_tests >= total_tests * 0.66:
        print("\n‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ FreeIPA")
    
    return 0 if passed_tests >= total_tests * 0.66 else 1

if __name__ == "__main__":
    exit_code = main()
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞: {exit_code}")
    sys.exit(exit_code)
