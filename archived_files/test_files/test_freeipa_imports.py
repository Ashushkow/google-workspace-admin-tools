#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ FreeIPA –º–æ–¥—É–ª–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ Kerberos
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

def test_basic_imports():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ FreeIPA"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from src.core.application import Application
        print("‚úÖ Application –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from src.utils.enhanced_logger import setup_logging
        print("‚úÖ Logger –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from src.config.enhanced_config import config
        print("‚úÖ Config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_ui_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ UI –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from src.ui.main_window import AdminToolsMainWindow
        print("‚úÖ AdminToolsMainWindow –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç —É—Å–ª–æ–≤–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ FreeIPA
        try:
            from src.ui.main_window import AdminToolsMainWindow
            window_class = AdminToolsMainWindow
            print("‚úÖ AdminToolsMainWindow —Å–æ–∑–¥–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å AdminToolsMainWindow: {e}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ UI –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_freeipa_conditional_imports():
    """–¢–µ—Å—Ç —É—Å–ª–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ FreeIPA"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ FreeIPA...")
    
    try:
        # –¢–µ—Å—Ç services
        from src.services.freeipa_client import FREEIPA_AVAILABLE
        print(f"‚úÖ FreeIPA client –º–æ–¥—É–ª—å: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if FREEIPA_AVAILABLE else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –¢–µ—Å—Ç integrations
        from src.integrations import FREEIPA_AVAILABLE as integrations_available
        print(f"‚úÖ FreeIPA integrations: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if integrations_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –¢–µ—Å—Ç –ª–µ–Ω–∏–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ UI
        try:
            # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É Kerberos
            def lazy_import_test():
                from src.ui.freeipa_management import FREEIPA_MODULES_AVAILABLE
                return FREEIPA_MODULES_AVAILABLE
            
            freeipa_ui_available = lazy_import_test()
            print(f"‚úÖ FreeIPA UI –º–æ–¥—É–ª—å: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if freeipa_ui_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            
        except Exception as e:
            if "kerberos" in str(e).lower() or "kfw" in str(e).lower():
                print("‚ö†Ô∏è FreeIPA UI: –ü—Ä–æ–±–ª–µ–º–∞ —Å Kerberos (–æ–∂–∏–¥–∞–µ–º–æ)")
            else:
                print(f"‚ùå FreeIPA UI: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_manual_freeipa_import():
    """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ python-freeipa"""
    print("\nüîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç python-freeipa...")
    
    try:
        import python_freeipa
        print("‚úÖ python-freeipa –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    except ImportError as e:
        if "kerberos" in str(e).lower() or "kfw" in str(e).lower():
            print("‚ö†Ô∏è python-freeipa: –ü—Ä–æ–±–ª–µ–º–∞ —Å Kerberos (–æ–∂–∏–¥–∞–µ–º–æ –≤ Windows)")
            print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
            return True
        else:
            print(f"‚ùå python-freeipa –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ python-freeipa: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 70)
    print("üß™ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í FREEIPA –ú–û–î–£–õ–ï–ô")
    print("üéØ –¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
    print("=" * 70)
    
    tests = [
        ("–û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("UI –∏–º–ø–æ—Ä—Ç—ã", test_ui_imports),
        ("–£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã FreeIPA", test_freeipa_conditional_imports),
        ("–ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç python-freeipa", test_manual_freeipa_import),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{status:<15} {test_name}")
    
    passed_tests = sum(results.values())
    total_tests = len(results)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ Kerberos")
        print("‚úÖ FreeIPA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        
        print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py - –æ—à–∏–±–æ–∫ Kerberos –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ")
        print("   2. FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
        print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ test_freeipa_connection.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        
    elif passed_tests >= total_tests * 0.75:
        print("\n‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("‚ö†Ô∏è –ú–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ FreeIPA —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
        
    else:
        print("\n‚ùå –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
        print("‚ùå –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    return 0 if passed_tests >= total_tests * 0.75 else 1

if __name__ == "__main__":
    exit_code = main()
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞: {exit_code}")
    sys.exit(exit_code)
