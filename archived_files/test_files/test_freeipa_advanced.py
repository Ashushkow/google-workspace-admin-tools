#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É FreeIPA
–°–µ—Ä–≤–µ—Ä: https://ipa001.infra.int.sputnik8.com/
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç —Å –ø—Ä–æ—Å—Ç–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è Windows
"""

import sys
import requests
import json
from urllib.parse import urljoin
import warnings
import base64
warnings.filterwarnings("ignore", category=requests.packages.urllib3.exceptions.InsecureRequestWarning)


def test_basic_connectivity():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        response = requests.get(server_url, timeout=10, verify=False)
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω! HTTP –∫–æ–¥: {response.status_code}")
        print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ FreeIPA
        content = response.text.lower()
        if "freeipa" in content or "identity management" in content:
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä FreeIPA")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —ç—Ç–æ FreeIPA —Å–µ—Ä–≤–µ—Ä")
            
        return True
        
    except requests.exceptions.ConnectTimeout:
        print("‚ùå –¢–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_freeipa_api():
    """–¢–µ—Å—Ç FreeIPA API endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FreeIPA API...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    api_url = urljoin(server_url, "/ipa/json")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ API
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        response = requests.post(
            api_url, 
            headers=headers,
            json={
                "method": "ping",
                "params": [[], {}]
            },
            timeout=10,
            verify=False
        )
        
        print(f"üì° API endpoint –¥–æ—Å—Ç—É–ø–µ–Ω! HTTP –∫–æ–¥: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                print("‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON")
                if 'result' in result:
                    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç FreeIPA API")
                    return True
            except json.JSONDecodeError:
                print("‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –æ—Ç–≤–µ—Ç")
        elif response.status_code == 401:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)")
            return True
        
        return response.status_code in [200, 401]  # 401 –æ–∂–∏–¥–∞–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
    except requests.exceptions.ConnectTimeout:
        print("‚ùå –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API")
        return False
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False


def test_freeipa_login_form():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ FreeIPA"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ FreeIPA...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    login_url = urljoin(server_url, "/ipa/session/login_password")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
        response = requests.get(login_url, timeout=10, verify=False)
        
        if response.status_code == 200:
            print("‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return True
        elif response.status_code == 401:
            print("‚úÖ Endpoint –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)")
            return True
        else:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞: {e}")
        return False


def test_freeipa_manual_auth():
    """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)"""
    print("\nüîç –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_methods = [
            ("/ipa/session/login_password", "POST", "–ü–∞—Ä–æ–ª—å"),
            ("/ipa/session/login_kerberos", "POST", "Kerberos"),
            ("/ipa/json", "POST", "JSON API")
        ]
        
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        
        for endpoint, method, description in auth_methods:
            try:
                url = urljoin(server_url, endpoint)
                if method == "POST":
                    response = requests.post(url, timeout=5, verify=False)
                else:
                    response = requests.get(url, timeout=5, verify=False)
                    
                if response.status_code in [200, 401, 403]:
                    print(f"  ‚úÖ {description}: HTTP {response.status_code}")
                else:
                    print(f"  ‚ö†Ô∏è  {description}: HTTP {response.status_code}")
                    
            except Exception:
                print(f"  ‚ùå {description}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è:")
        print("   - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è FreeIPA")
        print("   - –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   - –î–æ–º–µ–Ω (–≤–µ—Ä–æ—è—Ç–Ω–æ: infra.int.sputnik8.com)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False


def test_domain_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞
        from urllib.parse import urlparse
        parsed = urlparse(server_url)
        hostname = parsed.hostname
        
        print(f"üåê Hostname —Å–µ—Ä–≤–µ—Ä–∞: {hostname}")
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ hostname
        if hostname:
            parts = hostname.split('.')
            if len(parts) >= 3:
                # ipa001.infra.int.sputnik8.com -> infra.int.sputnik8.com
                domain = '.'.join(parts[1:])
                print(f"üè† –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {domain}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–µ–π (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                try:
                    import socket
                    ip = socket.gethostbyname(hostname)
                    print(f"üîç IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {ip}")
                except:
                    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP –∞–¥—Ä–µ—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–∞: {e}")
        return False


def analyze_server_info():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    
    try:
        response = requests.get(server_url, timeout=10, verify=False)
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        print("üìã HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
        important_headers = [
            'server', 'x-frame-options', 'strict-transport-security',
            'set-cookie', 'www-authenticate', 'content-type'
        ]
        for header in important_headers:
            if header in response.headers:
                value = response.headers[header]
                if len(value) > 100:
                    value = value[:100] + "..."
                print(f"  {header}: {value}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = response.text
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏
        if "IPA.version" in content:
            print("\n‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ IPA –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
            
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if "IPA.config" in content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è IPA")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö IPA URL
        ipa_paths = [
            "/ipa/ui/", "/ipa/json", "/ipa/xml", 
            "/ipa/session/login_password", "/ipa/session/logout"
        ]
        print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π FreeIPA:")
        
        available_paths = 0
        for path in ipa_paths:
            try:
                test_url = urljoin(server_url, path)
                test_response = requests.head(test_url, timeout=5, verify=False)
                if test_response.status_code in [200, 401, 403]:
                    print(f"  ‚úÖ {path}: HTTP {test_response.status_code}")
                    available_paths += 1
                else:
                    print(f"  ‚ö†Ô∏è  {path}: HTTP {test_response.status_code}")
            except:
                print(f"  ‚ùå {path}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ {available_paths}/{len(ipa_paths)} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False


def create_config_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    config_template = {
        "server_url": "https://ipa001.infra.int.sputnik8.com/",
        "domain": "infra.int.sputnik8.com",
        "username": "your_username_here",
        "password": "your_password_here", 
        "use_kerberos": False,
        "verify_ssl": False,
        "description": "FreeIPA Server Configuration"
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é config –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        import os
        os.makedirs("config", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        config_file = "config/freeipa_config_template.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config_template, f, indent=4, ensure_ascii=False)
            
        print(f"‚úÖ –®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {config_file}")
        print("üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª, —É–∫–∞–∑–∞–≤ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üß™ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö FREEIPA –°–ï–†–í–ï–†–£")
    print("üåê –°–µ—Ä–≤–µ—Ä: https://ipa001.infra.int.sputnik8.com/")
    print("=" * 80)
    
    tests = [
        ("–ë–∞–∑–æ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", test_basic_connectivity),
        ("FreeIPA API", test_freeipa_api),
        ("–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞", test_freeipa_login_form),
        ("–ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", test_freeipa_manual_auth),
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ", test_domain_info),
        ("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–∞", analyze_server_info),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", create_config_template)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*25} {test_name} {'='*25}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 80)
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{status:<15} {test_name}")
    
    passed_tests = sum(results.values())
    total_tests = len(results)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests >= total_tests * 0.7:
        print("\nüéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä FreeIPA –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
        
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ FreeIPA")
        print("   2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config/freeipa_config_template.json")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ FreeIPA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
        print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
        
    elif passed_tests >= total_tests * 0.5:
        print("\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä FreeIPA –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL —Å–µ—Ä–≤–µ—Ä–∞")
        print("   3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞")
        
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú")
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("\nüÜò –î–ï–ô–°–¢–í–ò–Ø:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ firewall/proxy")
        print("   4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ç–∏")
    
    return 0 if passed_tests >= total_tests * 0.5 else 1


if __name__ == "__main__":
    exit_code = main()
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞: {exit_code}")
    sys.exit(exit_code)
