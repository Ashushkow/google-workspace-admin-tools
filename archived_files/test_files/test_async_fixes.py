#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è async –æ—à–∏–±–æ–∫ –≤ FreeIPA
"""

import sys
import asyncio
import tracemalloc
from pathlib import Path

# –í–∫–ª—é—á–∞–µ–º tracemalloc
tracemalloc.start()

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.utils.simple_utils import SimpleAsyncManager

def test_async_manager():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ async –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimpleAsyncManager...")
    
    async_manager = SimpleAsyncManager()
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    def sync_func():
        print("‚úÖ –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return "sync_result"
    
    # –¢–µ—Å—Ç 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    async def async_func():
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è async –æ–ø–µ—Ä–∞—Ü–∏–∏
        return "async_result"
    
    def on_success(result):
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: {result}")
    
    def on_error(error):
        print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    
    print("\n1. –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
    async_manager.run_async(sync_func, on_success, on_error)
    
    print("\n2. –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
    async_manager.run_async(async_func, on_success, on_error)
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    import time
    time.sleep(1)
    
    print("\n‚úÖ –¢–µ—Å—Ç—ã async –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    return True

def test_freeipa_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ FreeIPA"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ FreeIPA...")
    
    try:
        from src.services.freeipa_safe_import import get_freeipa_status
        status = get_freeipa_status()
        
        print(f"FreeIPA –¥–æ—Å—Ç—É–ø–µ–Ω: {status['freeipa_available']}")
        print(f"Kerberos –¥–æ—Å—Ç—É–ø–µ–Ω: {status['kerberos_available']}")
        print(f"–ö–ª–∏–µ–Ω—Ç: {status['client_class']}")
        
        if status['import_error']:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {status['import_error']}")
        
        return status['freeipa_available']
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_freeipa_connection():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è FreeIPA –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è FreeIPA –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    try:
        from src.services.freeipa_safe_import import create_freeipa_client
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
        client = create_freeipa_client('ipa001.infra.int.sputnik8.com', verify_ssl=False)
        print(f"‚úÖ FreeIPA –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(client).__name__}")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        if hasattr(client, 'ping'):
            print("‚úÖ –ú–µ—Ç–æ–¥ ping –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        if hasattr(client, 'login'):
            print("‚úÖ –ú–µ—Ç–æ–¥ login –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 70)
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ASYNC –û–®–ò–ë–û–ö FREEIPA")
    print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∫–æ—Ä—É—Ç–∏–Ω—ã, –∏–º–ø–æ—Ä—Ç—ã, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")
    print("=" * 70)
    
    tests = [
        ("Async Manager", test_async_manager),
        ("FreeIPA –∏–º–ø–æ—Ä—Ç—ã", test_freeipa_imports),
        ("FreeIPA –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_freeipa_connection),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*25} {test_name} {'='*25}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{status:<15} {test_name}")
    
    passed_tests = sum(results.values())
    total_tests = len(results)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Async –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print("‚úÖ FreeIPA –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å")
        
    elif passed_tests >= total_tests * 0.66:
        print("\n‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚ö†Ô∏è –ú–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        
    else:
        print("\n‚ùå –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    return 0 if passed_tests >= total_tests * 0.66 else 1

if __name__ == "__main__":
    exit_code = main()
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞: {exit_code}")
    sys.exit(exit_code)
