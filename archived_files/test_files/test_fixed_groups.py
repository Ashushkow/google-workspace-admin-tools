#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ list_groups
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.services.freeipa_client import FreeIPAService, FreeIPAConfig

def test_fixed_groups():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ú–ï–¢–û–î–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ì–†–£–ü–ü")
    print("=" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é FreeIPA
        freeipa_config_path = Path("config/freeipa_config.json")
        with open(freeipa_config_path, 'r', encoding='utf-8') as f:
            freeipa_config = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = FreeIPAConfig(
            server_url=freeipa_config.get('server_url', ''),
            domain=freeipa_config.get('domain', ''),
            username=freeipa_config.get('username', ''),
            password=freeipa_config.get('password', ''),
            use_kerberos=freeipa_config.get('use_kerberos', False),
            verify_ssl=freeipa_config.get('verify_ssl', True),
            timeout=freeipa_config.get('timeout', 30)
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = FreeIPAService(config)
        
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        if not service.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º list_groups()...")
        groups = service.list_groups()
        
        print(f"üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(groups)}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {len(groups) if isinstance(groups, list) else 'N/A'}")
        
        if isinstance(groups, list) and groups:
            print(f"\nüîç –ü–ï–†–í–´–ï 5 –ì–†–£–ü–ü:")
            for i, group in enumerate(groups[:5], 1):
                if isinstance(group, dict):
                    name = group.get('cn', ['Unknown'])[0] if isinstance(group.get('cn'), list) else group.get('cn', 'Unknown')
                    print(f"  {i}. {name}")
                else:
                    print(f"  {i}. {group} (—Ç–∏–ø: {type(group)})")
            
            print(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï –ì–†–£–ü–ü–´ (analytics, dev_backup):")
            analytics_found = False
            dev_backup_found = False
            
            for group in groups:
                if isinstance(group, dict):
                    name = group.get('cn', [''])[0] if isinstance(group.get('cn'), list) else group.get('cn', '')
                    if name.lower() == 'analytics':
                        analytics_found = True
                        print(f"  ‚úÖ analytics - {group}")
                    elif name.lower() == 'dev_backup':
                        dev_backup_found = True
                        print(f"  ‚úÖ dev_backup - {group}")
            
            if not analytics_found:
                print("  ‚ùå analytics –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            if not dev_backup_found:
                print("  ‚ùå dev_backup –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
            print(f"\nüìä –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û: {len(groups)} –≥—Ä—É–ø–ø")
            print("‚úÖ –ú–µ—Ç–æ–¥ list_groups —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!" if isinstance(groups, list) else "‚ùå –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø")
        else:
            print("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_fixed_groups()
