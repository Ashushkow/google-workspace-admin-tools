#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É FreeIPA
–°–µ—Ä–≤–µ—Ä: https://ipa001.infra.int.sputnik8.com/
"""

import sys
import requests
import json
from urllib.parse import urljoin
import warnings
warnings.filterwarnings("ignore", category=requests.packages.urllib3.exceptions.InsecureRequestWarning)


def test_basic_connectivity():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        response = requests.get(server_url, timeout=10, verify=False)
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω! HTTP –∫–æ–¥: {response.status_code}")
        print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ FreeIPA
        content = response.text.lower()
        if "freeipa" in content or "identity management" in content:
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä FreeIPA")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —ç—Ç–æ FreeIPA —Å–µ—Ä–≤–µ—Ä")
            
        return True
        
    except requests.exceptions.ConnectTimeout:
        print("‚ùå –¢–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_freeipa_api():
    """–¢–µ—Å—Ç FreeIPA API endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FreeIPA API...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    api_url = urljoin(server_url, "/ipa/json")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ API
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        response = requests.post(
            api_url, 
            headers=headers,
            json={
                "method": "ping",
                "params": [[], {}]
            },
            timeout=10,
            verify=False
        )
        
        print(f"üì° API endpoint –¥–æ—Å—Ç—É–ø–µ–Ω! HTTP –∫–æ–¥: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                print("‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON")
                if 'result' in result:
                    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç FreeIPA API")
                    return True
            except json.JSONDecodeError:
                print("‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –æ—Ç–≤–µ—Ç")
        
        return response.status_code in [200, 401]  # 401 –æ–∂–∏–¥–∞–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
    except requests.exceptions.ConnectTimeout:
        print("‚ùå –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API")
        return False
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False


def test_freeipa_with_library():
    """–¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º python-freeipa –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å python-freeipa –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π...")
    
    try:
        from python_freeipa import ClientMeta
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        client = ClientMeta(
            'ipa001.infra.int.sputnik8.com',
            verify_ssl=False
        )
        
        print("‚úÖ FreeIPA –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        try:
            result = client.ping()
            print("‚úÖ Ping –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–µ–Ω")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç ping: {result}")
            return True
        except Exception as e:
            if "Unauthorized" in str(e) or "Authentication" in str(e):
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)")
                return True
            else:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ ping: {e}")
                return False
                
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-freeipa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-freeipa")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ python-freeipa: {e}")
        return False


def analyze_server_info():
    """–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    server_url = "https://ipa001.infra.int.sputnik8.com/"
    
    try:
        response = requests.get(server_url, timeout=10, verify=False)
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        print("üìã HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
        important_headers = ['server', 'x-frame-options', 'strict-transport-security']
        for header in important_headers:
            if header in response.headers:
                print(f"  {header}: {response.headers[header]}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é
        content = response.text
        if "IPA.version" in content:
            print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ IPA –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö IPA URL
        ipa_paths = ["/ipa/ui/", "/ipa/json", "/ipa/xml"]
        print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π FreeIPA:")
        
        for path in ipa_paths:
            try:
                test_url = urljoin(server_url, path)
                test_response = requests.head(test_url, timeout=5, verify=False)
                status = "‚úÖ" if test_response.status_code in [200, 401, 403] else "‚ùå"
                print(f"  {status} {path}: HTTP {test_response.status_code}")
            except:
                print(f"  ‚ùå {path}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 70)
    print("üß™ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö FREEIPA –°–ï–†–í–ï–†–£")
    print("üåê –°–µ—Ä–≤–µ—Ä: https://ipa001.infra.int.sputnik8.com/")
    print("=" * 70)
    
    tests = [
        ("–ë–∞–∑–æ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", test_basic_connectivity),
        ("FreeIPA API", test_freeipa_api),
        ("Python FreeIPA –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", test_freeipa_with_library),
        ("–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–∞", analyze_server_info)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{status:<15} {test_name}")
    
    passed_tests = sum(results.values())
    total_tests = len(results)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests >= total_tests * 0.5:
        print("‚úÖ –°–µ—Ä–≤–µ—Ä FreeIPA –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ!")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
    else:
        print("‚ùå –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Å–µ—Ä–≤–µ—Ä–∞")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("   3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞")
    
    return 0 if passed_tests >= total_tests * 0.5 else 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
