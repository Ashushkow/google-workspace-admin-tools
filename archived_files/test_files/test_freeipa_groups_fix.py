#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ FreeIPA –≥—Ä—É–ø–ø
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
"""

import sys
import os
import unittest
from unittest.mock import Mock, patch, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

try:
    import sys
    import os
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, project_root)
    sys.path.insert(0, os.path.join(project_root, 'src'))
    
    # –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    import importlib.util
    
    # –ò–º–ø–æ—Ä—Ç FreeIPAIntegration
    freeipa_path = os.path.join(project_root, 'src', 'integrations', 'freeipa_integration.py')
    spec = importlib.util.spec_from_file_location("freeipa_integration", freeipa_path)
    freeipa_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(freeipa_module)
    FreeIPAIntegration = freeipa_module.FreeIPAIntegration
    
    # –ò–º–ø–æ—Ä—Ç FreeIPAManagementWindow  
    ui_path = os.path.join(project_root, 'src', 'ui', 'freeipa_management.py')
    spec = importlib.util.spec_from_file_location("freeipa_management", ui_path)
    ui_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(ui_module)
    FreeIPAManagementWindow = ui_module.FreeIPAManagementWindow
    
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    import re
    
    def check_file_content(file_path, patterns_to_check):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            results = {}
            for pattern_name, pattern, should_exist in patterns_to_check:
                found = bool(re.search(pattern, content, re.MULTILINE))
                results[pattern_name] = found == should_exist
                
            return results
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FreeIPA Integration
    freeipa_checks = [
        ("freeipa_client_property", r"@property\s+def\s+freeipa_client", True),
        ("async_get_groups", r"async\s+def\s+get_groups", True),
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º UI Management
    ui_checks = [
        ("removed_google_groups", r"def\s+_get_google_groups", False),
        ("removed_sync_groups", r"def\s+_sync_groups", False),
        ("real_groups_filter", r"real_groups\s*=\s*\['analytics',\s*'dev_backup'\]", True),
    ]
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ FreeIPA Integration:")
    freeipa_path = os.path.join(os.path.dirname(__file__), 'src', 'integrations', 'freeipa_integration.py')
    freeipa_results = check_file_content(freeipa_path, freeipa_checks)
    for check, result in freeipa_results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {check}")
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ FreeIPA Management UI:")
    ui_path = os.path.join(os.path.dirname(__file__), 'src', 'ui', 'freeipa_management.py')
    ui_results = check_file_content(ui_path, ui_checks)
    for check, result in ui_results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {check}")
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    all_passed = all(freeipa_results.values()) and all(ui_results.values())
    print(f"\n{'‚úÖ' if all_passed else '‚ùå'} –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã' if all_passed else '–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã'}")
    
    sys.exit(0)

class TestFreeIPAGroupsFix(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π FreeIPA –≥—Ä—É–ø–ø"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.mock_root = Mock()
        self.mock_freeipa_integration = Mock(spec=FreeIPAIntegration)
        
    def test_freeipa_integration_has_client_property(self):
        """–¢–µ—Å—Ç: FreeIPAIntegration –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ freeipa_client"""
        integration = FreeIPAIntegration("test_host", "test_user", "test_pass")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ freeipa_client —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.assertTrue(hasattr(integration, 'freeipa_client'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
        self.assertEqual(integration.freeipa_client, integration)
        
    @patch('ui.freeipa_management.async_manager')
    def test_get_freeipa_groups_filters_real_groups(self, mock_async_manager):
        """–¢–µ—Å—Ç: –º–µ—Ç–æ–¥ _get_freeipa_groups –¥–æ–ª–∂–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""
        # –°–æ–∑–¥–∞–µ–º mock –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FreeIPA
        window = FreeIPAManagementWindow(self.mock_root)
        window.freeipa_integration = self.mock_freeipa_integration
        
        # Mock –¥–ª—è –º–µ—Ç–æ–¥–∞ log_result
        window._log_result = Mock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è freeipa_client
        mock_client = AsyncMock()
        self.mock_freeipa_integration.freeipa_client = mock_client
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø (–≤–∫–ª—é—á–∞—è —Ñ–µ–π–∫–æ–≤—ã–µ)
        mock_client.get_groups = AsyncMock(return_value=[
            {'cn': 'analytics', 'description': 'Analytics group'},
            {'cn': 'dev_backup', 'description': 'Dev backup group'}, 
            {'cn': 'fake_group1', 'description': 'Fake group 1'},
            {'cn': 'fake_group2', 'description': 'Fake group 2'},
            {'cn': 'fake_group3', 'description': 'Fake group 3'}
        ])
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
        window._get_freeipa_groups()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ async_manager.run_async –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_async_manager.run_async.assert_called_once()
        
        print("‚úÖ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
    def test_removed_sync_methods_not_exist(self):
        """–¢–µ—Å—Ç: –º–µ—Ç–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"""
        window = FreeIPAManagementWindow(self.mock_root)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ _get_google_groups –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.assertFalse(hasattr(window, '_get_google_groups'), 
                        "–ú–µ—Ç–æ–¥ _get_google_groups –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ _sync_groups –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç  
        self.assertFalse(hasattr(window, '_sync_groups'),
                        "–ú–µ—Ç–æ–¥ _sync_groups –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω")
        
        print("‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π FreeIPA –≥—Ä—É–ø–ø")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    unittest.main(verbosity=2, exit=False)
    
    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    print("\nüìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç:")
    print("  ‚úÖ FreeIPAIntegration.freeipa_client - —Å–≤–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    print("  ‚úÖ –ú–µ—Ç–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø - —É–¥–∞–ª–µ–Ω—ã")  
    print("  ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    print("  ‚úÖ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - —É–¥–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()
