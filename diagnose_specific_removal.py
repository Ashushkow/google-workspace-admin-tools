#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
"""

import sys
import os
import asyncio
import tracemalloc
from pathlib import Path

# –í–∫–ª—é—á–∞–µ–º tracemalloc –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
tracemalloc.start()

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def diagnose_specific_removal():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å —É–¥–∞–ª–µ–Ω–∏–µ–º"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ì–†–£–ü–ü–´")
    print("=" * 80)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    group_email = "admin_team@sputnik8.com"
    user_email = "testdecember2023@sputnik8.com"
    
    print(f"üìß –ì—Ä—É–ø–ø–∞: {group_email}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_email}")
    
    try:
        from src.api.google_api_client import GoogleAPIClient
        from src.repositories.google_api_repository import GoogleGroupRepository
        from src.config.enhanced_config import config
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API
        print("\nüß™ –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Google API –∫–ª–∏–µ–Ω—Ç–∞")
        api_client = GoogleAPIClient(config.settings.google_application_credentials)
        is_initialized = api_client.initialize()
        
        print(f"üìä API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {'‚úÖ –î–∞' if is_initialized else '‚ùå –ù–µ—Ç'}")
        print(f"üìä API –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ –î–∞' if api_client.is_available() else '‚ùå –ù–µ—Ç'}")
        
        if not is_initialized:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Google API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ credentials.json")
            print("   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OAuth 2.0")
            print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—É–ø–æ–≤ –≤ credentials")
            return False
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        print(f"\nüß™ –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_email}")
        try:
            groups = api_client.get_groups()
            group_exists = any(group.get('email', '').lower() == group_email.lower() for group in groups)
            
            print(f"üìä –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ –î–∞' if group_exists else '‚ùå –ù–µ—Ç'}")
            
            if not group_exists:
                print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ì—Ä—É–ø–ø–∞ {group_email} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:")
                for group in groups[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥—Ä—É–ø–ø
                    print(f"   ‚Ä¢ {group.get('email', 'N/A')}: {group.get('name', 'N/A')}")
                if len(groups) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(groups) - 5} –≥—Ä—É–ø–ø")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}", exc_info=True)
            return False
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        print(f"\nüß™ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group_email}")
        try:
            members = api_client.get_group_members(group_email)
            user_in_group = any(member.get('email', '').lower() == user_email.lower() for member in members)
            
            print(f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {len(members)}")
            print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ: {'‚úÖ –î–∞' if user_in_group else '‚ùå –ù–µ—Ç'}")
            
            if not user_in_group:
                print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ!")
                print("üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:")
                for member in members[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    email = member.get('email', 'N/A')
                    role = member.get('role', 'N/A')
                    print(f"   ‚Ä¢ {email} ({role})")
                if len(members) > 10:
                    print(f"   ... –∏ –µ—â–µ {len(members) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω
                print("‚ÑπÔ∏è –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {e}", exc_info=True)
            
        # –®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        print(f"\nüß™ –®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {user_email} –∏–∑ {group_email}")
        try:
            result = api_client.remove_group_member(group_email, user_email)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result else '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}")
            
            if result:
                print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", exc_info=True)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "404" in str(e) or "Not Found" in str(e):
                print("üîç –ê–Ω–∞–ª–∏–∑: –û—à–∏–±–∫–∞ 404 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            elif "403" in str(e) or "Forbidden" in str(e):
                print("üîç –ê–Ω–∞–ª–∏–∑: –û—à–∏–±–∫–∞ 403 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            elif "400" in str(e) or "Bad Request" in str(e):
                print("üîç –ê–Ω–∞–ª–∏–∑: –û—à–∏–±–∫–∞ 400 - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            
            return False
        
        # –®–∞–≥ 5: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        print(f"\nüß™ –®–∞–≥ 5: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        try:
            from src.utils.group_verification import GroupChangeVerifier
            
            verifier = GroupChangeVerifier(api_client)
            verification_result = verifier.verify_member_removal(
                group_email, user_email,
                max_retries=2, retry_delay=3
            )
            
            print(f"üìä –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' if verification_result else '‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}")
            
            return verification_result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True)
            return False
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Python path –∏ –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª–µ–π")
        return False
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return False


async def test_repository_method():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("\nüß™ –¢–ï–°–¢ –ú–ï–¢–û–î–ê –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø")
    print("=" * 50)
    
    group_email = "admin_team@sputnik8.com"
    user_email = "testdecember2023@sputnik8.com"
    
    try:
        from src.repositories.google_api_repository import GoogleGroupRepository
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        repo = GoogleGroupRepository()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        print(f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ {user_email} –∏–∑ {group_email} —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
        result = await repo.remove_member(group_email, user_email, verify=True)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result else '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
        if hasattr(repo, 'get_operation_statistics'):
            stats = repo.get_operation_statistics()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {stats}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}", exc_info=True)
        return False


def provide_troubleshooting_steps():
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —à–∞–≥–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"""
    
    print("\nüîß –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú")
    print("=" * 80)
    
    print("1. üîê –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ credentials.json –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OAuth 2.0 consent screen")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å—Ç—å —Å–∫–æ—É–ø admin.directory.group")
    
    print("\n2. üè¢ –ü–†–û–í–ï–†–ö–ê –î–û–ú–ï–ù–ù–´–• –ü–†–ê–í:")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–º–µ–Ω–∞ sputnik8.com")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä—É–ø–ø–∞ admin_team@sputnik8.com —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    print("\n3. üë§ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ testdecember2023@sputnik8.com —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –≥—Ä—É–ø–ø–µ")
    print("   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
    
    print("\n4. üîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í:")
    print("   ‚Ä¢ –ò–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏")
    print("   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ HTTP –∫–æ–¥—ã –æ—à–∏–±–æ–∫")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö Google API")
    
    print("\n5. üöÄ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–ï–¢–û–î–´:")
    print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Admin Console")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gam (Google Apps Manager) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ Google Cloud Console")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –£–î–ê–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("testdecember2023@sputnik8.com –∏–∑ –≥—Ä—É–ø–ø—ã admin_team@sputnik8.com")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É API
    api_success = await diagnose_specific_removal()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    repo_success = await test_repository_method()
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    provide_troubleshooting_steps()
    
    print("\n" + "=" * 80)
    if api_success or repo_success:
        print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω")
    else:
        print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(main())
