#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø
"""

import sys
import os
from pathlib import Path

def analyze_source_code():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–û–ì–û –ö–û–î–ê –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–û–ë–õ–ï–ú–´")
    print("=" * 80)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_file = Path(__file__).parent / 'src' / 'repositories' / 'google_api_repository.py'
    
    if not repo_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {repo_file}")
        return False
    
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {repo_file}")
    
    try:
        with open(repo_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º
        problems_found = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        todo_count = content.count('TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Google API')
        if todo_count > 0:
            problems_found.append(f"üö® –ù–∞–π–¥–µ–Ω–æ {todo_count} –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö TODO –¥–ª—è Google API")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
        stub_count = content.count('(–∑–∞–≥–ª—É—à–∫–∞)')
        if stub_count > 0:
            problems_found.append(f"üö® –ù–∞–π–¥–µ–Ω–æ {stub_count} –∑–∞–≥–ª—É—à–µ–∫ –≤ –∫–æ–¥–µ")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ remove_member
        remove_method_count = content.count('async def remove_member')
        if remove_method_count > 1:
            problems_found.append(f"üö® –ù–∞–π–¥–µ–Ω–æ {remove_method_count} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ remove_member")
        
        # 4. –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ remove_member –∏ –∞–Ω–∞–ª–∏–∑ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if 'async def remove_member' in line:
                print(f"\nüìç –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ remove_member –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}:")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                start = max(0, i-2)
                end = min(len(lines), i+15)
                for j in range(start, end):
                    prefix = ">>> " if j == i else "    "
                    print(f"{prefix}{j+1:3}: {lines[j]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–æ–¥–∞
                method_lines = []
                indent_level = None
                for k in range(i+1, len(lines)):
                    line = lines[k]
                    if line.strip() == "":
                        method_lines.append(line)
                        continue
                    
                    current_indent = len(line) - len(line.lstrip())
                    if indent_level is None:
                        if line.strip():
                            indent_level = current_indent
                    
                    if line.strip() and current_indent <= len(line.split('def remove_member')[0]):
                        break
                    
                    method_lines.append(line)
                    
                    if k - i > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                        break
                
                method_content = '\n'.join(method_lines)
                
                if 'TODO' in method_content:
                    problems_found.append(f"üö® –ú–µ—Ç–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1} —Å–æ–¥–µ—Ä–∂–∏—Ç TODO - –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
                
                if '–∑–∞–≥–ª—É—à–∫–∞' in method_content:
                    problems_found.append(f"üö® –ú–µ—Ç–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1} —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π")
                
                if 'return True' in method_content and len(method_content.strip()) < 200:
                    problems_found.append(f"üö® –ú–µ—Ç–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1} –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è")
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 50)
        
        if problems_found:
            print("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
            for i, problem in enumerate(problems_found, 1):
                print(f"{i}. {problem}")
        else:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google API –∫–ª–∏–µ–Ω—Ç
        api_client_file = Path(__file__).parent / 'src' / 'api' / 'google_api_client.py'
        if api_client_file.exists():
            print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º Google API –∫–ª–∏–µ–Ω—Ç: {api_client_file}")
            
            with open(api_client_file, 'r', encoding='utf-8') as f:
                api_content = f.read()
            
            # –ò—â–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø
            group_member_methods = [
                'add_group_member',
                'remove_group_member', 
                'get_group_members'
            ]
            
            missing_methods = []
            for method in group_member_methods:
                if f'def {method}' not in api_content:
                    missing_methods.append(method)
            
            if missing_methods:
                print(f"üö® –í Google API –∫–ª–∏–µ–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã: {', '.join(missing_methods)}")
                problems_found.extend([f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ {method} –≤ Google API –∫–ª–∏–µ–Ω—Ç–µ" for method in missing_methods])
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã –≤ Google API –∫–ª–∏–µ–Ω—Ç–µ")
        
        return len(problems_found) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return False


def generate_fix_plan():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    
    print("\nüí° –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´")
    print("=" * 80)
    
    print("1. üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï GOOGLE API –ö–õ–ò–ï–ù–¢–ê:")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ remove_group_member(group_email, member_email)")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ add_group_member(group_email, member_email)")  
    print("   - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ get_group_members(group_email)")
    print("   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Google Directory API")
    
    print("\n2. üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø:")
    print("   - –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã remove_member")
    print("   - –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã API")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫")
    
    print("\n3. üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
    print("   - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    print("\n4. üîß –õ–û–ì–ò–†–û–í–ê–ù–ò–ï:")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("   - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ Google API")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –£–î–ê–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í –ò–ó –ì–†–£–ü–ü GOOGLE")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º...")
    print("=" * 80)
    
    success = analyze_source_code()
    
    if not success:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        generate_fix_plan()
    else:
        print("\n‚úÖ –ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
    
    print("\n" + "=" * 80)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()
