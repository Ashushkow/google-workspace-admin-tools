#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è SPUTNIK –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞.
"""

import sys
import os
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

def test_members_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        from src.api.sputnik_calendar import create_sputnik_calendar_manager
        
        print("üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –£–ß–ê–°–¢–ù–ò–ö–û–í –ö–ê–õ–ï–ù–î–ê–†–Ø SPUTNIK")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        calendar_manager = create_sputnik_calendar_manager()
        if not calendar_manager:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
            return False
        
        print("‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:")
        calendar_info = calendar_manager.get_calendar_info()
        print(f"  üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {calendar_info.name}")
        print(f"  üÜî ID: {calendar_info.id}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print("\nüë• –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        start_time = time.time()
        
        members = calendar_manager.get_members()
        
        load_time = time.time() - start_time
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print("\nüìä –ê–ù–ê–õ–ò–ó –£–ß–ê–°–¢–ù–ò–ö–û–í:")
        print("-" * 40)
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–æ–ª—è–º
        role_counts = {}
        domain_counts = {}
        
        for member in members:
            # –†–æ–ª–∏
            role = member.role
            role_counts[role] = role_counts.get(role, 0) + 1
            
            # –î–æ–º–µ–Ω—ã
            if '@' in member.email:
                domain = member.email.split('@')[1]
                domain_counts[domain] = domain_counts.get(domain, 0) + 1
        
        print("üîê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:")
        for role, count in sorted(role_counts.items()):
            role_emoji = {
                'owner': 'üëë',
                'writer': '‚úèÔ∏è', 
                'reader': 'üëÅÔ∏è',
                'freeBusyReader': '‚è∞'
            }.get(role, '‚ùì')
            print(f"  {role_emoji} {role}: {count}")
        
        print("\nüåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º–µ–Ω–∞–º:")
        for domain, count in sorted(domain_counts.items(), key=lambda x: x[1], reverse=True):
            print(f"  üìß {domain}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print(f"\nüìã –ü–ï–†–í–´–ï 10 –£–ß–ê–°–¢–ù–ò–ö–û–í:")
        print("-" * 50)
        for i, member in enumerate(members[:10]):
            role_name = {
                'owner': '–í–ª–∞–¥–µ–ª–µ—Ü',
                'writer': '–†–µ–¥–∞–∫—Ç–æ—Ä', 
                'reader': '–ß–∏—Ç–∞—Ç–µ–ª—å',
                'freeBusyReader': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏'
            }.get(member.role, member.role)
            print(f"  {i+1:2}. {member.email:<35} | {role_name}")
        
        if len(members) > 10:
            print(f"     ... –∏ –µ—â–µ {len(members) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_search_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        from src.api.sputnik_calendar import create_sputnik_calendar_manager
        
        print("\n\nüîç –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ü–û–ò–°–ö–ê")
        print("=" * 60)
        
        calendar_manager = create_sputnik_calendar_manager()
        members = calendar_manager.get_members()
        
        print(f"üìä –ë–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "sputnik8.com",
            "andrei",
            "valerii", 
            "alice",
            "example",
            "@gmail",
            "test"
        ]
        
        print("\nüß™ –¢–ï–°–¢–û–í–´–ï –ü–û–ò–°–ö–û–í–´–ï –ó–ê–ü–†–û–°–´:")
        print("-" * 40)
        
        for query in test_queries:
            matching_members = []
            query_lower = query.lower()
            
            for member in members:
                email_lower = member.email.lower()
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
                if query_lower in email_lower:
                    matching_members.append(member)
                else:
                    # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º email
                    email_parts = email_lower.split('@')
                    name_part = email_parts[0] if email_parts else ''
                    domain_part = email_parts[1] if len(email_parts) > 1 else ''
                    
                    if (query_lower in name_part or 
                        query_lower in domain_part or
                        any(query_lower in part for part in name_part.split('.'))):
                        matching_members.append(member)
            
            print(f"üîç '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(matching_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            for i, member in enumerate(matching_members[:3]):
                print(f"    {i+1}. {member.email}")
            
            if len(matching_members) > 3:
                print(f"    ... –∏ –µ—â–µ {len(matching_members) - 3}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í –ö–ê–õ–ï–ù–î–ê–†–Ø SPUTNIK")
    print("=" * 70)
    
    success = True
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    if not test_members_loading():
        success = False
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    if not test_search_functionality():
        success = False
    
    print("\n" + "=" * 70)
    if success:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å SPUTNIK")
        print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print("  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
    
    print("=" * 70)

if __name__ == "__main__":
    main()
