#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ OAuth 2.0 –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import sys
import os
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent.parent))


# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
from dotenv import load_dotenv
load_dotenv(override=True)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DEV_MODE=False –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
os.environ['DEV_MODE'] = 'False'

from src.api.google_api_client import GoogleAPIClient
from src.config.enhanced_config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_oauth2_debug():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OAuth 2.0 —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    print("=" * 80)
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OAUTH 2.0 –ò –ó–ê–ì–†–£–ó–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    credentials_file = Path("credentials.json")
    if credentials_file.exists():
        print(f"‚úÖ credentials.json –Ω–∞–π–¥–µ–Ω: {credentials_file.absolute()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø credentials
        try:
            import json
            with open(credentials_file, 'r') as f:
                creds_data = json.load(f)
            
            if 'installed' in creds_data:
                print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã OAuth 2.0 credentials")
                print(f"   Client ID: {creds_data['installed']['client_id']}")
                print(f"   Project ID: {creds_data['installed']['project_id']}")
            else:
                print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø credentials")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è credentials.json: {e}")
    else:
        print(f"‚ùå credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_file = Path(".env")
    if env_file.exists():
        print(f"‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
        with open(env_file, 'r', encoding='utf-8') as f:
            env_content = f.read()
        
        # –ò—â–µ–º DEV_MODE –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        if 'DEV_MODE' in env_content:
            for line in env_content.split('\n'):
                if line.strip().startswith('DEV_MODE'):
                    print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env: {line.strip()}")
                    break
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º .env
        load_dotenv(override=True)
        
        print(f"   DEV_MODE (–∏–∑ os.getenv): {os.getenv('DEV_MODE', 'False')}")
        
        # –ü–µ—á–∞—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"   DEV_MODE (–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è): {os.getenv('DEV_MODE', 'False')}")
        print(f"   GOOGLE_WORKSPACE_DOMAIN: {os.getenv('GOOGLE_WORKSPACE_DOMAIN', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
        print(f"   GOOGLE_WORKSPACE_ADMIN: {os.getenv('GOOGLE_WORKSPACE_ADMIN', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    else:
        print(f"‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º token.pickle
    token_file = Path("token.pickle")
    if token_file.exists():
        print(f"‚úÖ token.pickle –Ω–∞–π–¥–µ–Ω (—Ä–∞–∑–º–µ—Ä: {token_file.stat().st_size} –±–∞–π—Ç)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω
        try:
            import pickle
            with open(token_file, 'rb') as f:
                token_data = pickle.load(f)
            print(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            if hasattr(token_data, 'valid'):
                print(f"   –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {token_data.valid}")
            if hasattr(token_data, 'expired'):
                print(f"   –ò—Å—Ç–µ–∫: {token_data.expired}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    else:
        print(f"‚ö†Ô∏è token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)")
    
    print("\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API Client:")
    try:
        client = GoogleAPIClient(credentials_path="credentials.json")
        print("‚úÖ Google API Client —Å–æ–∑–¥–∞–Ω")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")
        success = client.initialize()
        
        if success:
            print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        connection_ok = loop.run_until_complete(client.test_connection())
        
        if connection_ok:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Google API")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    finally:
        loop.close()
    
    print("\n4. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    try:
        print("üë• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = client.get_users(max_results=10)
        
        if users:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for i, user in enumerate(users[:5]):
                email = user.get('primaryEmail', 'N/A')
                name = user.get('name', {}).get('fullName', 'N/A')
                suspended = user.get('suspended', False)
                print(f"   {i+1}. {email} ({name}) {'[–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù]' if suspended else ''}")
            
            if len(users) > 5:
                print(f"   ... –∏ –µ—â–µ {len(users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–æ–º–µ–Ω–µ")
            print("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ scopes –≤ OAuth")
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    print("\n5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:")
    is_dev_mode = os.getenv('DEV_MODE', 'False').lower() == 'true'
    print(f"DEV_MODE: {is_dev_mode}")
    
    if is_dev_mode:
        print("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –æ—Ç–∫–ª—é—á–∏—Ç–µ DEV_MODE –≤ .env")
    
    print("\n" + "=" * 80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)
    
    return True

if __name__ == "__main__":
    try:
        test_oauth2_debug()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
