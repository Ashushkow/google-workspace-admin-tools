#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å Gmail API.
"""

import sys
import os
import pickle
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path  
sys.path.insert(0, str(Path(__file__).parent / 'src'))

def emergency_gmail_diagnosis():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Gmail API"""
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GMAIL API")
    print("=" * 60)
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É Gmail API –≤—Å—ë –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials.json
    print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê CREDENTIALS.JSON")
    print("-" * 40)
    
    creds_path = Path("credentials.json")
    if not creds_path.exists():
        print("‚ùå credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        with open(creds_path, 'r') as f:
            creds_data = json.load(f)
        
        if 'installed' in creds_data:
            client_id = creds_data['installed'].get('client_id', 'N/A')
            project_id = creds_data['installed'].get('project_id', 'N/A')
            print(f"‚úÖ OAuth 2.0 Client ID –Ω–∞–π–¥–µ–Ω")
            print(f"üìã Client ID: {client_id}")
            print(f"üìã Project ID: {project_id}")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç credentials.json")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è credentials: {e}")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    print(f"\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê")
    print("-" * 40)
    
    token_path = Path("token.pickle")
    if not token_path.exists():
        print("‚ùå token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return
    
    try:
        with open(token_path, 'rb') as f:
            creds = pickle.load(f)
        
        print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"üìä –í–∞–ª–∏–¥–Ω—ã–π: {creds.valid}")
        print(f"‚è∞ –ò—Å—Ç–µ–∫—à–∏–π: {creds.expired}")
        
        if hasattr(creds, 'scopes') and creds.scopes:
            print(f"üìã Scopes –≤ —Ç–æ–∫–µ–Ω–µ ({len(creds.scopes)}):")
            gmail_found = False
            for scope in creds.scopes:
                is_gmail = " ‚Üê GMAIL!" if 'gmail' in scope else ""
                if 'gmail' in scope:
                    gmail_found = True
                print(f"   ‚Ä¢ {scope}{is_gmail}")
            
            if gmail_found:
                print(f"‚úÖ Gmail scope –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ")
            else:
                print(f"‚ùå Gmail scope –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        return
    
    # 3. –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gmail API
    print(f"\n3Ô∏è‚É£ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GMAIL API")
    print("-" * 40)
    
    try:
        from googleapiclient.discovery import build
        from googleapiclient.errors import HttpError
        
        # –°–æ–∑–¥–∞–µ–º Gmail —Å–µ—Ä–≤–∏—Å
        gmail_service = build('gmail', 'v1', credentials=creds)
        print("‚úÖ Gmail —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        test_methods = [
            ("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", lambda: gmail_service.users().getProfile(userId='me').execute()),
            ("–°–ø–∏—Å–æ–∫ —è—Ä–ª—ã–∫–æ–≤", lambda: gmail_service.users().labels().list(userId='me').execute()),
            ("–°–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤", lambda: gmail_service.users().drafts().list(userId='me').execute()),
        ]
        
        for name, method in test_methods:
            try:
                result = method()
                print(f"‚úÖ {name}: –£—Å–ø–µ—à–Ω–æ")
                if name == "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                    print(f"   üìß Email: {result.get('emailAddress', 'N/A')}")
                elif name == "–°–ø–∏—Å–æ–∫ —è—Ä–ª—ã–∫–æ–≤":
                    print(f"   üìã –Ø—Ä–ª—ã–∫–æ–≤: {len(result.get('labels', []))}")
                break  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç - API –¥–æ—Å—Ç—É–ø–µ–Ω
            except HttpError as e:
                print(f"‚ùå {name}: {e}")
                if "insufficient" in str(e).lower():
                    print(f"   üîç –ü—Ä–æ–±–ª–µ–º–∞: Gmail scope –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ OAuth Consent Screen!")
            except Exception as e:
                print(f"‚ùå {name}: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Gmail —Å–µ—Ä–≤–∏—Å–∞: {e}")
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    print(f"\n4Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø")
    print("-" * 40)
    print("üéØ –ü–†–û–ë–õ–ï–ú–ê: Gmail scope –µ—Å—Ç—å –≤ —Ç–æ–∫–µ–Ω–µ, –Ω–æ –ù–ï –≤ OAuth Consent Screen")
    print("")
    print("üìã –†–ï–®–ï–ù–ò–ï (–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¢–û–ß–ù–û –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ):")
    print("")
    print("1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ console.cloud.google.com")
    print("2. üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å —ç—Ç–∏–º Client ID:")
    print(f"   {client_id}")
    print("3. üîß APIs & Services ‚Üí OAuth consent screen")
    print("4. ‚úèÔ∏è EDIT APP")
    print("5. üìã –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —à–∞–≥—É 'Scopes'")
    print("6. ‚ûï ADD OR REMOVE SCOPES")
    print("7. üîç –ù–∞–π–¥–∏—Ç–µ 'Gmail API'")
    print("8. ‚úÖ –û—Ç–º–µ—Ç—å—Ç–µ: '../auth/gmail.send - Send email on your behalf'")
    print("9. üíæ UPDATE")
    print("10. ‚úÖ SAVE AND CONTINUE –¥–æ –∫–æ–Ω—Ü–∞")
    print("")
    print("11. üóëÔ∏è –£–¥–∞–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω: rm token.pickle")
    print("12. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    print("13. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: python setup_gmail_api.py")
    
    # 5. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    print(f"\n5Ô∏è‚É£ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø")
    print("-" * 40)
    print("–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è:")
    print("")
    print("üîÑ –í–∞—Ä–∏–∞–Ω—Ç 1: –ù–æ–≤—ã–π OAuth Client ID")
    print("   1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π OAuth 2.0 Client ID")
    print("   2. –°—Ä–∞–∑—É –¥–æ–±–∞–≤—å—Ç–µ Gmail scope –≤ OAuth consent screen")
    print("   3. –°–∫–∞—á–∞–π—Ç–µ –Ω–æ–≤—ã–π credentials.json")
    print("   4. –£–¥–∞–ª–∏—Ç–µ token.pickle")
    print("   5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("")
    print("üîÑ –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞")
    print("   1. Google Workspace Admin Console")
    print("   2. Security ‚Üí API controls")
    print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Gmail API —Ä–∞–∑—Ä–µ—à–µ–Ω")
    print("")
    print("üîÑ –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π Google –∞–∫–∫–∞—É–Ω—Ç")
    print("   1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∞—Ö –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    emergency_gmail_diagnosis()


if __name__ == "__main__":
    main()
