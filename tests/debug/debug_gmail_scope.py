#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Gmail API –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã insufficient scopes.
"""

import sys
import os
import pickle
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path  
sys.path.insert(0, str(Path(__file__).parent / 'src'))

def analyze_token_details():
    """–ê–Ω–∞–ª–∏–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–∫–µ–Ω–∞"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê")
    print("=" * 50)
    
    token_path = Path("token.pickle")
    
    if not token_path.exists():
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(token_path, 'rb') as token_file:
            credentials = pickle.load(token_file)
        
        print(f"üìä –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(credentials)}")
        print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {credentials.valid}")
        print(f"‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {credentials.expired}")
        
        if hasattr(credentials, 'scopes'):
            print(f"\nüìã Scopes –≤ —Ç–æ–∫–µ–Ω–µ:")
            for i, scope in enumerate(credentials.scopes or [], 1):
                is_gmail = " ‚Üê GMAIL!" if 'gmail' in scope else ""
                print(f"  {i}. {scope}{is_gmail}")
            
            gmail_scope = 'https://www.googleapis.com/auth/gmail.send'
            if gmail_scope in (credentials.scopes or []):
                print(f"\n‚úÖ Gmail scope –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ!")
            else:
                print(f"\n‚ùå Gmail scope –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ!")
                print(f"üîç –û–∂–∏–¥–∞–µ–º—ã–π scope: {gmail_scope}")
        
        if hasattr(credentials, 'token'):
            print(f"\nüîë Access token –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {bool(credentials.token)}")
        
        if hasattr(credentials, 'refresh_token'):
            print(f"üîÑ Refresh token –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {bool(credentials.refresh_token)}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False


def test_gmail_api_call():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Gmail API"""
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–Ø–ú–û–ì–û –í–´–ó–û–í–ê GMAIL API")
    print("=" * 50)
    
    try:
        from src.api.google_api_client import GoogleAPIClient
        from src.config.enhanced_config import config
        
        client = GoogleAPIClient(config.settings.google_application_credentials)
        
        if not client.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return False
        
        print("‚úÖ Google API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å Gmail —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é
        try:
            from googleapiclient.discovery import build
            gmail_service = build('gmail', 'v1', credentials=client.credentials)
            print("‚úÖ Gmail —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            try:
                profile = gmail_service.users().getProfile(userId='me').execute()
                print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {profile.get('emailAddress')}")
                return True
            except Exception as profile_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_error}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ - —Å–ø–∏—Å–æ–∫ —è—Ä–ª—ã–∫–æ–≤
                try:
                    labels = gmail_service.users().labels().list(userId='me').execute()
                    print(f"‚úÖ –°–ø–∏—Å–æ–∫ —è—Ä–ª—ã–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω: {len(labels.get('labels', []))} —è—Ä–ª—ã–∫–æ–≤")
                    return True
                except Exception as labels_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è—Ä–ª—ã–∫–æ–≤: {labels_error}")
                    return False
                    
        except Exception as service_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Gmail —Å–µ—Ä–≤–∏—Å–∞: {service_error}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def check_oauth_consent_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OAuth Consent Screen"""
    print(f"\nüìã –ü–†–û–í–ï–†–ö–ê OAUTH CONSENT SCREEN")
    print("=" * 50)
    
    print("üîç –¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ Google Cloud Console:")
    print("")
    print("1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ console.cloud.google.com")
    print("2. üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç")
    print("3. üîß APIs & Services ‚Üí OAuth consent screen")
    print("4. ‚úèÔ∏è –ù–∞–∂–º–∏—Ç–µ 'EDIT APP'")
    print("5. üìã –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —à–∞–≥—É 'Scopes'")
    print("6. ‚ûï –ù–∞–∂–º–∏—Ç–µ 'ADD OR REMOVE SCOPES'")
    print("7. üîç –ù–∞–π–¥–∏—Ç–µ 'Gmail API'")
    print("8. ‚úÖ –û—Ç–º–µ—Ç—å—Ç–µ: 'Send email on your behalf'")
    print("   üìé Scope: https://www.googleapis.com/auth/gmail.send")
    print("9. üíæ –ù–∞–∂–º–∏—Ç–µ 'UPDATE'")
    print("10. ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
    
    print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:")
    print("Gmail scope –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –≤ OAuth consent screen,")
    print("–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")


def suggest_immediate_fix():
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    print(f"\nüõ†Ô∏è –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
    print("=" * 50)
    
    print("–°—É–¥—è –ø–æ –æ—à–∏–±–∫–µ 'insufficient authentication scopes',")
    print("Gmail scope –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ OAuth consent screen.")
    print("")
    print("üìã –ü–û–®–ê–ì–û–í–û–ï –†–ï–®–ï–ù–ò–ï:")
    print("")
    print("1. ‚úÖ –î–æ–±–∞–≤—å—Ç–µ Gmail scope –≤ OAuth consent screen (—Å–º. –≤—ã—à–µ)")
    print("2. üóëÔ∏è –£–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω:")
    print("   rm token.pickle")
    print("3. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    print("   python main.py")
    print("4. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("   python setup_gmail_api.py")
    
    print(f"\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê:")
    print("–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ Gmail API –Ω–µ –≤–∫–ª—é—á–µ–Ω:")
    print("APIs & Services ‚Üí Library ‚Üí 'Gmail API' ‚Üí ENABLE")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GMAIL API")
    print("=" * 60)
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É 'insufficient authentication scopes'\n")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token_ok = analyze_token_details()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_ok = test_gmail_api_call()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    check_oauth_consent_status()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
    suggest_immediate_fix()
    
    print(f"\nüìä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 50)
    
    if not api_ok:
        print("‚ùå Gmail API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ scope")
        print("üîß –î–æ–±–∞–≤—å—Ç–µ Gmail scope –≤ OAuth consent screen")
        print("üìã –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ")
    else:
        print("‚úÖ Gmail API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


if __name__ == "__main__":
    main()
