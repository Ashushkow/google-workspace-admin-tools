#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OAuth 2.0 —Ç–æ–∫–µ–Ω–∞ –∏ scopes.
"""

import os
import pickle
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.config.enhanced_config import config


def check_token_scopes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ scopes –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ"""
    token_path = "token.pickle"
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OAuth 2.0 —Ç–æ–∫–µ–Ω–∞ –∏ scopes")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üìã –¢—Ä–µ–±—É–µ–º—ã–µ scopes –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    for i, scope in enumerate(config.google.scopes, 1):
        print(f"  {i}. {scope}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if os.path.exists(token_path):
        try:
            with open(token_path, 'rb') as token:
                creds = pickle.load(token)
            
            print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token_path}")
            print(f"üîì –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {'–î–∞' if creds.valid else '–ù–µ—Ç'}")
            print(f"‚è∞ –ò—Å—Ç–µ–∫: {'–î–∞' if creds.expired else '–ù–µ—Ç'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º scopes –≤ —Ç–æ–∫–µ–Ω–µ
            if hasattr(creds, 'scopes') and creds.scopes:
                print(f"\nüìä Scopes –≤ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ:")
                for i, scope in enumerate(creds.scopes, 1):
                    print(f"  {i}. {scope}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–π scope
                member_scope = 'https://www.googleapis.com/auth/admin.directory.group.member'
                if member_scope in creds.scopes:
                    print(f"\n‚úÖ Scope –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø –ù–ê–ô–î–ï–ù")
                else:
                    print(f"\n‚ùå Scope –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {member_scope}")
                    return False
            else:
                print("\n‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ scopes –≤ —Ç–æ–∫–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    else:
        print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {token_path}")
        return False
    
    return True


def check_credentials_type():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ credentials"""
    creds_path = "credentials.json"
    
    if os.path.exists(creds_path):
        try:
            import json
            with open(creds_path, 'r') as f:
                creds_data = json.load(f)
            
            if 'installed' in creds_data:
                print(f"üîê –¢–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: OAuth 2.0 (Desktop Application)")
                return 'oauth2'
            elif 'type' in creds_data and creds_data['type'] == 'service_account':
                print(f"‚öôÔ∏è –¢–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: Service Account")
                return 'service_account'
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø credentials")
                return 'unknown'
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è credentials.json: {e}")
            return 'error'
    else:
        print(f"‚ùå credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 'missing'


def main():
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ 403")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    creds_type = check_credentials_type()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ scopes
    token_ok = check_token_scopes()
    print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    if creds_type == 'oauth2':
        if not token_ok:
            print("1. üóëÔ∏è –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω:")
            print("   Remove-Item token.pickle -Force")
            print()
            print("2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:")
            print("   python main.py")
            print()
            print("3. üåê –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            print("4. ‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç–µ –í–°–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–∞–≤–∞")
        else:
            print("‚úÖ –¢–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ scopes")
            print("‚ùì –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ 403:")
            print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Google Workspace")
            print("   - Admin SDK API –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ Google Cloud Console")
            print("   - –ì—Ä—É–ø–ø–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    elif creds_type == 'service_account':
        print("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Service Account")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Domain-wide delegation –≤ Google Admin Console")
        print("üîó –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ scopes:")
        for scope in config.google.scopes:
            print(f"   - {scope}")
    
    print("\nüìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –≤—ã–≤–æ–¥ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")


if __name__ == "__main__":
    main()
