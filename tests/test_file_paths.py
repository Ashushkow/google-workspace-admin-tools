#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
"""

import sys
from pathlib import Path
import tempfile
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from utils.file_paths import (
    file_path_manager, 
    get_export_path, 
    get_log_path, 
    get_config_path,
    get_temp_path,
    get_organized_path
)


def test_file_paths():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    for name, path in file_path_manager.directories.items():
        exists = path.exists()
        print(f"   üìÅ {name}: {path} - {'‚úÖ' if exists else '‚ùå'}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    export_tests = [
        "users_export.csv",
        "members_export.xlsx", 
        "report.json"
    ]
    
    for filename in export_tests:
        path = get_export_path(filename)
        expected_dir = file_path_manager.directories['exports']
        is_correct = path.parent == expected_dir
        print(f"   üìÑ {filename} ‚Üí {path} - {'‚úÖ' if is_correct else '‚ùå'}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π –ª–æ–≥–æ–≤...")
    log_tests = [
        "admin_tools.log",
        "errors.log",
        "security_audit.json"
    ]
    
    for filename in log_tests:
        path = get_log_path(filename)
        expected_dir = file_path_manager.directories['logs']
        is_correct = path.parent == expected_dir
        print(f"   üìÑ {filename} ‚Üí {path} - {'‚úÖ' if is_correct else '‚ùå'}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config_tests = [
        "app_config.json",
        "theme_config.json",
        "settings.json"
    ]
    
    for filename in config_tests:
        path = get_config_path(filename)
        expected_dir = file_path_manager.directories['config']
        is_correct = path.parent == expected_dir
        print(f"   üìÑ {filename} ‚Üí {path} - {'‚úÖ' if is_correct else '‚ùå'}")
    
    # –¢–µ—Å—Ç 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...")
    auto_tests = [
        ("user_data.csv", "exports"),
        ("app.log", "logs"),
        ("config.json", "config"),
        ("temp_file.tmp", "temp"),
        ("credentials.json", "root"),  # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π
    ]
    
    for filename, expected_type in auto_tests:
        path = get_organized_path(filename)
        
        if expected_type == "root":
            is_correct = path.parent == file_path_manager.project_root
        else:
            expected_dir = file_path_manager.directories.get(expected_type, file_path_manager.directories['data'])
            is_correct = path.parent == expected_dir
            
        print(f"   üìÑ {filename} ‚Üí {expected_type} - {'‚úÖ' if is_correct else '‚ùå'}")
    
    # –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞...")
    try:
        test_file_path = get_temp_path("test_file.txt")
        with open(test_file_path, 'w', encoding='utf-8') as f:
            f.write("–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—É—Ç–µ–π")
        
        if test_file_path.exists():
            print(f"   ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {test_file_path}")
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_file_path.unlink()
            print(f"   üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    # –¢–µ—Å—Ç 7: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    print("\n7Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö...")
    info = file_path_manager.get_directory_info()
    for name, data in info.items():
        exists = "‚úÖ" if data['exists'] else "‚ùå"
        files = data['files_count']
        size = data['total_size_mb']
        print(f"   üìÅ {name}: {exists} - {files} —Ñ–∞–π–ª–æ–≤, {size} MB")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def test_real_usage():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    from datetime import datetime
    export_filename = f"users_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    export_path = get_export_path(export_filename)
    
    print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç: {export_path}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_path = get_log_path("test_app.log")
    print(f"üìù –õ–æ–≥: {log_path}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = get_config_path("test_config.json")
    print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥: {config_path}")


if __name__ == "__main__":
    try:
        test_file_paths()
        test_real_usage()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –°–∏—Å—Ç–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
